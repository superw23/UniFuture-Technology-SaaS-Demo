{"ast":null,"code":"import UserService from '@/services/User/UserService';\nimport axios from 'axios';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport * as XLSX from 'xlsx';\nfunction s2ab(s) {\n  // Convert a string to an ArrayBuffer\n  const buf = new ArrayBuffer(s.length);\n  const view = new Uint8Array(buf);\n  for (let i = 0; i < s.length; i++) {\n    view[i] = s.charCodeAt(i) & 0xFF;\n  }\n  return buf;\n}\nexport default {\n  name: 'Users',\n  data() {\n    return {\n      itemsPerPage: 5,\n      //the number of customer shown in one page\n      pageNum: 0,\n      //store current page number\n      search: '',\n      //store search content\n      userId: '',\n      editing: false,\n      //true if the user info needs editing, else false\n      isSuccess: false,\n      //true if the customer is deleted successfully, else false\n      isEdited: false,\n      //true if the customer is edited successfully, else false\n      users: [],\n      //store users per page\n      fixedUsers: [],\n      //store all users\n      pdfIconSize: '2em',\n      excelIconSize: '2em'\n    };\n  },\n  methods: {\n    //Get all users from the database\n    async getUsers() {\n      await UserService.getUsers().then(response => {\n        this.users = response.data;\n        this.fixedUsers = response.data;\n      });\n    },\n    //Delete a chosen user from the database\n    async deleteUser(userId) {\n      const response = await axios.delete(`deleteUser/${userId}`);\n      this.isSuccess = true;\n      this.isEdited = false;\n      this.getUsers();\n    },\n    //Sort users by a given field, such as id, name\n    sort(field) {\n      UserService.sort(this.pageNum, this.itemsPerPage, field).then(response => {\n        this.users = response.data;\n      });\n    },\n    //Update the information of a chosen user\n    updateUser() {\n      axios.put(`updateUser`, {\n        id: this.$refs.id.value,\n        name: this.$refs.name.value,\n        email: this.$refs.email.value,\n        role: this.$refs.role.value\n      }).then(response => {\n        this.isEdited = true;\n        this.isSuccess = false;\n        this.getUsers();\n        console.log(response);\n      });\n    },\n    //Get users information as required after paging\n    pagination(pageNum) {\n      this.pageNum = pageNum;\n      if (this.pageNum == -1) {\n        this.pageNum = 0;\n        return;\n      }\n      console.log(this.pageNum);\n      UserService.pagination(pageNum, this.itemsPerPage).then(response => {\n        this.users = response.data;\n      });\n    },\n    //Pass the chosen user information to the modal dialog box\n    passUser(user) {\n      this.editing = true;\n      this.$refs.id.value = user.id;\n      this.$refs.name.value = user.name;\n      this.$refs.email.value = user.email;\n      this.$refs.role.value = user.role;\n    },\n    //Change the number of users shown per page \n    changeUserPerPage(num) {\n      this.itemsPerPage = num;\n      this.pagination(this.pageNum, this.itemsPerPage);\n    },\n    //Download the pdf format of the user table\n    downloadPDF() {\n      const columns = [{\n        header: 'User ID',\n        dataKey: 'id'\n      }, {\n        header: 'Name',\n        dataKey: 'name'\n      }, {\n        header: 'Email',\n        dataKey: 'email'\n      }, {\n        header: 'Role',\n        dataKey: 'role'\n      }];\n      const pdf = new jsPDF();\n      //text is placed using x, y coordinates\n      pdf.setFontSize(20).text(\"User List\", 80, 10);\n      //use autoTable plugin\n      autoTable(pdf, {\n        columns,\n        body: this.users,\n        margin: {\n          top: 30\n        }\n      });\n      //show total stock\n      pdf.setFontSize(16).text('Total users: ' + this.total, 80, 20);\n      //download pdf\n      pdf.save(\"Users.pdf\");\n    },\n    //Download the excel format of the user table\n    downloadExcel() {\n      // Create a new array of objects that excludes the 'password' property\n      const filteredUsersWithoutPassword = this.filteredUsers.map(user => {\n        return {\n          UserID: user.id,\n          Name: user.name,\n          Email: user.email,\n          Role: user.role\n        };\n      });\n\n      // Create a new workbook\n      const wb = XLSX.utils.book_new();\n\n      // Add a new worksheet to the workbook\n      const ws = XLSX.utils.json_to_sheet(filteredUsersWithoutPassword);\n\n      // Add the worksheet to the workbook\n      XLSX.utils.book_append_sheet(wb, ws, 'Users');\n\n      // Write the workbook to a binary string\n      const wbout = XLSX.write(wb, {\n        bookType: 'xlsx',\n        type: 'binary'\n      });\n\n      // Convert the binary string to a Blob object\n      const blob = new Blob([s2ab(wbout)], {\n        type: 'application/octet-stream'\n      });\n\n      // Create a temporary link to the file and trigger a download\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'Users.xlsx';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    },\n    getUserId(id) {\n      this.userId = id;\n    }\n  },\n  created() {\n    //Get all users data when the page is being loaded\n    this.getUsers();\n  },\n  computed: {\n    //Get required users after searching\n    filteredUsers() {\n      return this.users.filter(user => user.name.toLowerCase().includes(this.search.toLowerCase()));\n    },\n    //Get total number of users\n    total() {\n      return this.users.length;\n    },\n    totalPages() {\n      return Math.ceil(this.fixedUsers.length / this.itemsPerPage);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["UserService","axios","jsPDF","autoTable","XLSX","s2ab","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","name","data","itemsPerPage","pageNum","search","userId","editing","isSuccess","isEdited","users","fixedUsers","pdfIconSize","excelIconSize","methods","getUsers","then","response","deleteUser","delete","sort","field","updateUser","put","id","$refs","value","email","role","console","log","pagination","passUser","user","changeUserPerPage","num","downloadPDF","columns","header","dataKey","pdf","setFontSize","text","body","margin","top","total","save","downloadExcel","filteredUsersWithoutPassword","filteredUsers","map","UserID","Name","Email","Role","wb","utils","book_new","ws","json_to_sheet","book_append_sheet","wbout","write","bookType","type","blob","Blob","url","window","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","getUserId","created","computed","filter","toLowerCase","includes","totalPages","Math","ceil"],"sourceRoot":"","sources":["C:\\Users\\Ella\\Desktop\\vue-frontend\\src\\components\\Others\\User\\UserPage.vue"],"sourcesContent":["// Made by GRPTeam202205\r\n<template>\r\n<div class=\"modal fade\" id=\"exampleModal\" ref=\"userModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n  <div class=\"modal-dialog\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <h5 class=\"modal-title\" id=\"exampleModalLabel\">\r\n        <div class=\"icon1\"></div> <div class=\"empty-row2\"></div> <div class=\"icon2\"></div>\r\n          <span v-if=\"editing\">{{$t('User.Edit User')}}</span>\r\n          <span v-else>{{$t('User.Add New User')}}</span>\r\n        </h5>\r\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n      </div>\r\n\r\n      <!--User List-->\r\n      <div class=\"modal-body\">\r\n        <form>\r\n          <div class=\"mb-3\">\r\n            <label for=\"id\" class=\"col-form-label\">{{$t('ID')}}:</label>\r\n            <input type=\"text\" class=\"form-control\" id=\"id\" ref=\"id\" value=\"\" disabled=\"disabled\">\r\n          </div>\r\n          <div class=\"mb-3\">\r\n            <label for=\"name\" class=\"col-form-label\">{{$t('Name')}}:</label>\r\n            <input type=\"text\" class=\"form-control\" id=\"name\" ref=\"name\" value=\"\">\r\n          </div>\r\n          <div class=\"mb-3\">\r\n            <label for=\"email\" class=\"col-form-label\">{{$t('Email')}}:</label>\r\n            <input type=\"text\" class=\"form-control\" id=\"email\" ref=\"email\" value=\"\">\r\n          </div>\r\n          <div class=\"mb-3\">\r\n            <label for=\"role\" class=\"col-form-label\">{{$t('Role')}}:</label>\r\n            <select class=\"form-select\" id=\"role\" ref=\"role\">\r\n              <option>{{$t('Manager')}}</option>\r\n              <option>{{$t('Warehouse Manager')}}</option>\r\n              <option>{{$t('Purchase Manager')}}</option>\r\n              <option>{{$t('Sales Personnel')}}</option>\r\n            </select>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">{{$t('Close')}}</button>\r\n        <button type=\"button\" class=\"btn btn-primary\" data-bs-dismiss=\"modal\" @click=\"updateUser()\">{{$t('Send')}}</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n    <nav class=\"navbar\">\r\n        <div class=\"container-fluid\">\r\n          <!--Drop-down menu to choose the number of users per page-->\r\n          <div class=\"dropdown\">\r\n              <button class=\"btn dropdown-toggle\" type=\"button\" id=\"dropdownMenu2\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                  {{$t('User.Users Per Page')}}\r\n              </button>\r\n              <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2\">\r\n                  <li><button class=\"dropdown-item\" type=\"button\" @click=\"changeUserPerPage(5)\">5</button></li>\r\n                  <li><button class=\"dropdown-item\" type=\"button\" @click=\"changeUserPerPage(10)\">10</button></li>\r\n                  <li><button class=\"dropdown-item\" type=\"button\" @click=\"changeUserPerPage(15)\">15</button></li>\r\n              </ul>\r\n          </div>\r\n          <a class=\"navbar-brand\"></a>\r\n          <form class=\"d-flex\" role=\"search\">\r\n          <input class=\"form-control me-2\" type=\"search\" :placeholder=\"$t('Search')\" aria-label=\"Search\" v-model=\"search\">\r\n          <button class=\"btn btn-outline-success\" type=\"submit\">{{$t('Search')}}</button>\r\n          </form>\r\n        </div>\r\n    </nav>\r\n\r\n  <div class=\"container\">\r\n    <h1 class=\"test-center\" data-test=\"userList\">{{$t('User.User List')}}\r\n        <router-link :to=\"{name:'AddUser'}\"><i class=\"fa fa-cart-plus\" style=\"font-size:42px\"></i></router-link>\r\n        </h1>\r\n        \r\n    <!-- Success Alert will be shown if the user is successfully deleted from the database. -->\r\n    <div class=\"alert alert-success\" v-if=\"isSuccess\">\r\n        {{$t('The user is deleted successfully!')}}\r\n    </div>\r\n    <!-- Success Alert will be shown if the user is successfully edited from the database. -->\r\n    <div class=\"alert alert-success\" v-if=\"isEdited\">\r\n        {{$t('The user is edited successfully!')}}\r\n    </div>\r\n    <br>\r\n    <div class=\"table-responsive\">\r\n    <table class=\"table table-stripped\">\r\n        <thead>\r\n            <th>\r\n              <i class=\"fa fa-sort-numeric-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('id')\"/>\r\n              {{$t('User ID')}}\r\n            </th>\r\n            <th>\r\n              <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('name')\"/>\r\n              {{$t('Name')}}\r\n            </th>\r\n            <th>\r\n              <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('email')\"/>\r\n              {{$t('Email')}}\r\n            </th>\r\n            <th>\r\n              <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('role')\"/>\r\n              {{$t('Role')}} \r\n            </th>\r\n            <th>{{$t('Edit')}}</th>\r\n        </thead>\r\n        <tbody>\r\n            <tr v-for = \"user in filteredUsers\" v-bind:key = \"user.id\" class=\"table-bordered\">\r\n                <td>{{user.id}}</td>\r\n                <td>{{user.name}}</td>\r\n                <td>{{user.email}}</td>\r\n                <td>{{user.role}}</td>\r\n                <td>\r\n                  <!-- Modal -->\r\n                        <div class=\"modal fade\" id=\"onDelete\" tabindex=\"-1\" aria-labelledby=\"onDeleteLabel\" aria-hidden=\"true\">\r\n                            <div class=\"modal-dialog\">\r\n                                <div class=\"modal-content\">\r\n                                <div class=\"modal-header\">\r\n                                    <h5 class=\"modal-title\" id=\"onDeleteLabel\">{{$t('CONFIRM')}}</h5>\r\n                                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                                </div>\r\n                                <div class=\"modal-body\">{{$t('Are you sure to delete the user?')}}</div>\r\n                                <div class=\"modal-footer\">\r\n                                    <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">{{$t('No')}}</button>\r\n                                    <button type=\"button\" class=\"btn btn-primary\" data-bs-dismiss=\"modal\" @click=\"deleteUser(this.userId)\">{{$t('Yes')}}</button>\r\n                                </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                  <fa icon=\"trash\" type=\"button\" data-bs-toggle=\"modal\" data-bs-target=\"#onDelete\" @click=\"getUserId(user.id)\"/>&nbsp;\r\n                  <fa icon=\"edit\" type=\"button\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\" data-bs-whatever=\"@mdo\" @click=\"passUser(user)\"/>    \r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n    </div>\r\n    <h5>{{$t('User.Total users')}}: {{total}}</h5>\r\n    <img src=\"/static/Others/pdf.png\" width=\"38\" height=\"35\" type=\"button\" @click=\"downloadPDF\"/>\r\n      &nbsp\r\n    <img src=\"/static/Others/xlsx.png\" width=\"35\" height=\"35\" type=\"button\" @click=\"downloadExcel\"/>\r\n  </div>\r\n\r\n  <!--Page navigation bar-->\r\n    <nav class=\"navbar\">\r\n        <div class=\"container-fluid\">\r\n            <h5>Total Pages: {{this.totalPages}}</h5>\r\n            <a class=\"navbar-brand\"></a>\r\n            <nav aria-label=\"Page navigation example\">\r\n                <ul class=\"pagination\">\r\n                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\" @click=\"pagination(this.pageNum - 1)\">{{$t('Previous')}}</a></li>\r\n                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\" @click=\"pagination(0)\">{{this.pageNum+1}}</a></li>\r\n                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\" @click=\"pagination(pageNum+1)\">{{$t('Next')}}</a></li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    </nav>\r\n</template>\r\n\r\n<script>\r\nimport UserService from '@/services/User/UserService'\r\nimport axios from 'axios';\r\nimport jsPDF from 'jspdf';\r\nimport autoTable from 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx'\r\n\r\nfunction s2ab(s) {\r\n  // Convert a string to an ArrayBuffer\r\n  const buf = new ArrayBuffer(s.length);\r\n  const view = new Uint8Array(buf);\r\n  for (let i = 0; i < s.length; i++) {\r\n    view[i] = s.charCodeAt(i) & 0xFF;\r\n  }\r\n  return buf;\r\n}\r\n\r\nexport default {\r\n    name: 'Users',\r\n    data(){\r\n        return{\r\n          itemsPerPage: 5,//the number of customer shown in one page\r\n          pageNum: 0,//store current page number\r\n          search:'',//store search content\r\n          userId: '',\r\n          editing: false,//true if the user info needs editing, else false\r\n          isSuccess: false,//true if the customer is deleted successfully, else false\r\n          isEdited: false,//true if the customer is edited successfully, else false\r\n          users: [],//store users per page\r\n          fixedUsers: [],//store all users\r\n          pdfIconSize: '2em',\r\n          excelIconSize: '2em',\r\n        }\r\n    },\r\n    methods:{\r\n        //Get all users from the database\r\n        async getUsers(){\r\n            await UserService.getUsers().then((response)=>{\r\n                this.users = response.data;\r\n                this.fixedUsers = response.data;\r\n            });\r\n        },\r\n        //Delete a chosen user from the database\r\n        async deleteUser(userId) {\r\n            const response = await axios.delete(`deleteUser/${userId}`);\r\n            this.isSuccess = true;\r\n            this.isEdited = false;\r\n            this.getUsers()\r\n        },\r\n        //Sort users by a given field, such as id, name\r\n        sort(field){\r\n            UserService.sort(this.pageNum, this.itemsPerPage, field).then((response)=>{\r\n                this.users = response.data;\r\n            });\r\n        },\r\n        //Update the information of a chosen user\r\n        updateUser(){\r\n           axios\r\n                .put(`updateUser`, {\r\n                    id: this.$refs.id.value,\r\n                    name: this.$refs.name.value,\r\n                    email: this.$refs.email.value,\r\n                    role: this.$refs.role.value\r\n                })\r\n                .then((response) => {\r\n                    this.isEdited = true\r\n                    this.isSuccess = false\r\n                    this.getUsers()\r\n                    console.log(response)\r\n                });\r\n          \r\n        },\r\n        //Get users information as required after paging\r\n        pagination(pageNum){\r\n            this.pageNum = pageNum;\r\n            if(this.pageNum==-1) {\r\n                this.pageNum=0;\r\n                return;\r\n            }\r\n            console.log(this.pageNum) ;\r\n            UserService.pagination(pageNum,this.itemsPerPage).then((response)=>{\r\n                this.users = response.data;\r\n            });\r\n        },\r\n        //Pass the chosen user information to the modal dialog box\r\n        passUser(user){\r\n          this.editing = true;\r\n          this.$refs.id.value = user.id;\r\n          this.$refs.name.value = user.name;\r\n          this.$refs.email.value = user.email;\r\n          this.$refs.role.value = user.role\r\n        },\r\n        //Change the number of users shown per page \r\n        changeUserPerPage(num){\r\n            this.itemsPerPage = num;\r\n            this.pagination(this.pageNum,this.itemsPerPage);\r\n        },\r\n        //Download the pdf format of the user table\r\n        downloadPDF(){\r\n            const columns = [\r\n                    { header: 'User ID', dataKey: 'id' },\r\n                    { header: 'Name', dataKey: 'name' },\r\n                    { header: 'Email', dataKey: 'email' },\r\n                    { header: 'Role', dataKey: 'role' }\r\n                ];\r\n            const pdf = new jsPDF();\r\n            //text is placed using x, y coordinates\r\n            pdf.setFontSize(20).text(\"User List\", 80, 10);\r\n            //use autoTable plugin\r\n            autoTable(pdf, {\r\n                columns,\r\n                body: this.users,\r\n                margin:{top: 30}\r\n            });\r\n            //show total stock\r\n            pdf.setFontSize(16).text('Total users: ' + this.total, 80, 20);\r\n            //download pdf\r\n            pdf.save(\"Users.pdf\");\r\n        },\r\n        //Download the excel format of the user table\r\n        downloadExcel() {\r\n            // Create a new array of objects that excludes the 'password' property\r\n            const filteredUsersWithoutPassword = this.filteredUsers.map(user => {\r\n               return {\r\n                 UserID: user.id,\r\n                 Name: user.name,\r\n                 Email: user.email,\r\n                 Role: user.role,\r\n               };\r\n            });\r\n\r\n            // Create a new workbook\r\n            const wb = XLSX.utils.book_new();\r\n\r\n            // Add a new worksheet to the workbook\r\n            const ws = XLSX.utils.json_to_sheet(filteredUsersWithoutPassword);\r\n\r\n            // Add the worksheet to the workbook\r\n            XLSX.utils.book_append_sheet(wb, ws, 'Users');\r\n\r\n            // Write the workbook to a binary string\r\n            const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });\r\n\r\n            // Convert the binary string to a Blob object\r\n            const blob = new Blob([s2ab(wbout)], { type: 'application/octet-stream' });\r\n\r\n            // Create a temporary link to the file and trigger a download\r\n            const url = window.URL.createObjectURL(blob);\r\n            const link = document.createElement('a');\r\n            link.href = url;\r\n            link.download = 'Users.xlsx';\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n            },\r\n            getUserId(id){\r\n              this.userId = id\r\n            },\r\n    },\r\n    created(){\r\n      //Get all users data when the page is being loaded\r\n      this.getUsers()\r\n    },\r\n    computed:{\r\n      //Get required users after searching\r\n      filteredUsers(){\r\n          return this.users.filter(user => user.name.toLowerCase().includes(this.search.toLowerCase()));\r\n      },\r\n      //Get total number of users\r\n      total(){\r\n        return this.users.length;\r\n      },\r\n      totalPages(){\r\n        return (Math.ceil(this.fixedUsers.length / this.itemsPerPage))\r\n      }\r\n    },\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}