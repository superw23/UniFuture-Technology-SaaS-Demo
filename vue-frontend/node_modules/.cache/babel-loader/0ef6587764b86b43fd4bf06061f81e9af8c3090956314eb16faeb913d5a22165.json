{"ast":null,"code":"import CustomerService from '@/services/Customer/CustomerService';\nimport axios from 'axios';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport * as XLSX from 'xlsx';\nfunction s2ab(s) {\n  // Convert a string to an ArrayBuffer\n  const buf = new ArrayBuffer(s.length);\n  const view = new Uint8Array(buf);\n  for (let i = 0; i < s.length; i++) {\n    view[i] = s.charCodeAt(i) & 0xFF;\n  }\n  return buf;\n}\nexport default {\n  name: 'Customers',\n  data() {\n    return {\n      itemsPerPage: 5,\n      //the number of customer shown in one page\n      pageNum: 0,\n      //store current page number\n      customerId: '',\n      search: '',\n      //store search content\n      editing: false,\n      //true if the customer info need editing, else false\n      isSuccess: false,\n      //true if the customer is deleted successfully, else false\n      isEdited: false,\n      //true if the customer info is edited successfully, else false\n      fixedCustomers: [],\n      //store all customers\n      customers: [],\n      //store customers per page\n      pdfIconSize: '2em',\n      excelIconSize: '2em'\n    };\n  },\n  methods: {\n    //Get all customers from the database\n    async getCustomers() {\n      await CustomerService.getCustomers().then(response => {\n        this.customers = response.data;\n        this.fixedCustomers = response.data;\n      });\n    },\n    //Delete a chosen customer from the database\n    deleteCustomer(customerId) {\n      CustomerService.deleteCustomer(customerId).then(response => {\n        this.isSuccess = true;\n        this.isEdited = false;\n        this.getCustomers();\n      });\n    },\n    //Update the information of a chosen customer\n    updateCustomer() {\n      axios.put(`updateCustomer`, {\n        id: this.$refs.id.value,\n        name: this.$refs.name.value,\n        address: this.$refs.address.value,\n        phoneNumber: this.$refs.phoneNumber.value,\n        contact: this.$refs.contact.value,\n        remarks: this.$refs.remarks.value\n      }).then(response => {\n        this.isEdited = true;\n        this.isSuccess = false;\n        console.log(response);\n        this.getCustomers(), this.id = '', this.name = '', this.address = '', this.phoneNumber = '', this.contact = '', this.remarks = '';\n      });\n    },\n    //Pass the chosen customer information to the modal dialog box\n    passCustomer(customer) {\n      this.editing = true;\n      this.$refs.id.value = customer.id;\n      this.$refs.name.value = customer.name;\n      this.$refs.address.value = customer.address;\n      this.$refs.phoneNumber.value = customer.phoneNumber, this.$refs.contact.value = customer.contact, this.$refs.remarks.value = customer.remarks;\n    },\n    //Get customers information as required after paging\n    pagination(pageNum) {\n      this.pageNum = pageNum;\n      if (this.pageNum == -1) {\n        this.pageNum = 0;\n        return;\n      }\n      CustomerService.pagination(pageNum, this.itemsPerPage).then(response => {\n        this.customers = response.data;\n      });\n    },\n    //Change the number of customers shown per page \n    changeCustomerPerPage(num) {\n      this.itemsPerPage = num;\n      this.pagination(this.pageNum, this.itemsPerPage);\n    },\n    getCustomerId(id) {\n      this.customerId = id;\n    },\n    //Sort customers by a given field, such as id, name\n    sort(field) {\n      CustomerService.sortAscending(this.pageNum, this.itemsPerPage, field).then(response => {\n        this.customers = response.data;\n      });\n    },\n    //Download the pdf format of the customer table\n    downloadPDF() {\n      const columns = [{\n        header: 'Customer ID',\n        dataKey: 'id'\n      }, {\n        header: 'Name',\n        dataKey: 'name'\n      }, {\n        header: 'Address',\n        dataKey: 'address'\n      }, {\n        header: 'Phone Number',\n        dataKey: 'phoneNumber'\n      }, {\n        header: 'Contact',\n        dataKey: 'contact'\n      }, {\n        header: 'Remarks',\n        dataKey: 'remarks'\n      }];\n      const pdf = new jsPDF();\n      //Text is placed using x, y coordinates\n      pdf.setFontSize(20).text(\"Customer List\", 80, 10);\n      //Use autoTable plugin\n      autoTable(pdf, {\n        columns,\n        body: this.customers,\n        margin: {\n          top: 30\n        }\n      });\n      //Show total stock\n      pdf.setFontSize(16).text('Total customers: ' + this.total, 80, 20);\n      //Download pdf\n      pdf.save(\"Customers.pdf\");\n    },\n    //Download the excel format of the customer table\n    downloadExcel() {\n      const filteredCustomersWithoutUseless = this.filteredCustomers.map(customers => {\n        return {\n          CustomersID: customers.id,\n          Name: customers.name,\n          Address: customers.address,\n          PhoneNumber: customers.phoneNumber,\n          Email: customers.contact,\n          Description: customers.remarks\n        };\n      });\n\n      // Create a new workbook\n      const wb = XLSX.utils.book_new();\n\n      // Add a new worksheet to the workbook\n      const ws = XLSX.utils.json_to_sheet(filteredCustomersWithoutUseless);\n\n      // Add the worksheet to the workbook\n      XLSX.utils.book_append_sheet(wb, ws, 'Customers');\n\n      // Write the workbook to a binary string\n      const wbout = XLSX.write(wb, {\n        bookType: 'xlsx',\n        type: 'binary'\n      });\n\n      // Convert the binary string to a Blob object\n      const blob = new Blob([s2ab(wbout)], {\n        type: 'application/octet-stream'\n      });\n\n      // Create a temporary link to the file and trigger a download\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'Customers.xlsx';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  },\n  async created() {\n    //Get all customers data when the page is being loaded\n    await this.getCustomers();\n    this.itemsPerPage = this.customers.length;\n  },\n  computed: {\n    //Get required customers after searching\n    filteredCustomers() {\n      return this.customers.filter(customer => customer.name.toLowerCase().includes(this.search.toLowerCase()));\n    },\n    //Get total number of customers\n    total() {\n      return this.customers.length;\n    },\n    totalPages() {\n      return Math.ceil(this.fixedCustomers.length / this.itemsPerPage);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["CustomerService","axios","jsPDF","autoTable","XLSX","s2ab","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","name","data","itemsPerPage","pageNum","customerId","search","editing","isSuccess","isEdited","fixedCustomers","customers","pdfIconSize","excelIconSize","methods","getCustomers","then","response","deleteCustomer","updateCustomer","put","id","$refs","value","address","phoneNumber","contact","remarks","console","log","passCustomer","customer","pagination","changeCustomerPerPage","num","getCustomerId","sort","field","sortAscending","downloadPDF","columns","header","dataKey","pdf","setFontSize","text","body","margin","top","total","save","downloadExcel","filteredCustomersWithoutUseless","filteredCustomers","map","CustomersID","Name","Address","PhoneNumber","Email","Description","wb","utils","book_new","ws","json_to_sheet","book_append_sheet","wbout","write","bookType","type","blob","Blob","url","window","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","created","computed","filter","toLowerCase","includes","totalPages","Math","ceil"],"sourceRoot":"","sources":["C:\\Users\\SuperW\\Desktop\\暑期实习\\vue-frontend\\src\\components\\Sales\\Customer\\Customer.vue"],"sourcesContent":["// Made by GRPTeam202205\n<template>\n  <!-- Customer list page -->\n  <!-- Show the modal dialog box in order to change info of existing customer  -->\n  <div class=\"modal fade\" id=\"exampleModal\" ref=\"customerModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n    <div class=\"modal-dialog\">\n      <div class=\"modal-content\">\n        <!-- Title of the modal dialog box -->\n        <div class=\"modal-header\">\n          <h5 class=\"modal-title\" id=\"exampleModalLabel\">\n            <span v-if=\"editing\">{{$t('Customer.Edit Customer')}}</span>\n            <span v-else>{{$t('Customer.Add New Customer')}}</span>\n          </h5>\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n        </div>\n        <!-- Body of the modal dialog box consists of information of a chosen customer -->\n        <div class=\"modal-body\">\n          <form>\n            <!-- ID of the customer cannot be changed -->\n            <div class=\"mb-3\">\n              <label for=\"id\" class=\"col-form-label\">{{$t('ID')}}:</label>\n              <input type=\"text\" class=\"form-control\" id=\"id\" ref=\"id\" value=\"\" disabled=\"disabled\">\n            </div>\n            <!-- Name of the customer can be changed -->\n            <div class=\"mb-3\">\n              <label for=\"name\" class=\"col-form-label\">{{$t('Name')}}:</label>\n              <input type=\"text\" class=\"form-control\" id=\"name\" ref=\"name\" value=\"\">\n            </div>\n            <!-- Address of the customer can be changed -->\n            <div class=\"mb-3\">\n              <label for=\"address\" class=\"col-form-label\">{{$t('Address')}}:</label>\n              <input type=\"text\" class=\"form-control\" id=\"address\" ref=\"address\" value=\"\">\n            </div>\n            <!-- Phone number of the customer can be changed -->\n            <div class=\"mb-3\">\n              <label for=\"phoneNumber\" class=\"col-form-label\">{{$t('Phone Number')}}:</label>\n              <input type=\"text\" class=\"form-control\" id=\"phoneNumber\" ref=\"phoneNumber\" value=\"\">\n            </div>\n            <!-- Contact person of the customer can be changed -->\n            <div class=\"mb-3\">\n              <label for=\"contact\" class=\"col-form-label\">{{$t('Contact')}}:</label>\n              <input type=\"text\" class=\"form-control\" id=\"contact\" ref=\"contact\" value=\"\">\n            </div>\n            <!-- Additional information of the customer can be changed -->\n            <div class=\"mb-3\">\n              <label for=\"remarks\" class=\"col-form-label\">{{$t('Remarks')}}:</label>\n              <input type=\"text\" class=\"form-control\" id=\"remarks\" ref=\"remarks\" value=\"\">\n            </div>\n          </form>\n        </div>\n        <div class=\"modal-footer\">\n          <!-- Click the button to close the current modal dialog box -->\n          <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">{{$t('Close')}}</button>\n          <!-- Click the button to submit the changed customer information -->\n          <button type=\"button\" class=\"btn btn-primary\" data-bs-dismiss=\"modal\" @click=\"updateCustomer()\">{{$t('Send')}}</button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Search bar by searching the name of the customer -->\n  <nav class=\"navbar\">\n    <div class=\"container-fluid\">\n      <!--Drop-down menu to choose the number of customers per page-->\n      <div class=\"dropdown\">\n        <button class=\"btn dropdown-toggle\" type=\"button\" id=\"dropdownMenu2\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n          {{$t('Records Per Page')}}\n        </button>\n        <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2\">\n          <li><button class=\"dropdown-item\" type=\"button\" @click=\"changeCustomerPerPage(5)\">5</button></li>\n          <li><button class=\"dropdown-item\" type=\"button\" @click=\"changeCustomerPerPage(10)\">10</button></li>\n          <li><button class=\"dropdown-item\" type=\"button\" @click=\"changeCustomerPerPage(15)\">15</button></li>\n        </ul>\n      </div>\n      <span class=\"navbar-brand\"></span>\n      <form class=\"d-flex\" role=\"search\">\n      <input class=\"form-control me-2\" type=\"search\" :placeholder=\"$t('Search')\" aria-label=\"Search\" v-model=\"search\">\n      <button class=\"btn btn-outline-success\" type=\"submit\">{{$t('Search')}}</button>\n      </form>\n    </div>\n  </nav>\n  \n  <div class=\"container\">\n    <h1>{{$t('Customer.Customers List')}}\n    <!-- Click the button to go to add customer page -->\n    <router-link :to=\"{name:'AddCustomer'}\"><i class=\"fa fa-cart-plus\" style=\"font-size:42px\"></i></router-link>\n    </h1>\n    \n    <br>\n    <!-- Show the following message if the customer is deleted successfully-->\n    <div class=\"alert alert-success\" v-if=\"isSuccess\">\n        {{$t('Customer.The customer is deleted successfully!')}}\n    </div>\n    <!-- Show the following message if the customer is edited successfully-->\n    <div class=\"alert alert-success\" v-if=\"isEdited\">\n        {{$t('Customer.The customer is edited successfully!')}}\n    </div>\n    <!-- Customer table to show existing customers in the database -->\n    <div class=\"table-responsive\">\n      <table class=\"table table-stripped\">\n        <thead >\n          <!-- ID of the customer -->\n          <th>\n            <i class=\"fa fa-sort-numeric-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('id')\"/>\n              {{$t('Customer ID')}}\n          </th>\n          <!-- Name of the customer -->\n          <th >\n            <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('name')\"/>\n              {{$t('Name')}}\n          </th>\n          <!-- Address of the customer -->\n          <th>\n            <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('address')\"/>\n              {{$t('Address')}}\n          </th>\n          <!-- Email of the customer -->\n          <th>\n            <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('contact')\"/>\n              {{$t('Email')}}\n          </th>\n          <!-- Phone number of the customer -->\n          <th>\n            <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('phoneNumber')\"/>\n              {{$t('Phone Number')}}\n          </th>\n          <!-- Edit information of the customer -->\n          <th>{{$t('Edit')}}</th>\n        </thead>\n        <tbody>\n          <tr v-for = \"customer in filteredCustomers\" v-bind:key = \"customer.id\" class=\"table-bordered\">\n            <td>{{customer.id}}</td>\n            <td>{{customer.name}}</td>\n            <td>{{customer.address}}</td>\n            <td>{{customer.contact}}</td>\n            <td>{{customer.phoneNumber}}</td>\n            <td>\n              <div class=\"modal fade\" id=\"onDelete\" tabindex=\"-1\" aria-labelledby=\"onDeleteLabel\" aria-hidden=\"true\">\n                            <div class=\"modal-dialog\">\n                                <div class=\"modal-content\">\n                                <div class=\"modal-header\">\n                                    <h5 class=\"modal-title\" id=\"onDelete\">{{$t('CONFIRM')}}</h5>\n                                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                                </div>\n                                <div class=\"modal-body\">{{$t('Are your sure to delete the customer?')}}</div>\n                                <div class=\"modal-footer\">\n                                    <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">{{$t('No')}}</button>\n                                    <button type=\"button\" class=\"btn btn-primary\" data-bs-dismiss=\"modal\" @click=\"deleteCustomer(this.customerId)\">{{$t('Yes')}}</button>\n                                </div>\n                                </div>\n                            </div>\n                        </div>\n              <fa icon=\"trash\" type=\"button\" data-bs-toggle=\"modal\" data-bs-target=\"#onDelete\"  @click=\"getCustomerId(customer.id)\"/>&nbsp;\n              <fa icon=\"edit\" type=\"button\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\" data-bs-whatever=\"@mdo\" @click=\"passCustomer(customer)\"/>    \n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    <!-- Show the total number of customers -->\n    <h5>{{$t('Customer.Total customers')}}: {{total}}</h5>\n    <!-- Download PDF format of the customer table -->\n    <img src=\"/static/Others/pdf.png\" width=\"38\" height=\"35\" type=\"button\" @click=\"downloadPDF\"/>\n    &nbsp\n    <img src=\"/static/Others/xlsx.png\" width=\"35\" height=\"35\" type=\"button\" @click=\"downloadExcel\"/>\n  </div>\n\n  <!--Page navigation bar-->\n    <nav class=\"navbar\">\n        <div class=\"container-fluid\">\n          <h5>Total Pages: {{this.totalPages}}</h5>\n            <a class=\"navbar-brand\"></a>\n            <nav aria-label=\"Page navigation example\">\n                <ul class=\"pagination\">\n                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\" @click=\"pagination(this.pageNum - 1)\">{{$t('Previous')}}</a></li>\n                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\" @click=\"pagination(0)\">{{this.pageNum+1}}</a></li>\n                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\" @click=\"pagination(pageNum+1)\">{{$t('Next')}}</a></li>\n                </ul>\n            </nav>\n        </div>\n    </nav>\n</template>\n\n<script>\nimport CustomerService from '@/services/Customer/CustomerService'\nimport axios from 'axios';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport * as XLSX from 'xlsx'\n\nfunction s2ab(s) {\n  // Convert a string to an ArrayBuffer\n  const buf = new ArrayBuffer(s.length);\n  const view = new Uint8Array(buf);\n  for (let i = 0; i < s.length; i++) {\n    view[i] = s.charCodeAt(i) & 0xFF;\n  }\n  return buf;\n}\n\nexport default {\n    name: 'Customers',\n    data(){\n      return{\n        itemsPerPage: 5,//the number of customer shown in one page\n        pageNum: 0,//store current page number\n        customerId: '',\n        search:'',//store search content\n        editing: false,//true if the customer info need editing, else false\n        isSuccess: false,//true if the customer is deleted successfully, else false\n        isEdited: false,//true if the customer info is edited successfully, else false\n        fixedCustomers: [],//store all customers\n        customers: [],//store customers per page\n        pdfIconSize: '2em',\n        excelIconSize: '2em',\n      }\n    },\n    methods:{\n      //Get all customers from the database\n      async getCustomers(){\n        await CustomerService.getCustomers().then((response)=>{\n          this.customers = response.data;\n          this.fixedCustomers = response.data\n        });\n      },\n      //Delete a chosen customer from the database\n      deleteCustomer(customerId) {\n        CustomerService.deleteCustomer(customerId).then((response)=>{\n          this.isSuccess = true\n          this.isEdited = false\n          this.getCustomers()\n        });\n      },\n      //Update the information of a chosen customer\n      updateCustomer(){\n        axios\n          .put(`updateCustomer`, {\n            id: this.$refs.id.value,\n            name: this.$refs.name.value,\n            address: this.$refs.address.value,\n            phoneNumber: this.$refs.phoneNumber.value,\n            contact: this.$refs.contact.value,\n            remarks: this.$refs.remarks.value\n          })\n          .then((response) => {\n            this.isEdited = true;\n            this.isSuccess = false\n            console.log(response);\n            this.getCustomers(),\n            this.id = '',\n            this.name = '',\n            this.address = '',\n            this.phoneNumber = '',\n            this.contact = '',\n            this.remarks = ''\n\n          });\n      },\n      //Pass the chosen customer information to the modal dialog box\n      passCustomer(customer){\n        this.editing = true;\n        this.$refs.id.value = customer.id;\n        this.$refs.name.value = customer.name;\n        this.$refs.address.value = customer.address;\n        this.$refs.phoneNumber.value = customer.phoneNumber,\n        this.$refs.contact.value = customer.contact,\n        this.$refs.remarks.value = customer.remarks\n      },\n      //Get customers information as required after paging\n      pagination(pageNum){\n        this.pageNum = pageNum;\n        if(this.pageNum==-1) {\n          this.pageNum=0;\n          return;\n        }\n        CustomerService.pagination(pageNum,this.itemsPerPage).then((response)=>{\n          this.customers = response.data;\n        });\n      },\n      //Change the number of customers shown per page \n      changeCustomerPerPage(num){\n        this.itemsPerPage = num;\n        this.pagination(this.pageNum,this.itemsPerPage);\n      },\n      getCustomerId(id){\n        this.customerId = id\n      },\n      //Sort customers by a given field, such as id, name\n      sort(field){\n        CustomerService.sortAscending(this.pageNum, this.itemsPerPage, field).then((response)=>{\n          this.customers = response.data;\n        });\n      },\n      //Download the pdf format of the customer table\n      downloadPDF(){\n            const columns = [\n                    { header: 'Customer ID', dataKey: 'id' },\n                    { header: 'Name', dataKey: 'name' },\n                    { header: 'Address', dataKey: 'address' },\n                    { header: 'Phone Number', dataKey: 'phoneNumber' },\n                    { header: 'Contact', dataKey: 'contact' },\n                    { header: 'Remarks', dataKey: 'remarks' }\n                ];\n            const pdf = new jsPDF();\n            //Text is placed using x, y coordinates\n            pdf.setFontSize(20).text(\"Customer List\", 80, 10);\n            //Use autoTable plugin\n            autoTable(pdf, {\n                columns,\n                body: this.customers,\n                margin:{top: 30}\n            });\n            //Show total stock\n            pdf.setFontSize(16).text('Total customers: ' + this.total, 80, 20);\n            //Download pdf\n            pdf.save(\"Customers.pdf\");\n        },\n      //Download the excel format of the customer table\n      downloadExcel() {\n        const filteredCustomersWithoutUseless = this.filteredCustomers.map(customers => {\n            return {\n                CustomersID: customers.id,\n                Name: customers.name,\n                Address: customers.address,\n                PhoneNumber: customers.phoneNumber,\n                Email: customers.contact,\n                Description: customers.remarks,\n            };\n        });\n\n        // Create a new workbook\n        const wb = XLSX.utils.book_new();\n\n        // Add a new worksheet to the workbook\n        const ws = XLSX.utils.json_to_sheet(filteredCustomersWithoutUseless);\n\n        // Add the worksheet to the workbook\n        XLSX.utils.book_append_sheet(wb, ws, 'Customers');\n\n        // Write the workbook to a binary string\n        const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });\n\n        // Convert the binary string to a Blob object\n        const blob = new Blob([s2ab(wbout)], { type: 'application/octet-stream' });\n\n        // Create a temporary link to the file and trigger a download\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = 'Customers.xlsx';\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      }\n    },\n    async created(){\n      //Get all customers data when the page is being loaded\n      await this.getCustomers()\n      this.itemsPerPage = this.customers.length\n    },\n    computed:{\n      //Get required customers after searching\n      filteredCustomers(){\n        return this.customers.filter(customer => customer.name.toLowerCase().includes(this.search.toLowerCase()));\n      },\n      //Get total number of customers\n      total(){\n        return this.customers.length;\n      },\n      totalPages(){\n        return (Math.ceil(this.fixedCustomers.length / this.itemsPerPage))\n      }\n    },\n}\n</script>\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}