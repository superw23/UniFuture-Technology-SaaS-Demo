{"ast":null,"code":"import SupplierService from '@/services/Supplier/SupplierService';\nimport axios from 'axios';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport * as XLSX from 'xlsx';\nfunction s2ab(s) {\n  // Convert a string to an ArrayBuffer\n  const buf = new ArrayBuffer(s.length);\n  const view = new Uint8Array(buf);\n  for (let i = 0; i < s.length; i++) {\n    view[i] = s.charCodeAt(i) & 0xFF;\n  }\n  return buf;\n}\nexport default {\n  name: 'Suppliers',\n  data() {\n    return {\n      itemsPerPage: 5,\n      //the number of suppliers shown in one page\n      pageNum: 0,\n      //store current page number\n      supplierId: '',\n      search: '',\n      //store search content\n      editing: false,\n      //true if the supplier info need editing, else false\n      isSuccess: false,\n      //true if the supplier is deleted successfully, else false\n      isEdited: false,\n      //true if the supplier info is edited successfully, else false\n      fixedSuppliers: [],\n      //store all suppliers\n      suppliers: [],\n      //store all suppliers\n      pdfIconSize: '2em',\n      excelIconSize: '2em'\n    };\n  },\n  methods: {\n    //Get all suppliers from the database\n    async getSuppliers() {\n      await SupplierService.getSuppliers().then(response => {\n        this.suppliers = response.data;\n        this.fixedSuppliers = response.data;\n      });\n    },\n    //Delete a chosen supplier from the database\n    deleteSupplier(supplierId) {\n      SupplierService.deleteSupplier(supplierId).then(response => {\n        this.isSuccess = true;\n        this.getSuppliers();\n      });\n    },\n    //Update the information of a chosen supplier\n    updateSupplier() {\n      axios.put(`updateSupplier`, {\n        id: this.$refs.id.value,\n        address: this.$refs.address.value,\n        phoneNumber: this.$refs.phoneNumber.value,\n        contact: this.$refs.contact.value,\n        remarks: this.$refs.remarks.value,\n        company: this.$refs.company.value\n      }).then(response => {\n        this.isEdited = true;\n        console.log(response);\n        this.$emit('postcreated');\n      });\n    },\n    //Pass the chosen supplier information to the modal dialog box\n    passSupplier(supplier) {\n      this.editing = true;\n      this.$refs.id.value = supplier.id;\n      this.$refs.address.value = supplier.address;\n      this.$refs.phoneNumber.value = supplier.phoneNumber, this.$refs.contact.value = supplier.contact, this.$refs.remarks.value = supplier.remarks, this.$refs.company.value = supplier.company;\n    },\n    getSupplierId(id) {\n      this.supplierId = id;\n    },\n    //Sort suppliers by a given field, such as id, name\n    sort(field) {\n      SupplierService.sortAscending(this.pageNum, this.itemsPerPage, field).then(response => {\n        this.suppliers = response.data;\n      });\n    },\n    //Get suppliers information as required after paging\n    pagination(pageNum) {\n      this.pageNum = pageNum;\n      if (this.pageNum == -1) {\n        this.pageNum = 0;\n        return;\n      }\n      console.log(this.pageNum);\n      SupplierService.pagination(pageNum, this.itemsPerPage).then(response => {\n        this.suppliers = response.data;\n      });\n    },\n    //Change the number of suppliers shown per page \n    changeSupplierPerPage(num) {\n      this.itemsPerPage = num;\n      this.pagination(this.pageNum, this.itemsPerPage);\n    },\n    //Download the pdf format of the supplier table\n    downloadPDF() {\n      const columns = [{\n        header: 'Supplier ID',\n        dataKey: 'id'\n      }, {\n        header: 'Address',\n        dataKey: 'address'\n      }, {\n        header: 'Company',\n        dataKey: 'company'\n      }, {\n        header: 'Phone Number',\n        dataKey: 'phoneNumber'\n      }, {\n        header: 'Contact',\n        dataKey: 'contact'\n      }, {\n        header: 'Remarks',\n        dataKey: 'remarks'\n      }];\n      const pdf = new jsPDF();\n      //text is placed using x, y coordinates\n      pdf.setFontSize(20).text(\"Supplier List\", 80, 10);\n      //use autoTable plugin\n      autoTable(pdf, {\n        columns,\n        body: this.suppliers,\n        margin: {\n          top: 30\n        }\n      });\n      //show total stock\n      pdf.setFontSize(16).text('Total supliers: ' + this.total, 80, 20);\n      //download pdf\n      pdf.save(\"Suppliers.pdf\");\n    },\n    //Download the excel format of the supplier table\n    downloadExcel() {\n      const filteredSuppliersWithoutUseless = this.filteredSuppliers.map(suppliers => {\n        return {\n          SupplierID: suppliers.id,\n          CompanyName: suppliers.company,\n          Address: suppliers.address,\n          PhoneNumber: suppliers.phoneNumber,\n          Email: suppliers.contact,\n          Description: suppliers.remarks\n        };\n      });\n\n      // Create a new workbook\n      const wb = XLSX.utils.book_new();\n\n      // Add a new worksheet to the workbook\n      const ws = XLSX.utils.json_to_sheet(filteredSuppliersWithoutUseless);\n\n      // Add the worksheet to the workbook\n      XLSX.utils.book_append_sheet(wb, ws, 'Suppliers');\n\n      // Write the workbook to a binary string\n      const wbout = XLSX.write(wb, {\n        bookType: 'xlsx',\n        type: 'binary'\n      });\n\n      // Convert the binary string to a Blob object\n      const blob = new Blob([s2ab(wbout)], {\n        type: 'application/octet-stream'\n      });\n\n      // Create a temporary link to the file and trigger a download\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'Suppliers.xlsx';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  },\n  async created() {\n    //Get all suppliers data when the page is being loaded\n    await this.getSuppliers();\n    this.itemsPerPage = this.suppliers.length;\n    this.fixedSuppliers = this.getSuppliers();\n  },\n  computed: {\n    //Get required suppliers after searching\n    filteredSuppliers() {\n      return this.suppliers.filter(supplier => supplier.company.toLowerCase().includes(this.search.toLowerCase()));\n    },\n    //Get total number of suppliers\n    total() {\n      return this.suppliers.length;\n    },\n    totalPages() {\n      return Math.ceil(this.fixedSuppliers.length / this.itemsPerPage);\n    }\n  }\n};","map":{"version":3,"mappings":"AAsKA,OAAOA,eAAc,MAAO,qCAAoC;AAChE,OAAOC,KAAI,MAAO,OAAO;AACzB,OAAOC,KAAI,MAAO,OAAO;AACzB,OAAOC,SAAQ,MAAO,iBAAiB;AACvC,OAAO,KAAKC,IAAG,MAAO,MAAK;AAE3B,SAASC,IAAI,CAACC,CAAC,EAAE;EACf;EACA,MAAMC,GAAE,GAAI,IAAIC,WAAW,CAACF,CAAC,CAACG,MAAM,CAAC;EACrC,MAAMC,IAAG,GAAI,IAAIC,UAAU,CAACJ,GAAG,CAAC;EAChC,KAAK,IAAIK,IAAI,CAAC,EAAEA,IAAIN,CAAC,CAACG,MAAM,EAAEG,CAAC,EAAE,EAAE;IACjCF,IAAI,CAACE,CAAC,IAAIN,CAAC,CAACO,UAAU,CAACD,CAAC,IAAI,IAAI;EAClC;EACA,OAAOL,GAAG;AACZ;AACA,eAAe;EACXO,IAAI,EAAE,WAAW;EACjBC,IAAI,GAAE;IACF,OAAM;MACJC,YAAY,EAAE,CAAC;MAAC;MAChBC,OAAO,EAAE,CAAC;MAAC;MACXC,UAAU,EAAE,EAAE;MACdC,MAAM,EAAC,EAAE;MAAC;MACVC,OAAO,EAAE,KAAK;MAAC;MACfC,SAAS,EAAE,KAAK;MAAC;MACjBC,QAAQ,EAAE,KAAK;MAAC;MAChBC,cAAc,EAAE,EAAE;MAAC;MACnBC,SAAS,EAAE,EAAE;MAAC;MACdC,WAAW,EAAE,KAAK;MAClBC,aAAa,EAAE;IACjB;EACJ,CAAC;EACDC,OAAO,EAAC;IACJ;IACA,MAAMC,YAAY,GAAE;MAChB,MAAM5B,eAAe,CAAC4B,YAAY,EAAE,CAACC,IAAI,CAAEC,QAAQ,IAAG;QAClD,IAAI,CAACN,SAAQ,GAAIM,QAAQ,CAACf,IAAI;QAC9B,IAAI,CAACQ,cAAa,GAAIO,QAAQ,CAACf,IAAG;MACtC,CAAC,CAAC;IACN,CAAC;IACD;IACAgB,cAAc,CAACb,UAAU,EAAE;MACvBlB,eAAe,CAAC+B,cAAc,CAACb,UAAU,CAAC,CAACW,IAAI,CAAEC,QAAQ,IAAG;QAC1D,IAAI,CAACT,SAAQ,GAAI,IAAI;QACrB,IAAI,CAACO,YAAY,EAAE;MACrB,CAAC,CAAC;IACN,CAAC;IACD;IACAI,cAAc,GAAE;MACb/B,KAAI,CACEgC,GAAG,CAAE,gBAAe,EAAE;QACnBC,EAAE,EAAE,IAAI,CAACC,KAAK,CAACD,EAAE,CAACE,KAAK;QACvBC,OAAO,EAAE,IAAI,CAACF,KAAK,CAACE,OAAO,CAACD,KAAK;QACjCE,WAAW,EAAE,IAAI,CAACH,KAAK,CAACG,WAAW,CAACF,KAAK;QACzCG,OAAO,EAAE,IAAI,CAACJ,KAAK,CAACI,OAAO,CAACH,KAAK;QACjCI,OAAO,EAAE,IAAI,CAACL,KAAK,CAACK,OAAO,CAACJ,KAAK;QACjCK,OAAO,EAAE,IAAI,CAACN,KAAK,CAACM,OAAO,CAACL;MAChC,CAAC,EACAP,IAAI,CAAEC,QAAQ,IAAK;QAChB,IAAI,CAACR,QAAO,GAAI,IAAI;QACpBoB,OAAO,CAACC,GAAG,CAACb,QAAQ,CAAC;QACrB,IAAI,CAACc,KAAK,CAAC,aAAa,CAAC;MAC7B,CAAC,CAAC;IAEV,CAAC;IACD;IACAC,YAAY,CAACC,QAAQ,EAAC;MACpB,IAAI,CAAC1B,OAAM,GAAI,IAAI;MACnB,IAAI,CAACe,KAAK,CAACD,EAAE,CAACE,KAAI,GAAIU,QAAQ,CAACZ,EAAE;MACjC,IAAI,CAACC,KAAK,CAACE,OAAO,CAACD,KAAI,GAAIU,QAAQ,CAACT,OAAO;MAC3C,IAAI,CAACF,KAAK,CAACG,WAAW,CAACF,KAAI,GAAIU,QAAQ,CAACR,WAAW,EACnD,IAAI,CAACH,KAAK,CAACI,OAAO,CAACH,KAAI,GAAIU,QAAQ,CAACP,OAAO,EAC3C,IAAI,CAACJ,KAAK,CAACK,OAAO,CAACJ,KAAI,GAAIU,QAAQ,CAACN,OAAO,EAC3C,IAAI,CAACL,KAAK,CAACM,OAAO,CAACL,KAAI,GAAIU,QAAQ,CAACL,OAAM;IAC5C,CAAC;IACDM,aAAa,CAACb,EAAE,EAAC;MACf,IAAI,CAAChB,UAAS,GAAIgB,EAAC;IACrB,CAAC;IACD;IACAc,IAAI,CAACC,KAAK,EAAC;MACPjD,eAAe,CAACkD,aAAa,CAAC,IAAI,CAACjC,OAAO,EAAE,IAAI,CAACD,YAAY,EAAEiC,KAAK,CAAC,CAACpB,IAAI,CAAEC,QAAQ,IAAG;QACnF,IAAI,CAACN,SAAQ,GAAIM,QAAQ,CAACf,IAAI;MAClC,CAAC,CAAC;IACN,CAAC;IACD;IACAoC,UAAU,CAAClC,OAAO,EAAC;MACf,IAAI,CAACA,OAAM,GAAIA,OAAO;MACtB,IAAG,IAAI,CAACA,OAAO,IAAE,CAAC,CAAC,EAAE;QACjB,IAAI,CAACA,OAAO,GAAC,CAAC;QACd;MACJ;MACAyB,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC1B,OAAO;MACxBjB,eAAe,CAACmD,UAAU,CAAClC,OAAO,EAAC,IAAI,CAACD,YAAY,CAAC,CAACa,IAAI,CAAEC,QAAQ,IAAG;QACnE,IAAI,CAACN,SAAQ,GAAIM,QAAQ,CAACf,IAAI;MAClC,CAAC,CAAC;IACN,CAAC;IACD;IACAqC,qBAAqB,CAACC,GAAG,EAAC;MACtB,IAAI,CAACrC,YAAW,GAAIqC,GAAG;MACvB,IAAI,CAACF,UAAU,CAAC,IAAI,CAAClC,OAAO,EAAC,IAAI,CAACD,YAAY,CAAC;IACnD,CAAC;IACH;IACEsC,WAAW,GAAE;MACT,MAAMC,OAAM,GAAI,CACR;QAAEC,MAAM,EAAE,aAAa;QAAEC,OAAO,EAAE;MAAK,CAAC,EACxC;QAAED,MAAM,EAAE,SAAS;QAAEC,OAAO,EAAE;MAAU,CAAC,EACzC;QAAED,MAAM,EAAE,SAAS;QAAEC,OAAO,EAAE;MAAU,CAAC,EACzC;QAAED,MAAM,EAAE,cAAc;QAAEC,OAAO,EAAE;MAAc,CAAC,EAClD;QAAED,MAAM,EAAE,SAAS;QAAEC,OAAO,EAAE;MAAU,CAAC,EACzC;QAAED,MAAM,EAAE,SAAS;QAAEC,OAAO,EAAE;MAAU,EAC3C;MACL,MAAMC,GAAE,GAAI,IAAIxD,KAAK,EAAE;MACvB;MACAwD,GAAG,CAACC,WAAW,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,eAAe,EAAE,EAAE,EAAE,EAAE,CAAC;MACjD;MACAzD,SAAS,CAACuD,GAAG,EAAE;QACXH,OAAO;QACPM,IAAI,EAAE,IAAI,CAACrC,SAAS;QACpBsC,MAAM,EAAC;UAACC,GAAG,EAAE;QAAE;MACnB,CAAC,CAAC;MACF;MACAL,GAAG,CAACC,WAAW,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,kBAAiB,GAAI,IAAI,CAACI,KAAK,EAAE,EAAE,EAAE,EAAE,CAAC;MACjE;MACAN,GAAG,CAACO,IAAI,CAAC,eAAe,CAAC;IAC7B,CAAC;IACD;IACAC,aAAa,GAAG;MACZ,MAAMC,+BAA8B,GAAI,IAAI,CAACC,iBAAiB,CAACC,GAAG,CAAC7C,SAAQ,IAAK;QAC5E,OAAO;UACH8C,UAAU,EAAE9C,SAAS,CAACU,EAAE;UACxBqC,WAAW,EAAE/C,SAAS,CAACiB,OAAO;UAC9B+B,OAAO,EAAEhD,SAAS,CAACa,OAAO;UAC1BoC,WAAW,EAAEjD,SAAS,CAACc,WAAW;UAClCoC,KAAK,EAAElD,SAAS,CAACe,OAAO;UACxBoC,WAAW,EAAEnD,SAAS,CAACgB;QAC3B,CAAC;MACL,CAAC,CAAC;;MAEF;MACA,MAAMoC,EAAC,GAAIxE,IAAI,CAACyE,KAAK,CAACC,QAAQ,EAAE;;MAEhC;MACA,MAAMC,EAAC,GAAI3E,IAAI,CAACyE,KAAK,CAACG,aAAa,CAACb,+BAA+B,CAAC;;MAEpE;MACA/D,IAAI,CAACyE,KAAK,CAACI,iBAAiB,CAACL,EAAE,EAAEG,EAAE,EAAE,WAAW,CAAC;;MAEjD;MACA,MAAMG,KAAI,GAAI9E,IAAI,CAAC+E,KAAK,CAACP,EAAE,EAAE;QAAEQ,QAAQ,EAAE,MAAM;QAAEC,IAAI,EAAE;MAAS,CAAC,CAAC;;MAElE;MACA,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAAC,CAAClF,IAAI,CAAC6E,KAAK,CAAC,CAAC,EAAE;QAAEG,IAAI,EAAE;MAA2B,CAAC,CAAC;;MAE1E;MACA,MAAMG,GAAE,GAAIC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC;MAC5C,MAAMM,IAAG,GAAIC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACxCF,IAAI,CAACG,IAAG,GAAIP,GAAG;MACfI,IAAI,CAACI,QAAO,GAAI,gBAAgB;MAChCH,QAAQ,CAAChC,IAAI,CAACoC,WAAW,CAACL,IAAI,CAAC;MAC/BA,IAAI,CAACM,KAAK,EAAE;MACZL,QAAQ,CAAChC,IAAI,CAACsC,WAAW,CAACP,IAAI,CAAC;IACnC;EACJ,CAAC;EACD,MAAMQ,OAAO,GAAE;IACb;IACA,MAAM,IAAI,CAACxE,YAAY,EAAC;IACxB,IAAI,CAACZ,YAAW,GAAI,IAAI,CAACQ,SAAS,CAACf,MAAK;IACxC,IAAI,CAACc,cAAa,GAAI,IAAI,CAACK,YAAY,EAAC;EAC1C,CAAC;EACDyE,QAAQ,EAAC;IACP;IACAjC,iBAAiB,GAAE;MACf,OAAO,IAAI,CAAC5C,SAAS,CAAC8E,MAAM,CAACxD,QAAO,IAAKA,QAAQ,CAACL,OAAO,CAAC8D,WAAW,EAAE,CAACC,QAAQ,CAAC,IAAI,CAACrF,MAAM,CAACoF,WAAW,EAAE,CAAC,CAAC;IAChH,CAAC;IACD;IACAvC,KAAK,GAAE;MACL,OAAO,IAAI,CAACxC,SAAS,CAACf,MAAM;IAC9B,CAAC;IACDgG,UAAU,GAAE;MACV,OAAQC,IAAI,CAACC,IAAI,CAAC,IAAI,CAACpF,cAAc,CAACd,MAAK,GAAI,IAAI,CAACO,YAAY,CAAC;IACnE;EACF;AACJ","names":["SupplierService","axios","jsPDF","autoTable","XLSX","s2ab","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","name","data","itemsPerPage","pageNum","supplierId","search","editing","isSuccess","isEdited","fixedSuppliers","suppliers","pdfIconSize","excelIconSize","methods","getSuppliers","then","response","deleteSupplier","updateSupplier","put","id","$refs","value","address","phoneNumber","contact","remarks","company","console","log","$emit","passSupplier","supplier","getSupplierId","sort","field","sortAscending","pagination","changeSupplierPerPage","num","downloadPDF","columns","header","dataKey","pdf","setFontSize","text","body","margin","top","total","save","downloadExcel","filteredSuppliersWithoutUseless","filteredSuppliers","map","SupplierID","CompanyName","Address","PhoneNumber","Email","Description","wb","utils","book_new","ws","json_to_sheet","book_append_sheet","wbout","write","bookType","type","blob","Blob","url","window","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","created","computed","filter","toLowerCase","includes","totalPages","Math","ceil"],"sourceRoot":"","sources":["C:\\Users\\SuperW\\Desktop\\暑期实习\\vue-frontend\\src\\components\\Procurement\\Supplier\\Supplier.vue"],"sourcesContent":["// Made by GRPTeam202205\r\n<template>\r\n  <!-- Supplier list page -->\r\n  <!-- Show the modal dialog box in order to change info of existing supplier  -->\r\n  <div class=\"modal fade\" id=\"exampleModal\" ref=\"supplierModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n    <div class=\"modal-dialog\">\r\n      <div class=\"modal-content\">\r\n        <!-- Title of the modal dialog box -->\r\n        <div class=\"modal-header\">\r\n          <h5 class=\"modal-title\" id=\"exampleModalLabel\">\r\n            <span v-if=\"editing\">{{$t('Supplier.Edit Supplier')}}</span>\r\n            <span v-else>{{$t('Supplier.Add New Supplier')}}</span>\r\n          </h5>\r\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n        </div>\r\n        <!-- Body of the modal dialog box consists of information of a chosen supplier -->\r\n        <div class=\"modal-body\">\r\n          <form>\r\n            <div class=\"mb-3\">\r\n              <label for=\"id\" class=\"col-form-label\">{{$t('ID')}}:</label>\r\n              <input type=\"text\" class=\"form-control\" id=\"id\" ref=\"id\" value=\"\" disabled=\"disabled\">\r\n            </div>\r\n            <div class=\"mb-3\">\r\n              <label for=\"company\" class=\"col-form-label\">{{$t('Company Name')}}:</label>\r\n              <input type=\"text\" class=\"form-control\" id=\"company\" ref=\"company\" value=\"\">\r\n            </div>\r\n            <div class=\"mb-3\">\r\n              <label for=\"address\" class=\"col-form-label\">{{$t('Address')}}:</label>\r\n              <input type=\"text\" class=\"form-control\" id=\"address\" ref=\"address\" value=\"\">\r\n            </div>\r\n            <div class=\"mb-3\">\r\n              <label for=\"phoneNumber\" class=\"col-form-label\">{{$t('Phone Number')}}:</label>\r\n              <input type=\"text\" class=\"form-control\" id=\"phoneNumber\" ref=\"phoneNumber\" value=\"\">\r\n            </div>\r\n            <div class=\"mb-3\">\r\n              <label for=\"contact\" class=\"col-form-label\">{{$t('Contact')}}:</label>\r\n              <input type=\"text\" class=\"form-control\" id=\"contact\" ref=\"contact\" value=\"\">\r\n            </div>\r\n            <div class=\"mb-3\">\r\n              <label for=\"remarks\" class=\"col-form-label\">{{$t('Remarks')}}:</label>\r\n              <input type=\"text\" class=\"form-control\" id=\"remarks\" ref=\"remarks\" value=\"\">\r\n            </div>\r\n          </form>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">{{$t('Close')}}</button>\r\n          <button type=\"button\" class=\"btn btn-primary\" data-bs-dismiss=\"modal\" @click=\"updateSupplier()\">{{$t('Send')}}</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <!-- Search bar by searching the name of the supplier -->\r\n    <nav class=\"navbar\">\r\n        <div class=\"container-fluid\">\r\n          <!--Drop-down menu to choose the number of suppliers per page-->\r\n          <div class=\"dropdown\"> <br><br>\r\n              <button class=\"btn dropdown-toggle\" type=\"button\" id=\"dropdownMenu2\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                  {{$t('Supplier.Suppliers Per Page')}}\r\n              </button>\r\n              <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2\">\r\n                  <li><button class=\"dropdown-item\" type=\"button\" @click=\"changeSupplierPerPage(5)\">5</button></li>\r\n                  <li><button class=\"dropdown-item\" type=\"button\" @click=\"changeSupplierPerPage(10)\">10</button></li>\r\n                  <li><button class=\"dropdown-item\" type=\"button\" @click=\"changeSupplierPerPage(15)\">15</button></li>\r\n              </ul>\r\n          </div>\r\n            <a class=\"navbar-brand\"></a>\r\n            <form class=\"d-flex\" role=\"search\">\r\n            <input class=\"form-control me-2\" type=\"search\" :placeholder=\"$t('Search')\" aria-label=\"Search\" v-model=\"search\">\r\n            <button class=\"btn btn-outline-success\" type=\"submit\">{{$t('Search')}}</button>\r\n            </form>\r\n        </div>\r\n    </nav>\r\n\r\n  <div class=\"container\">\r\n    <!-- Click the button to go to add supplier page -->\r\n    <h1 class=\"test-center\">{{$t('Supplier.Suppliers List')}}\r\n        <router-link :to=\"{name:'AddSupplier'}\"><i class=\"fa fa-cart-plus\" style=\"font-size:42px\"></i></router-link>\r\n    </h1>\r\n    <!-- Show the following message if the supplier is deleted successfully-->\r\n    <div class=\"alert alert-success\" v-if=\"isSuccess\">\r\n        {{$t('Supplier.The supplier is deleted successfully!')}}\r\n    </div>\r\n    <!-- Show the following message if the supplier is edited successfully-->\r\n    <div class=\"alert alert-success\" v-if=\"isEdited\">\r\n        {{$t('Supplier.The supplier is edited successfully!')}}\r\n    </div>\r\n    <br>\r\n    <div class=\"table-responsive\">\r\n    <table class=\"table table-stripped\">\r\n        <thead class=\"table-stripped\">\r\n            <th>\r\n              <i class=\"fa fa-sort-numeric-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('id')\"/>\r\n              {{$t('Supplier ID')}}\r\n            </th>\r\n            <th>\r\n              <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('company')\"/>\r\n              {{$t('Company Name')}}\r\n            </th>\r\n            <th>\r\n              <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('address')\"/>\r\n              {{$t('Address')}}\r\n            </th>\r\n            <th>\r\n              <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('phoneNumber')\"/>\r\n              {{$t('Phone Number')}}\r\n            </th>\r\n            <th>\r\n              <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('contact')\"/>\r\n              {{$t('Email')}}\r\n            </th>\r\n            <th>{{$t('Edit')}}</th>\r\n        </thead>\r\n        <tbody>\r\n            <tr v-for = \"supplier in filteredSuppliers\" v-bind:key = \"supplier.id\" class=\"table-bordered\">\r\n                <td>{{supplier.id}}</td>\r\n                <td>{{supplier.company}}</td>\r\n                <td>{{supplier.address}}</td>\r\n                <td>{{supplier.phoneNumber}}</td>\r\n                <td>{{supplier.contact}}</td>\r\n                <td>\r\n                  <!-- Modal -->\r\n                        <div class=\"modal fade\" id=\"onDelete\" tabindex=\"-1\" aria-labelledby=\"onDeleteLabel\" aria-hidden=\"true\">\r\n                            <div class=\"modal-dialog\">\r\n                                <div class=\"modal-content\">\r\n                                <div class=\"modal-header\">\r\n                                    <h5 class=\"modal-title\" id=\"onDeleteLabel\">{{$t('CONFIRM')}}</h5>\r\n                                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                                </div>\r\n                                <div class=\"modal-body\">{{$t('Are you sure to delete the supplier?')}}</div>\r\n                                <div class=\"modal-footer\">\r\n                                    <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">{{$t('No')}}</button>\r\n                                    <button type=\"button\" class=\"btn btn-primary\" data-bs-dismiss=\"modal\" @click=\"deleteSupplier(this.supplierId)\">{{$t('Yes')}}</button>\r\n                                </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                  <fa icon=\"trash\" type=\"button\" data-bs-toggle=\"modal\" data-bs-target=\"#onDelete\" @click=\"getSupplierId(supplier.id)\"/>&nbsp;\r\n                  <fa icon=\"edit\" type=\"button\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\" data-bs-whatever=\"@mdo\" @click=\"passSupplier(supplier)\"/>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n    </div>\r\n    <h5>{{$t('Supplier.Total suppliers')}}: {{total}}</h5>\r\n    <img src=\"/static/Others/pdf.png\" width=\"38\" height=\"35\" type=\"button\" @click=\"downloadPDF\"/>\r\n    &nbsp\r\n    <img src=\"/static/Others/xlsx.png\" width=\"35\" height=\"35\" type=\"button\" @click=\"downloadExcel\"/>\r\n  </div>\r\n\r\n  <!--Page navigation bar-->\r\n    <nav class=\"navbar\">\r\n        <div class=\"container-fluid\">\r\n          <h5>Total Pages: {{this.totalPages}}</h5>\r\n            <a class=\"navbar-brand\"></a>\r\n            <nav aria-label=\"Page navigation example\">\r\n                <ul class=\"pagination\">\r\n                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\" @click=\"pagination(this.pageNum - 1)\">{{$t('Previous')}}</a></li>\r\n                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\" @click=\"pagination(0)\">{{this.pageNum+1}}</a></li>\r\n                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\" @click=\"pagination(pageNum+1)\">{{$t('Next')}}</a></li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    </nav>\r\n</template>\r\n\r\n<script>\r\nimport SupplierService from '@/services/Supplier/SupplierService'\r\nimport axios from 'axios';\r\nimport jsPDF from 'jspdf';\r\nimport autoTable from 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx'\r\n\r\nfunction s2ab(s) {\r\n  // Convert a string to an ArrayBuffer\r\n  const buf = new ArrayBuffer(s.length);\r\n  const view = new Uint8Array(buf);\r\n  for (let i = 0; i < s.length; i++) {\r\n    view[i] = s.charCodeAt(i) & 0xFF;\r\n  }\r\n  return buf;\r\n}\r\nexport default {\r\n    name: 'Suppliers',\r\n    data(){\r\n        return{\r\n          itemsPerPage: 5,//the number of suppliers shown in one page\r\n          pageNum: 0,//store current page number\r\n          supplierId: '',\r\n          search:'',//store search content\r\n          editing: false,//true if the supplier info need editing, else false\r\n          isSuccess: false,//true if the supplier is deleted successfully, else false\r\n          isEdited: false,//true if the supplier info is edited successfully, else false\r\n          fixedSuppliers: [],//store all suppliers\r\n          suppliers: [],//store all suppliers\r\n          pdfIconSize: '2em',\r\n          excelIconSize: '2em',\r\n        }\r\n    },\r\n    methods:{\r\n        //Get all suppliers from the database\r\n        async getSuppliers(){\r\n            await SupplierService.getSuppliers().then((response)=>{\r\n                this.suppliers = response.data;\r\n                this.fixedSuppliers = response.data\r\n            });\r\n        },\r\n        //Delete a chosen supplier from the database\r\n        deleteSupplier(supplierId) {\r\n            SupplierService.deleteSupplier(supplierId).then((response)=>{\r\n              this.isSuccess = true;\r\n              this.getSuppliers();\r\n            });\r\n        },\r\n        //Update the information of a chosen supplier\r\n        updateSupplier(){\r\n           axios\r\n                .put(`updateSupplier`, {\r\n                    id: this.$refs.id.value,\r\n                    address: this.$refs.address.value,\r\n                    phoneNumber: this.$refs.phoneNumber.value,\r\n                    contact: this.$refs.contact.value,\r\n                    remarks: this.$refs.remarks.value,\r\n                    company: this.$refs.company.value\r\n                })\r\n                .then((response) => {\r\n                    this.isEdited = true;\r\n                    console.log(response);\r\n                    this.$emit('postcreated');\r\n                });\r\n          \r\n        },\r\n        //Pass the chosen supplier information to the modal dialog box\r\n        passSupplier(supplier){\r\n          this.editing = true;\r\n          this.$refs.id.value = supplier.id;\r\n          this.$refs.address.value = supplier.address;\r\n          this.$refs.phoneNumber.value = supplier.phoneNumber,\r\n          this.$refs.contact.value = supplier.contact,\r\n          this.$refs.remarks.value = supplier.remarks,\r\n          this.$refs.company.value = supplier.company\r\n        },\r\n        getSupplierId(id){\r\n          this.supplierId = id\r\n        },\r\n        //Sort suppliers by a given field, such as id, name\r\n        sort(field){\r\n            SupplierService.sortAscending(this.pageNum, this.itemsPerPage, field).then((response)=>{\r\n                this.suppliers = response.data;\r\n            });\r\n        },\r\n        //Get suppliers information as required after paging\r\n        pagination(pageNum){\r\n            this.pageNum = pageNum;\r\n            if(this.pageNum==-1) {\r\n                this.pageNum=0;\r\n                return;\r\n            }\r\n            console.log(this.pageNum) ;\r\n            SupplierService.pagination(pageNum,this.itemsPerPage).then((response)=>{\r\n                this.suppliers = response.data;\r\n            });\r\n        },\r\n        //Change the number of suppliers shown per page \r\n        changeSupplierPerPage(num){\r\n            this.itemsPerPage = num;\r\n            this.pagination(this.pageNum,this.itemsPerPage);\r\n        },\r\n      //Download the pdf format of the supplier table\r\n        downloadPDF(){\r\n            const columns = [\r\n                    { header: 'Supplier ID', dataKey: 'id' },\r\n                    { header: 'Address', dataKey: 'address' },\r\n                    { header: 'Company', dataKey: 'company' },\r\n                    { header: 'Phone Number', dataKey: 'phoneNumber' },\r\n                    { header: 'Contact', dataKey: 'contact' },\r\n                    { header: 'Remarks', dataKey: 'remarks' }\r\n                ];\r\n            const pdf = new jsPDF();\r\n            //text is placed using x, y coordinates\r\n            pdf.setFontSize(20).text(\"Supplier List\", 80, 10);\r\n            //use autoTable plugin\r\n            autoTable(pdf, {\r\n                columns,\r\n                body: this.suppliers,\r\n                margin:{top: 30}\r\n            });\r\n            //show total stock\r\n            pdf.setFontSize(16).text('Total supliers: ' + this.total, 80, 20);\r\n            //download pdf\r\n            pdf.save(\"Suppliers.pdf\");\r\n        },\r\n        //Download the excel format of the supplier table\r\n        downloadExcel() {\r\n            const filteredSuppliersWithoutUseless = this.filteredSuppliers.map(suppliers => {\r\n                return {\r\n                    SupplierID: suppliers.id,\r\n                    CompanyName: suppliers.company,\r\n                    Address: suppliers.address,\r\n                    PhoneNumber: suppliers.phoneNumber,\r\n                    Email: suppliers.contact,\r\n                    Description: suppliers.remarks,\r\n                };\r\n            });\r\n\r\n            // Create a new workbook\r\n            const wb = XLSX.utils.book_new();\r\n\r\n            // Add a new worksheet to the workbook\r\n            const ws = XLSX.utils.json_to_sheet(filteredSuppliersWithoutUseless);\r\n\r\n            // Add the worksheet to the workbook\r\n            XLSX.utils.book_append_sheet(wb, ws, 'Suppliers');\r\n\r\n            // Write the workbook to a binary string\r\n            const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });\r\n\r\n            // Convert the binary string to a Blob object\r\n            const blob = new Blob([s2ab(wbout)], { type: 'application/octet-stream' });\r\n\r\n            // Create a temporary link to the file and trigger a download\r\n            const url = window.URL.createObjectURL(blob);\r\n            const link = document.createElement('a');\r\n            link.href = url;\r\n            link.download = 'Suppliers.xlsx';\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n        }\r\n    },\r\n    async created(){\r\n      //Get all suppliers data when the page is being loaded\r\n      await this.getSuppliers()\r\n      this.itemsPerPage = this.suppliers.length\r\n      this.fixedSuppliers = this.getSuppliers()\r\n    },\r\n    computed:{\r\n      //Get required suppliers after searching\r\n      filteredSuppliers(){\r\n          return this.suppliers.filter(supplier => supplier.company.toLowerCase().includes(this.search.toLowerCase()));\r\n      },\r\n      //Get total number of suppliers\r\n      total(){\r\n        return this.suppliers.length;\r\n      },\r\n      totalPages(){\r\n        return (Math.ceil(this.fixedSuppliers.length / this.itemsPerPage))\r\n      }\r\n    },\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}