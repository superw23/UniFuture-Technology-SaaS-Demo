{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport PurchaseService from '@/services/Purchase/PurchaseService';\nimport SupplierService from '../../services/Supplier/SupplierService';\nexport default {\n  data() {\n    return {\n      name: '',\n      type: '',\n      newType: '',\n      quantity: '',\n      purchasePrice: '',\n      sellPrice: '',\n      supplierName: '',\n      remarks: '',\n      suppliers: [],\n      //store suppliers\n      distinctType: [],\n      addNewType: false,\n      isSuccess: false,\n      supplierNotExist: false,\n      quantityError: false,\n      PurchasePriceError: false,\n      SellPriceError: false\n    };\n  },\n  methods: {\n    onCreatePost() {\n      if (this.quantityError || this.PurchasePriceError || this.SellPriceError) {\n        alert('Please correct the errors before submitting.');\n        return;\n      }\n      if (this.addNewType) {\n        axios.post(`addProduct`, {\n          name: this.name,\n          type: this.newType,\n          quantity: this.quantity,\n          purchasePrice: this.purchasePrice,\n          sellPrice: this.sellPrice,\n          supplierName: this.supplierName,\n          remarks: this.remarks\n        }).then(response => {\n          if (response.data == \"\") {\n            this.supplierNotExist = true;\n            this.isSuccess = false;\n          } else {\n            this.isSuccess = true;\n            this.supplierNotExist = false;\n            this.name = '';\n            this.type = '';\n            this.newType = '';\n            this.quantity = '';\n            this.purchasePrice = '';\n            this.sellPrice = '';\n            this.supplierName = '';\n            this.remarks = '';\n            this.quantityError = false;\n            this.PurchasePriceError = false;\n            this.SellPriceError = false;\n            this.addNewType = false;\n            $('showInput').hide();\n          }\n        });\n      } else {\n        axios.post(`addProduct`, {\n          name: this.name,\n          type: this.type,\n          quantity: this.quantity,\n          purchasePrice: this.purchasePrice,\n          sellPrice: this.sellPrice,\n          supplierName: this.supplierName,\n          remarks: this.remarks\n        }).then(response => {\n          if (response.data == \"\") {\n            this.supplierNotExist = true;\n            this.isSuccess = false;\n          } else {\n            this.isSuccess = true;\n            this.supplierNotExist = false;\n            this.name = '';\n            this.type = '';\n            this.newType = '';\n            this.quantity = '';\n            this.purchasePrice = '';\n            this.sellPrice = '';\n            this.supplierName = '';\n            this.remarks = '';\n            this.quantityError = false;\n            this.PurchasePriceError = false;\n            this.SellPriceError = false;\n          }\n        });\n      }\n    },\n    //go to the add supplier page\n    jumpToAddSupplier() {\n      this.$router.push({\n        path: '/addSupplier'\n      });\n    },\n    //get suppliers \n    getAllSuppliers() {\n      SupplierService.getSuppliers().then(response => {\n        this.suppliers = response.data;\n      });\n    },\n    showNewType() {\n      PurchaseService.getPurchasesWithDistinctTypes().then(response => {\n        this.distinctType = response.data;\n      });\n      if (this.type == 'Add a new type') {\n        this.addNewType = true;\n        $('showInput').show();\n      } else {\n        this.addNewType = false;\n        $('showInput').hide();\n      }\n    },\n    validateQuantity() {\n      const quantityRegex = /^[1-9]\\d*$/;\n      if (!quantityRegex.test(this.quantity)) {\n        this.quantityError = true;\n      } else {\n        this.quantityError = false;\n      }\n    },\n    validatePurchasePrice() {\n      const PurchasePriceRegex = /^[0-9]\\d*$/;\n      if (!PurchasePriceRegex.test(this.purchasePrice)) {\n        this.PurchasePriceError = true;\n      } else {\n        this.PurchasePriceError = false;\n      }\n    },\n    validateSellPrice() {\n      const SellPriceRegex = /^[0-9]\\d*$/;\n      if (!SellPriceRegex.test(this.sellPrice)) {\n        this.SellPriceError = true;\n      } else {\n        this.SellPriceError = false;\n      }\n    }\n  },\n  computed: {\n    //Get required suppliers \n    filteredSuppliers() {\n      return this.suppliers.filter(supplier => supplier.company.toLowerCase().includes(this.supplierName.toLowerCase()));\n    }\n  },\n  created() {\n    this.getAllSuppliers();\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","PurchaseService","SupplierService","data","name","type","newType","quantity","purchasePrice","sellPrice","supplierName","remarks","suppliers","distinctType","addNewType","isSuccess","supplierNotExist","quantityError","PurchasePriceError","SellPriceError","methods","onCreatePost","alert","post","then","response","$","hide","jumpToAddSupplier","$router","push","path","getAllSuppliers","getSuppliers","showNewType","getPurchasesWithDistinctTypes","show","validateQuantity","quantityRegex","test","validatePurchasePrice","PurchasePriceRegex","validateSellPrice","SellPriceRegex","computed","filteredSuppliers","filter","supplier","company","toLowerCase","includes","created"],"sourceRoot":"","sources":["C:\\Users\\Ella\\Desktop\\vue-frontend\\src\\components\\Inventory\\AddProduct.vue"],"sourcesContent":["// Made by GRPTeam202205\r\n<template>\r\n    <!-- Add a new product page -->\r\n    <div>\r\n        <h2>{{$t('Product.Create New Product')}}</h2>\r\n        <hr />\r\n\r\n        <div class=\"row col-md-4 offset-md-4\">\r\n            <div class=\"alert alert-success\" v-if=\"isSuccess\">\r\n                {{$t('Product.The product is added successfully!')}}\r\n            </div>\r\n            <div class=\"alert alert-danger\" v-if=\"supplierNotExist\">\r\n                {{$t('The supplier does not exist!')}}\r\n            </div>\r\n            <div class=\"icon1\"></div> <div class=\"empty-row\"></div> <div class=\"icon2\"></div>\r\n            <div class=\"panel panel-primary\">\r\n                <div class=\"panel-body\">\r\n                    <form @submit.prevent=\"onCreatePost\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"name\">{{$t('Name')}}</label>\r\n                            <input type=\"text\" class=\"form-control\" :placeholder=\"$t('e.g. Wine')\" id= \"name\" v-model=\"name\" required>\r\n                        </div>\r\n                        <!-- Input type of the purchase -->\r\n                        <div class=\"form-group\">\r\n                            <label for=\"type\" class=\"form-label\" v-if=\"!addNewType\">{{$t('Type')}}</label>\r\n                            <select class=\"form-select\" aria-label=\"Default select example\" v-model=\"type\" @click=\"showNewType\" required>\r\n                                <option selected disabled value=\"\">{{$t('Please choose a type')}}</option>\r\n                                <option v-for=\"type in distinctType\" :key=\"type\">{{type}}</option>\r\n                                <option>{{$t('Add a new type')}}</option>\r\n                            </select>\r\n                        </div>\r\n                        <!-- Input new type of the purchase -->\r\n                        <div class=\"form-group\" v-if=\"addNewType\" id=\"showInput\" required>\r\n                            <label for=\"newType\">{{$t('New Type')}}</label>\r\n                            <input type=\"text\" class=\"form-control\" id= \"newType\" v-model=\"newType\" required>\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"quantity\">{{$t('Quantity')}}</label>\r\n                            <input type=\"text\" class=\"form-control\" :placeholder=\"$t('e.g. 20')\" id= \"quantity\" v-model=\"quantity\" @input=\"validateQuantity\" required>\r\n                            <div v-if=\"quantityError\" class=\"text-danger\">{{$t('Please input a valid quantity')}}</div>\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"purchasePrice\">{{$t('Purchase.Purchase Price')}}</label>\r\n                            <input type=\"text\" class=\"form-control\" :placeholder=\"$t('e.g. 20')\" id= \"purchasePrice\" v-model=\"purchasePrice\" @input=\"validatePurchasePrice\" required>\r\n                            <div v-if=\"PurchasePriceError\" class=\"text-danger\">{{$t('Please input a valid purchase price')}}</div>\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"sellPrice\">{{$t('Sale Price')}}</label>\r\n                            <input type=\"text\" class=\"form-control\" :placeholder=\"$t('e.g. 20')\" id= \"sellPrice\" v-model=\"sellPrice\" @input=\"validateSellPrice\" required>\r\n                            <div v-if=\"SellPriceError\" class=\"text-danger\">{{$t('Please input a valid sale price')}}</div>\r\n                        </div>\r\n                        <!-- Input supplier name of the purchase -->\r\n                        <label for=\"supplierName\">{{$t('Supplier Name')}}</label>\r\n                            <div class=\"input-group mb-3\">\r\n                            <input type=\"text\" list=\"datalist\" class=\"form-control\" :placeholder=\"$t('e.g. Tom')\" id= \"supplierName\" v-model=\"supplierName\" required>\r\n                            <datalist id=\"datalist\">\r\n                                <option v-for = \"supplier in filteredSuppliers\" :key = \"supplier.id\">{{supplier.company}}</option>   \r\n                            </datalist>\r\n                            <div class=\"input-group-append\">\r\n                                <button class=\"input-group-text\" type=\"button\">\r\n                                    <i class=\"fa fa-plus\" style=\"font-size:24px\" @click=\"jumpToAddSupplier\"></i>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"remarks\">{{$t('Description')}}</label>\r\n                            <input type=\"text\" class=\"form-control\" :placeholder=\"$t('e.g. Fragile; handle with care!')\" id= \"remarks\" v-model=\"remarks\" required>\r\n                        </div>\r\n                        <div class=\"row align-items-center\">\r\n                            <div class=\"empty-row2\"></div>\r\n                            <div class=\"col-6\">\r\n                                <!-- Click the button to submit the user form to the backend -->\r\n                                <button type=\"submit\" class=\"btn btn-primary\">\r\n                                    {{$t('Product.Add Product')}}\r\n                                </button>\r\n                            </div>\r\n                            <div class=\"col-6\">\r\n                                <router-link :to=\"{name:'Product'}\"><button type=\"button\" class=\"btn btn-outline-primary\">{{$t('Product.View Products')}}</button></router-link>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nimport PurchaseService from '@/services/Purchase/PurchaseService'\r\nimport SupplierService from '../../services/Supplier/SupplierService'\r\nexport default {\r\n    data() {\r\n        return {\r\n            name: '',\r\n            type: '',\r\n            newType: '',\r\n            quantity: '',\r\n            purchasePrice: '',\r\n            sellPrice: '',\r\n            supplierName: '',\r\n            remarks: '',\r\n            suppliers: [],//store suppliers\r\n            distinctType: [],\r\n            addNewType: false,\r\n            isSuccess: false,\r\n            supplierNotExist: false,\r\n            quantityError: false,\r\n            PurchasePriceError: false,\r\n            SellPriceError: false,\r\n        };\r\n    },\r\n    methods: {\r\n        onCreatePost() {\r\n            if (this.quantityError || this.PurchasePriceError || this.SellPriceError) {\r\n                alert('Please correct the errors before submitting.');\r\n                return;\r\n            }\r\n            if(this.addNewType){\r\n                axios\r\n                .post(`addProduct`, {\r\n                    name: this.name,\r\n                    type: this.newType,\r\n                    quantity: this.quantity,\r\n                    purchasePrice: this.purchasePrice,\r\n                    sellPrice: this.sellPrice,\r\n                    supplierName: this.supplierName,\r\n                    remarks: this.remarks\r\n                })\r\n                .then((response) => {\r\n                    if(response.data==\"\"){\r\n                        this.supplierNotExist = true\r\n                        this.isSuccess = false\r\n                    }\r\n                    else{\r\n                        this.isSuccess = true\r\n                        this.supplierNotExist = false\r\n                        this.name = ''\r\n                        this.type = ''\r\n                        this.newType = ''\r\n                        this.quantity = ''\r\n                        this.purchasePrice = ''\r\n                        this.sellPrice = ''\r\n                        this.supplierName = ''\r\n                        this.remarks = ''\r\n                        this.quantityError= false\r\n                        this.PurchasePriceError= false\r\n                        this.SellPriceError= false\r\n                        this.addNewType = false\r\n                        $('showInput').hide()\r\n                    }\r\n                });\r\n            }\r\n            else{\r\n                axios\r\n                .post(`addProduct`, {\r\n                    name: this.name,\r\n                    type: this.type,\r\n                    quantity: this.quantity,\r\n                    purchasePrice: this.purchasePrice,\r\n                    sellPrice: this.sellPrice,\r\n                    supplierName: this.supplierName,\r\n                    remarks: this.remarks\r\n                })\r\n                .then((response) => {\r\n                    if(response.data==\"\"){\r\n                        this.supplierNotExist = true\r\n                        this.isSuccess = false\r\n                    }\r\n                    else{\r\n                        this.isSuccess = true\r\n                        this.supplierNotExist = false\r\n                        this.name = ''\r\n                        this.type = ''\r\n                        this.newType = ''\r\n                        this.quantity = ''\r\n                        this.purchasePrice = ''\r\n                        this.sellPrice = ''\r\n                        this.supplierName = ''\r\n                        this.remarks = ''\r\n                        this.quantityError= false\r\n                        this.PurchasePriceError= false\r\n                        this.SellPriceError= false\r\n                    }\r\n                });\r\n            }\r\n        },\r\n        //go to the add supplier page\r\n        jumpToAddSupplier(){\r\n            this.$router.push({path:'/addSupplier'})\r\n        },\r\n        //get suppliers \r\n        getAllSuppliers(){\r\n            SupplierService.getSuppliers().then((response)=>{\r\n                this.suppliers = response.data\r\n            })\r\n        }, \r\n        showNewType(){\r\n            PurchaseService.getPurchasesWithDistinctTypes().then((response)=>{\r\n                this.distinctType = response.data\r\n            })\r\n            if(this.type == 'Add a new type'){\r\n                this.addNewType = true\r\n                $('showInput').show()\r\n            }else{\r\n                this.addNewType = false\r\n                $('showInput').hide()\r\n            }\r\n        },\r\n        validateQuantity() {\r\n              const quantityRegex = /^[1-9]\\d*$/;\r\n              if (!quantityRegex.test(this.quantity)) {\r\n                this.quantityError = true;\r\n              } else {\r\n                this.quantityError = false;\r\n              }\r\n        },\r\n        validatePurchasePrice() {\r\n              const PurchasePriceRegex = /^[0-9]\\d*$/;\r\n              if (!PurchasePriceRegex.test(this.purchasePrice)) {\r\n                this.PurchasePriceError = true;\r\n              } else {\r\n                this.PurchasePriceError = false;\r\n              }\r\n        },\r\n\r\n        validateSellPrice() {\r\n              const SellPriceRegex = /^[0-9]\\d*$/;\r\n              if (!SellPriceRegex.test(this.sellPrice)) {\r\n                this.SellPriceError = true;\r\n              } else {\r\n                this.SellPriceError = false;\r\n              }\r\n        },\r\n    },\r\n    computed:{\r\n        //Get required suppliers \r\n        filteredSuppliers(){\r\n            return this.suppliers.filter(supplier => supplier.company.toLowerCase().includes(this.supplierName.toLowerCase()));\r\n        }\r\n    },\r\n    created(){\r\n        this.getAllSuppliers()\r\n    }\r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}