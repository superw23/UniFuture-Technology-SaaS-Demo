{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      name: '',\n      //store the name of the customer\n      address: '',\n      //store the adress of the customer\n      remarks: '',\n      //store the additional information of the customer\n      contact: '',\n      //store the contact person of the customer\n      phoneNumber: '',\n      //store the phone number of the customer\n      isSuccess: false,\n      //true if the customer is added successfully, else false\n      customerExist: false,\n      //true if the customer with the same name has already exists, else false\n      showError: false,\n      showErrorTwo: false,\n      showErrorThree: false\n    };\n  },\n  methods: {\n    // add a new customer\n    // pass the customer information to the backend\n    onCreatePost() {\n      if (this.showError || this.showErrorTwo || this.showErrorThree) {\n        alert('Please correct the errors before submitting.');\n        return;\n      }\n      axios.post(`addCustomer`, {\n        name: this.name,\n        address: this.address,\n        phoneNumber: this.phoneNumber,\n        contact: this.contact,\n        remarks: this.remarks\n      }).then(response => {\n        if (response.data == '') {\n          this.customerExist = true;\n          this.isSuccess = false;\n        } else {\n          this.isSuccess = true, this.customerExist = false, this.name = '', this.address = '', this.phoneNumber = '', this.contact = '', this.remarks = '';\n        }\n      });\n    },\n    validateName() {\n      // Regular expression for letters only validation\n      const lettersRegex = /^[A-Za-z\\s]+$/;\n\n      // Check if the input is a valid name\n      if (!lettersRegex.test(this.name)) {\n        // Show the error message\n        this.showError = true;\n      } else {\n        // Hide the error message\n        this.showError = false;\n      }\n    },\n    //Check if the email is valid\n    validateEmail() {\n      // Regular expression for email validation\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n      // Check if the input is a valid email address\n      if (!emailRegex.test(this.contact)) {\n        // Show the error message\n        this.showErrorTwo = true;\n      } else {\n        // Hide the error message\n        this.showErrorTwo = false;\n      }\n    },\n    //Check if the phone number is valid, i.e., it only contains numbers\n    validatePhoneNumber() {\n      const numberRegex = /^[0-9]*$/;\n\n      // Check if the input is a valid phone number\n      if (!numberRegex.test(this.phoneNumber)) {\n        // Show the error message\n        this.showErrorThree = true;\n      } else {\n        // Hide the error message\n        this.showErrorThree = false;\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"AAsEA,OAAOA,KAAI,MAAO,OAAO;AACzB,eAAe;EACXC,IAAI,GAAG;IACH,OAAO;MACHC,IAAI,EAAE,EAAE;MAAC;MACTC,OAAO,EAAE,EAAE;MAAC;MACZC,OAAO,EAAE,EAAE;MAAC;MACZC,OAAO,EAAE,EAAE;MAAC;MACZC,WAAW,EAAE,EAAE;MAAC;MAChBC,SAAS,EAAE,KAAK;MAAC;MACjBC,aAAa,EAAE,KAAK;MAAC;MACrBC,SAAS,EAAE,KAAK;MAChBC,YAAY,EAAE,KAAK;MACnBC,cAAc,EAAE;IACpB,CAAC;EACL,CAAC;EACDC,OAAO,EAAE;IACL;IACA;IACAC,YAAY,GAAG;MACX,IAAI,IAAI,CAACJ,SAAQ,IAAK,IAAI,CAACC,YAAW,IAAK,IAAI,CAACC,cAAc,EAAE;QAC5DG,KAAK,CAAC,8CAA8C,CAAC;QACrD;MACJ;MAEAd,KAAI,CACCe,IAAI,CAAE,aAAY,EAAE;QACjBb,IAAI,EAAE,IAAI,CAACA,IAAI;QACfC,OAAO,EAAE,IAAI,CAACA,OAAO;QACrBG,WAAW,EAAE,IAAI,CAACA,WAAW;QAC7BD,OAAO,EAAE,IAAI,CAACA,OAAO;QACrBD,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC,EACAY,IAAI,CAAEC,QAAQ,IAAK;QAChB,IAAGA,QAAQ,CAAChB,IAAI,IAAE,EAAE,EAAC;UACjB,IAAI,CAACO,aAAY,GAAI,IAAG;UACxB,IAAI,CAACD,SAAQ,GAAI,KAAI;QACzB,OACI;UACA,IAAI,CAACA,SAAQ,GAAI,IAAI,EACrB,IAAI,CAACC,aAAY,GAAI,KAAK,EAC1B,IAAI,CAACN,IAAG,GAAI,EAAE,EACd,IAAI,CAACC,OAAM,GAAI,EAAE,EACjB,IAAI,CAACG,WAAU,GAAI,EAAE,EACrB,IAAI,CAACD,OAAM,GAAI,EAAE,EACjB,IAAI,CAACD,OAAM,GAAI,EAAC;QACpB;MACJ,CAAC,CAAC;IACV,CAAC;IACDc,YAAY,GAAG;MACX;MACA,MAAMC,YAAW,GAAI,eAAe;;MAEpC;MACA,IAAI,CAACA,YAAY,CAACC,IAAI,CAAC,IAAI,CAAClB,IAAI,CAAC,EAAE;QAChC;QACA,IAAI,CAACO,SAAQ,GAAI,IAAI;MACxB,OAAO;QACJ;QACA,IAAI,CAACA,SAAQ,GAAI,KAAK;MACzB;IACJ,CAAC;IACD;IACAY,aAAa,GAAG;MACZ;MACA,MAAMC,UAAS,GAAI,4BAA4B;;MAE/C;MACA,IAAI,CAACA,UAAU,CAACF,IAAI,CAAC,IAAI,CAACf,OAAO,CAAC,EAAE;QAChC;QACA,IAAI,CAACK,YAAW,GAAI,IAAI;MAC5B,OAAO;QACH;QACA,IAAI,CAACA,YAAW,GAAI,KAAK;MAC7B;IACJ,CAAC;IACD;IACAa,mBAAmB,GAAG;MAClB,MAAMC,WAAU,GAAI,UAAU;;MAE9B;MACA,IAAI,CAACA,WAAW,CAACJ,IAAI,CAAC,IAAI,CAACd,WAAW,CAAC,EAAE;QACtC;QACA,IAAI,CAACK,cAAa,GAAI,IAAI;MAC7B,OAAO;QACJ;QACA,IAAI,CAACA,cAAa,GAAI,KAAK;MAC9B;IACJ;EACJ;AACJ,CAAC","names":["axios","data","name","address","remarks","contact","phoneNumber","isSuccess","customerExist","showError","showErrorTwo","showErrorThree","methods","onCreatePost","alert","post","then","response","validateName","lettersRegex","test","validateEmail","emailRegex","validatePhoneNumber","numberRegex"],"sourceRoot":"","sources":["C:\\Users\\SuperW\\Desktop\\暑期实习\\vue-frontend\\src\\components\\Sales\\Customer\\AddCustomer.vue"],"sourcesContent":["// Made by GRPTeam202205\r\n<template>\r\n    <!-- Add customer page -->\r\n    <div>\r\n        <!-- Title of the page -->\r\n        <h2>{{$t('Customer.Add Customer')}}</h2>\r\n        <hr />\r\n\r\n        <div class=\"row col-md-4 offset-md-4\">\r\n            <!-- Show the following message if the customer is to the database successfully-->\r\n            <div class=\"alert alert-success\" v-if=\"isSuccess\">\r\n                {{$t('Customer.The customer is added successfully!')}}\r\n            </div>\r\n            <!-- Show the following message if the customer already exists-->\r\n            <div class=\"alert alert-danger\" v-if=\"customerExist\">\r\n                {{$t('Customer.The customer already exists!')}}\r\n            </div>\r\n            <!-- Customer form to collect info of the customer to be added -->\r\n            <div class=\"panel panel-primary\">\r\n                <div class=\"panel-body\">\r\n                    <form @submit.prevent=\"onCreatePost\">\r\n                        <!-- Input name of the customer -->\r\n                        <div class=\"form-group\">\r\n                            <label for=\"name\">{{$t('Name')}}</label>\r\n                            <input type=\"text\" class=\"form-control\" :placeholder=\"$t('e.g. Ella')\"  id= \"name\" v-model=\"name\" @input=\"validateName\" required>\r\n                            <div v-if=\"showError\" class=\"text-danger\">{{ $t('Please input a valid name') }}</div>\r\n                        </div>\r\n                        <!-- Input address of the customer -->\r\n                        <div class=\"form-group\">\r\n                            <label for=\"address\">{{$t('Address')}}</label>\r\n                            <input type=\"text\" class=\"form-control\" :placeholder=\"$t('e.g. Tai Kang Road 199')\" id= \"address\" v-model=\"address\" required>\r\n                        </div>\r\n                        <!-- Input contact person of the customer -->\r\n                        <div class=\"form-group\">\r\n                            <label for=\"contact\">{{$t('Email')}}</label>\r\n                            <input type=\"text\" class=\"form-control\" :placeholder=\"$t('e.g. 123456@gmail.com')\" id= \"contact\" v-model=\"contact\" @input=\"validateEmail\" required>\r\n                            <div v-if=\"showErrorTwo\" class=\"text-danger\">{{ $t('Please input a valid email address') }}</div>\r\n                        </div>\r\n                        <!-- Input phone number of the customer -->\r\n                        <div class=\"form-group\">\r\n                            <label for=\"phoneNumber\">{{$t('Phone Number')}}</label>\r\n                            <input type=\"text\" class=\"form-control\" :placeholder=\"$t('e.g. 12345678900')\" id= \"phoneNumber\" v-model=\"phoneNumber\" @input=\"validatePhoneNumber\" required>\r\n                            <div v-if=\"showErrorThree\" class=\"text-danger\">{{ $t('Please input a valid phone number') }}</div>\r\n                        </div>\r\n                        <!-- Input additional information of the customer -->\r\n                        <div class=\"form-group\">\r\n                            <label for=\"remarks\">{{$t('Description')}}</label>\r\n                            <input type=\"text\" class=\"form-control\" :placeholder=\"$t('e.g. Add remarks')\" id= \"remarks\" v-model=\"remarks\" required>\r\n                        </div>\r\n                        <div class=\"row align-items-center\">\r\n                            <div class=\"empty-row2\"></div>\r\n                            <div class=\"col-6\">\r\n                                <!-- Click the button to submit the customer form to the backend -->\r\n                                <button type=\"submit\" class=\"btn btn-primary\">\r\n                                    {{$t('Customer.Add Customer')}}\r\n                                </button>\r\n                            </div>\r\n                            <!-- Click the button to go to customer table page -->\r\n                            <div class=\"col-6\">\r\n                                <router-link :to=\"{name:'Customer'}\"><button type=\"button\" class=\"btn btn-outline-primary\">{{$t('Customer.View Customers')}}</button></router-link>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nexport default {\r\n    data() {\r\n        return {\r\n            name: '',//store the name of the customer\r\n            address: '',//store the adress of the customer\r\n            remarks: '',//store the additional information of the customer\r\n            contact: '',//store the contact person of the customer\r\n            phoneNumber: '',//store the phone number of the customer\r\n            isSuccess: false,//true if the customer is added successfully, else false\r\n            customerExist: false,//true if the customer with the same name has already exists, else false\r\n            showError: false,\r\n            showErrorTwo: false,\r\n            showErrorThree: false,\r\n        };\r\n    },\r\n    methods: {\r\n        // add a new customer\r\n        // pass the customer information to the backend\r\n        onCreatePost() {\r\n            if (this.showError || this.showErrorTwo || this.showErrorThree) {\r\n                alert('Please correct the errors before submitting.');\r\n                return;\r\n            }\r\n\r\n            axios\r\n                .post(`addCustomer`, {\r\n                    name: this.name,\r\n                    address: this.address,\r\n                    phoneNumber: this.phoneNumber,\r\n                    contact: this.contact,\r\n                    remarks: this.remarks\r\n                })\r\n                .then((response) => {\r\n                    if(response.data==''){\r\n                        this.customerExist = true\r\n                        this.isSuccess = false\r\n                    }\r\n                    else{\r\n                        this.isSuccess = true,\r\n                        this.customerExist = false,\r\n                        this.name = '',\r\n                        this.address = '',\r\n                        this.phoneNumber = '',\r\n                        this.contact = '',\r\n                        this.remarks = ''\r\n                    }\r\n                });\r\n        },\r\n        validateName() {\r\n            // Regular expression for letters only validation\r\n            const lettersRegex = /^[A-Za-z\\s]+$/;\r\n\r\n            // Check if the input is a valid name\r\n            if (!lettersRegex.test(this.name)) {\r\n               // Show the error message\r\n               this.showError = true;\r\n            } else {\r\n               // Hide the error message\r\n               this.showError = false;\r\n            }\r\n        },\r\n        //Check if the email is valid\r\n        validateEmail() {\r\n            // Regular expression for email validation\r\n            const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\r\n            // Check if the input is a valid email address\r\n            if (!emailRegex.test(this.contact)) {\r\n                // Show the error message\r\n                this.showErrorTwo = true;\r\n            } else {\r\n                // Hide the error message\r\n                this.showErrorTwo = false;\r\n            }\r\n        },\r\n        //Check if the phone number is valid, i.e., it only contains numbers\r\n        validatePhoneNumber() {\r\n            const numberRegex = /^[0-9]*$/;\r\n\r\n            // Check if the input is a valid phone number\r\n            if (!numberRegex.test(this.phoneNumber)) {\r\n               // Show the error message\r\n               this.showErrorThree = true;\r\n            } else {\r\n               // Hide the error message\r\n               this.showErrorThree = false;\r\n            }\r\n        },\r\n    },\r\n};\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}