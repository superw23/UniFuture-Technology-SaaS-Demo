{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport SupplierService from '@/services/Supplier/SupplierService';\nimport PurchaseService from '@/services/Purchase/PurchaseService';\nimport BilibiliService from '@/services/Bilibili/BilibiliService';\nexport default {\n  data() {\n    return {\n      name: '',\n      //store the name of the purchase\n      type: '',\n      //store the type of the purchase\n      quantity: '',\n      //store the quantity of the purchase\n      price: '',\n      //store the price of the purchase\n      supplierName: '',\n      //store the supplier name of the purchase\n      tempSupplierName: '',\n      //store the name of the supplier temporarily\n      tempProductName: '',\n      //store the name of the product temporarily\n      remarks: '',\n      //store the remarks of the purchase\n      date: '',\n      //store the date of the purchase\n      purchases: '',\n      supplierSearch: '',\n      productSearch: '',\n      products: [],\n      productName: '',\n      //name of the product\n      isSuccess: false,\n      //true if the purchase is added successfully, else false\n      supplierNotFound: false,\n      //true if the supplier is not found, else false\n      productNotFound: false,\n      //true if the product is not found, else false\n      supplierExistence: true,\n      //true if the supplier is not found, else false\n      availability: true,\n      //true if the number of products is available, else false\n      noAvailability: '',\n      //true if the number of products is not available, else false\n      suppliers: [],\n      //store suppliers\n      addNewType: false,\n      //true if a new type will be added, else false,\n      distinctType: [],\n      newType: '',\n      //store new type of the purchase\n      quantityError: false,\n      priceError: false\n    };\n  },\n  methods: {\n    // add a new purchase\n    //check the validity of all inputs\n    async onCreatePost() {\n      if (this.quantityError || this.priceError) {\n        alert('Please correct the errors before submitting.');\n        return;\n      }\n      await this.checkSupplierExistence();\n      this.addPurchase();\n    },\n    // pass the purchase information to the backend\n    addPurchase() {\n      if (this.supplierExistence) {\n        if (this.addNewType) {\n          axios.post(`addPurchase`, {\n            name: this.name,\n            type: this.newType,\n            num: this.quantity,\n            price: this.price,\n            total: this.price * this.quantity,\n            supplierName: this.supplierName,\n            remarks: this.remarks,\n            date: this.date\n          }).then(response => {\n            this.isSuccess = true;\n            this.supplierNotFound = false;\n            this.productNotFound = false;\n            this.isSuccess = true;\n            this.supplierNotFound = false;\n            this.productNotFound = false;\n            this.name = '', this.type = '', this.newType = '';\n            this.quantity = '', this.price = '', this.supplierName = '', this.remarks = '', this.date = '';\n          });\n          this.addNewType = false;\n        } else {\n          axios.post(`addPurchase`, {\n            name: this.name,\n            type: this.type,\n            num: this.quantity,\n            price: this.price,\n            total: this.price * this.quantity,\n            supplierName: this.supplierName,\n            remarks: this.remarks,\n            date: this.date\n          }).then(response => {\n            this.isSuccess = true;\n            this.supplierNotFound = false;\n            this.productNotFound = false;\n            this.name = '', this.type = '', this.newType = '';\n            this.quantity = '', this.price = '', this.supplierName = '', this.remarks = '', this.date = '';\n          });\n        }\n      }\n    },\n    //check the existence of the supplier in the database\n    async checkSupplierExistence() {\n      await axios.get('checkSupplierExistence', {\n        params: {\n          supplierName: this.supplierName\n        }\n      }).then(response => {\n        if (response.data == false) {\n          this.supplierNotFound = true;\n          this.isSuccess = false;\n          this.productNotFound = false;\n          this.supplierExistence = false;\n        } else {\n          this.supplierNotFound = false;\n          this.isSuccess = false;\n          this.productNotFound = false;\n          this.supplierExistence = true;\n        }\n      });\n    },\n    //get suppliers \n    getAllSuppliers() {\n      SupplierService.getSuppliers().then(response => {\n        this.suppliers = response.data;\n      });\n    },\n    //get products \n    getAllProducts() {\n      BilibiliService.getDistinctProducts().then(response => {\n        this.products = response.data;\n      });\n    },\n    //automatically fill in the purchase form \n    auto() {\n      PurchaseService.getPurchaseContent(this.name).then(response => {\n        this.type = response.data.type, this.quantity = response.data.num, this.price = response.data.price, this.supplierName = response.data.supplierName, this.remarks = response.data.remarks, this.date = response.data.date;\n      });\n    },\n    setProduct() {\n      this.name = this.tempProductName;\n    },\n    setSupplier() {\n      this.supplierName = this.tempSupplierName;\n    },\n    setTempSupplier(company) {\n      this.tempSupplierName = company;\n    },\n    setTempProduct(name) {\n      this.tempProductName = name;\n    },\n    //go to the add supplier page\n    jumpToAddSupplier() {\n      this.$router.push({\n        path: '/addSupplier'\n      });\n    },\n    //show adding new type input bar\n    showNewType() {\n      PurchaseService.getPurchasesWithDistinctTypes().then(response => {\n        this.distinctType = response.data;\n      });\n      if (this.type == 'Add a new type') {\n        this.addNewType = true;\n        $('showInput').show();\n      } else {\n        this.addNewType = false;\n        $('showInput').hide();\n      }\n    },\n    //Check if the input quantity is valid\n    validateQuantity() {\n      const quantityRegex = /^[1-9]\\d*$/;\n      if (!quantityRegex.test(this.quantity)) {\n        this.quantityError = true;\n      } else {\n        this.quantityError = false;\n      }\n    },\n    //Check if the input price is valid\n    validatePrice() {\n      const priceRegex = /^[1-9]\\d*(\\.\\d{1,2})?$/;\n      if (!priceRegex.test(this.price)) {\n        this.priceError = true;\n      } else {\n        this.priceError = false;\n      }\n    }\n  },\n  computed: {\n    //Get required suppliers after searching\n    filteredSuppliers() {\n      return this.suppliers.filter(supplier => supplier.company.toLowerCase().includes(this.supplierSearch.toLowerCase()));\n    },\n    //Get required products after searching\n    filteredProducts() {\n      return this.products.filter(product => product.name.toLowerCase().includes(this.productSearch.toLowerCase()));\n    }\n  },\n  created() {\n    this.getAllSuppliers();\n    this.getAllProducts();\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","SupplierService","PurchaseService","BilibiliService","data","name","type","quantity","price","supplierName","tempSupplierName","tempProductName","remarks","date","purchases","supplierSearch","productSearch","products","productName","isSuccess","supplierNotFound","productNotFound","supplierExistence","availability","noAvailability","suppliers","addNewType","distinctType","newType","quantityError","priceError","methods","onCreatePost","alert","checkSupplierExistence","addPurchase","post","num","total","then","response","get","params","getAllSuppliers","getSuppliers","getAllProducts","getDistinctProducts","auto","getPurchaseContent","setProduct","setSupplier","setTempSupplier","company","setTempProduct","jumpToAddSupplier","$router","push","path","showNewType","getPurchasesWithDistinctTypes","$","show","hide","validateQuantity","quantityRegex","test","validatePrice","priceRegex","computed","filteredSuppliers","filter","supplier","toLowerCase","includes","filteredProducts","product","created"],"sourceRoot":"","sources":["C:\\Users\\Ella\\Desktop\\vue-frontend\\src\\components\\Procurement\\Purchase\\AddPurchase.vue"],"sourcesContent":["// Made by GRPTeam202205\r\n<template>\r\n    <!-- Add purchase page -->\r\n    <div>\r\n        <!-- Title of the page -->\r\n        <h2>{{$t('Purchase.Create New Purchase')}}</h2>\r\n        <hr />\r\n\r\n        <!-- Find a product -->\r\n        <div class=\"modal fade\" id=\"addProduct\" tabindex=\"-1\" aria-labelledby=\"addProductLabel\" aria-hidden=\"true\">\r\n            <div class=\"modal-dialog\">\r\n                <div class=\"modal-content\">\r\n                    <div class=\"modal-header\">\r\n                        <h5 class=\"modal-title\" id=\"addProductLabel\">{{$t('Find a Product')}}</h5>\r\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                    </div>\r\n                    <div class=\"modal-body\">\r\n                        <div class=\"input-group rounded\">\r\n                            <input type=\"search\" class=\"form-control rounded\" :placeholder=\"$t('Search')\" v-model=\"productSearch\"/>\r\n                        </div>\r\n                        <ul class=\"list-group\">\r\n                            <li class=\"list-group-item\" v-for=\"product in filteredProducts\" :key=\"product.id\">\r\n                                <input class=\"form-check-input \" type=\"radio\" name=\"productRadio\" id=\"productRadio\" @click=\"setTempProduct(product.name)\" aria-label=\"...\">\r\n                                <span>{{product.name}}</span>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                    <div class=\"modal-footer\">\r\n                        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">{{$t('No')}}</button>\r\n                        <button type=\"button\" class=\"btn btn-primary\" data-bs-dismiss=\"modal\" @click=\"setProduct\">{{$t('Yes')}}</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Find a supplier -->\r\n        <div class=\"modal fade\" id=\"addSupplier\" tabindex=\"-1\" aria-labelledby=\"addSupplierLabel\" aria-hidden=\"true\">\r\n            <div class=\"modal-dialog modal-dialog-scrollable\">\r\n                <div class=\"modal-content\">\r\n                    <div class=\"modal-header\">\r\n                        <h5 class=\"modal-title\" id=\"addSupplierLabel\">{{$t('Find a Supplier')}}</h5>\r\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                    </div>\r\n                    <div class=\"modal-body\">\r\n                        <div class=\"input-group rounded\">\r\n                            <input type=\"search\" class=\"form-control rounded\" :placeholder=\"$t('Search')\" v-model=\"supplierSearch\"/>\r\n                        </div>\r\n                        <ul class=\"list-group\" v-if=\"productName\">\r\n                            <li class=\"list-group-item\" v-for=\"supplier in suppliersWithGivenProduct\" :key=\"supplier.id\">\r\n                                <input class=\"form-check-input me-1\" type=\"radio\" name=\"certainSuppliers\" id=\"certainSuppliers\" @click=\"setTempSupplier(supplier.company)\" aria-label=\"...\">\r\n                                {{supplier.company}}\r\n                            </li>\r\n                        </ul>\r\n                        <ul class=\"list-group\" v-else>\r\n                            <li class=\"list-group-item\" v-for=\"supplier in filteredSuppliers\" :key=\"supplier.id\">\r\n                                <input class=\"form-check-input \" type=\"radio\" name=\"supplierRadio\" id=\"supplierRadio\" @click=\"setTempSupplier(supplier.company)\" aria-label=\"...\">\r\n                                <span>{{supplier.company}}</span>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                    <div class=\"modal-footer\">\r\n                        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">{{$t('Cancel')}}</button>\r\n                        <button type=\"button\" class=\"btn btn-primary\" data-bs-dismiss=\"modal\" @click=\"setSupplier\">{{$t('OK')}}</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row col-md-4 offset-md-4\">\r\n            <!-- Show the following message if the purchase is to the database successfully-->\r\n            <div class=\"alert alert-success\" v-if=\"isSuccess\">\r\n                {{$t('Purchase.The purchase is added successfully!')}}\r\n            </div>\r\n            <!-- Show the following message if the supplier is not found-->\r\n            <div class=\"alert alert-danger\" v-if=\"supplierNotFound\">\r\n                {{$t('Purchase.Supplier is not found!')}}\r\n            </div>\r\n\r\n            <!-- Purchase form to collect info of the purchase to be added -->\r\n            <div class=\"panel panel-primary\">\r\n                <div class=\"icon1\"></div> <div class=\"empty-row\"></div> <div class=\"icon2\"></div>\r\n\r\n                <div class=\"panel-body\">\r\n                    <form @submit.prevent=\"onCreatePost\">\r\n                        <!-- Input name of the purchase -->\r\n                        <label for=\"name\">{{$t('Name')}}</label>\r\n                        <div class=\"input-group mb-3\">\r\n                            <input type=\"text\" list=\"datalistName\" class=\"form-control\" :placeholder=\"$t('Chips')\" id= \"name\" v-model=\"name\"  @blur=\"auto\" required>\r\n                            <datalist id=\"datalistName\">\r\n                                <option v-for = \"product in filteredProducts\" :key = \"product.id\">{{product.name}}</option>   \r\n                            </datalist>\r\n                            <div class=\"input-group-append\" data-bs-toggle=\"modal\" data-bs-target=\"#addProduct\">\r\n                                <button class=\"input-group-text\" type=\"button\">\r\n                                    <i class=\"fa fa-search\" style=\"font-size:24px\" ></i>\r\n                                </button>\r\n                            </div> \r\n                        </div>\r\n                        <!-- Input type of the purchase -->\r\n                        <div class=\"form-group\">\r\n                            <label for=\"type\" class=\"form-label\" v-if=\"!addNewType\">{{$t('Type')}}</label>\r\n                            <select class=\"form-select\" aria-label=\"Default select example\" v-model=\"type\" @click=\"showNewType\" required>\r\n                                <option selected disabled value=\"\">{{$t('Please choose a type')}}</option>\r\n                                <option v-for=\"type in distinctType\" :key=\"type\">{{type}}</option>\r\n                                <option>{{$t('Add a new type')}}</option>\r\n                            </select>\r\n                        </div>\r\n                        <!-- Input new type of the purchase -->\r\n                        <div class=\"form-group\" v-if=\"addNewType\" id=\"showInput\" required>\r\n                            <label for=\"newType\">{{$t('New Type')}}</label>\r\n                            <input type=\"text\" class=\"form-control\" id= \"newType\" v-model=\"newType\" required>\r\n                        </div>\r\n                        <!-- Input quantity of the purchase -->\r\n                        <div class=\"form-group\">\r\n                            <label for=\"quantity\">{{$t('Quantity')}}</label>\r\n                            <input type=\"text\" class=\"form-control\" :placeholder=\"$t('e.g. 20')\" id= \"quantity\" v-model=\"quantity\" @input=\"validateQuantity\" required>\r\n                            <div v-show=\"quantityError\" class=\"text-danger\">{{$t('Please input a valid quantity')}}</div>\r\n                        </div>\r\n                        <!-- Input price of the purchase -->\r\n                        <div class=\"form-group\">\r\n                            <label for=\"price\">{{$t('Purchase.Purchase Price')}}</label>\r\n                            <input type=\"text\" class=\"form-control\" :placeholder=\"$t('e.g. 20')\" id= \"price\" v-model=\"price\" @input=\"validatePrice\" required>\r\n                            <div v-show=\"priceError\" class=\"text-danger\">{{$t('Please input a valid purchase price')}}</div>\r\n                        </div>\r\n                        <!-- Input supplier name of the purchase -->\r\n                        <label for=\"supplierName\">{{$t('Supplier Name')}}</label>\r\n                            <div class=\"input-group mb-3\">\r\n                            <input type=\"text\" list=\"datalist\" class=\"form-control\" :placeholder=\"$t('e.g. Tom')\" id= \"supplierName\" v-model=\"supplierName\" required>\r\n                            <datalist id=\"datalist\">\r\n                                <option v-for = \"supplier in filteredSuppliers\" :key = \"supplier.id\">{{supplier.company}}</option>   \r\n                            </datalist>\r\n                            <div class=\"input-group-append\" data-bs-toggle=\"modal\" data-bs-target=\"#addSupplier\">\r\n                                <button class=\"input-group-text\" type=\"button\">\r\n                                    <i class=\"fa fa-search\" style=\"font-size:24px\"></i>\r\n                                </button>\r\n                            </div>\r\n                            <div class=\"input-group-append\">\r\n                                <button class=\"input-group-text\" type=\"button\">\r\n                                    <i class=\"fa fa-plus\" style=\"font-size:24px\" @click=\"jumpToAddSupplier\"></i>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <!-- Input description of the purchase -->\r\n                        <div class=\"form-group\">\r\n                            <label for=\"remarks\">{{$t('Description')}}</label>\r\n                            <input type=\"text\" class=\"form-control\" :placeholder=\"$t('e.g. Fragile; handle with care!')\" id= \"remarks\" v-model=\"remarks\" required>\r\n                        </div>\r\n                        <!-- Input date of the purchase -->\r\n                        <div class=\"form-group\">\r\n                            <label for=\"date\">{{$t('Date')}}</label>\r\n                            <input type=\"date\" class=\"form-control\" id= \"date\" v-model=\"date\" required>\r\n                        </div>\r\n                        <!-- Click the button to submit the purchase form to the backend -->\r\n                        <div class=\"row align-items-center\">\r\n                            <div class=\"empty-row2\"></div>\r\n                            <div class=\"col-6\">\r\n                                <button type=\"submit\" class=\"btn btn-primary\">\r\n                                    {{$t('Purchase.Add purchase')}}\r\n                                </button>\r\n                            </div>\r\n                            <div class=\"col-6\">\r\n                                <router-link :to=\"{name:'Purchase'}\"><button type=\"button\" class=\"btn btn-outline-primary\">{{$t('Purchase.View Purchases')}}</button></router-link>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nimport SupplierService from '@/services/Supplier/SupplierService'\r\nimport PurchaseService from '@/services/Purchase/PurchaseService'\r\nimport BilibiliService from '@/services/Bilibili/BilibiliService'\r\nexport default {\r\n    data() {\r\n        return {\r\n            name: '',//store the name of the purchase\r\n            type: '',//store the type of the purchase\r\n            quantity: '',//store the quantity of the purchase\r\n            price: '',//store the price of the purchase\r\n            supplierName: '',//store the supplier name of the purchase\r\n            tempSupplierName: '',//store the name of the supplier temporarily\r\n            tempProductName: '',//store the name of the product temporarily\r\n            remarks: '',//store the remarks of the purchase\r\n            date: '',//store the date of the purchase\r\n            purchases: '',\r\n            supplierSearch: '',\r\n            productSearch: '',\r\n            products: [],\r\n            productName: '',//name of the product\r\n            isSuccess: false,//true if the purchase is added successfully, else false\r\n            supplierNotFound: false,//true if the supplier is not found, else false\r\n            productNotFound: false,//true if the product is not found, else false\r\n            supplierExistence : true,//true if the supplier is not found, else false\r\n            availability : true,//true if the number of products is available, else false\r\n            noAvailability: '',//true if the number of products is not available, else false\r\n            suppliers: [],//store suppliers\r\n            addNewType: false,//true if a new type will be added, else false,\r\n            distinctType: [],\r\n            newType: '',//store new type of the purchase\r\n            quantityError: false,\r\n            priceError: false,\r\n        };\r\n    },\r\n    methods: {\r\n        // add a new purchase\r\n        //check the validity of all inputs\r\n        async onCreatePost() {\r\n            if (this.quantityError || this.priceError) {\r\n                alert('Please correct the errors before submitting.');\r\n                return;\r\n            }\r\n            await this.checkSupplierExistence()\r\n            this.addPurchase()\r\n        },\r\n        // pass the purchase information to the backend\r\n        addPurchase(){\r\n            if(this.supplierExistence){\r\n                if(this.addNewType){\r\n                    axios\r\n                    .post(`addPurchase`, {\r\n                        name: this.name,\r\n                        type: this.newType,\r\n                        num: this.quantity,\r\n                        price: this.price,\r\n                        total: this.price * this.quantity,\r\n                        supplierName: this.supplierName,\r\n                        remarks: this.remarks,\r\n                        date: this.date\r\n                    })\r\n                    .then((response) => {\r\n                        this.isSuccess = true;\r\n                        this.supplierNotFound = false;\r\n                        this.productNotFound = false;\r\n                        this.isSuccess = true;\r\n                        this.supplierNotFound = false;\r\n                        this.productNotFound = false;\r\n                        this.name = '',\r\n                        this.type = '',\r\n                        this.newType = ''\r\n                        this.quantity = '',\r\n                        this.price = '',\r\n                        this.supplierName = '',\r\n                        this.remarks = '',\r\n                        this.date = ''\r\n                    });\r\n                    this.addNewType = false;\r\n                }\r\n                else{\r\n                    axios\r\n                    .post(`addPurchase`, {\r\n                        name: this.name,\r\n                        type: this.type,\r\n                        num: this.quantity,\r\n                        price: this.price,\r\n                        total: this.price * this.quantity,\r\n                        supplierName: this.supplierName,\r\n                        remarks: this.remarks,\r\n                        date: this.date\r\n                    })\r\n                    .then((response) => {\r\n                        this.isSuccess = true;\r\n                        this.supplierNotFound = false;\r\n                        this.productNotFound = false;\r\n                        this.name = '',\r\n                        this.type = '',\r\n                        this.newType = ''\r\n                        this.quantity = '',\r\n                        this.price = '',\r\n                        this.supplierName = '',\r\n                        this.remarks = '',\r\n                        this.date = ''\r\n                    });\r\n                }\r\n            }\r\n        },\r\n        //check the existence of the supplier in the database\r\n        async checkSupplierExistence(){\r\n            await axios\r\n                .get('checkSupplierExistence', {params:{supplierName:this.supplierName}  \r\n                })\r\n                .then((response) => {\r\n                    if(response.data == false){\r\n                        this.supplierNotFound = true;\r\n                        this.isSuccess = false;\r\n                        this.productNotFound = false;\r\n                        this.supplierExistence = false;\r\n                    }else{\r\n                        this.supplierNotFound = false;\r\n                        this.isSuccess = false;\r\n                        this.productNotFound = false;\r\n                        this.supplierExistence = true;\r\n                    }\r\n                });\r\n        },\r\n        //get suppliers \r\n        getAllSuppliers(){\r\n            SupplierService.getSuppliers().then((response)=>{\r\n                this.suppliers = response.data\r\n            })\r\n        },\r\n        //get products \r\n        getAllProducts(){\r\n            BilibiliService.getDistinctProducts().then((response)=>{\r\n                this.products = response.data\r\n            })\r\n        },\r\n        //automatically fill in the purchase form \r\n        auto(){\r\n            PurchaseService.getPurchaseContent(this.name).then((response)=>{\r\n                this.type = response.data.type,\r\n                this.quantity = response.data.num,\r\n                this.price = response.data.price,\r\n                this.supplierName = response.data.supplierName,\r\n                this.remarks = response.data.remarks,\r\n                this.date = response.data.date\r\n            })\r\n        },\r\n        setProduct(){\r\n            this.name = this.tempProductName\r\n        },\r\n        setSupplier(){\r\n            this.supplierName = this.tempSupplierName\r\n        },\r\n        setTempSupplier(company){\r\n            this.tempSupplierName = company\r\n        },\r\n        setTempProduct(name){\r\n            this.tempProductName = name\r\n        },\r\n        //go to the add supplier page\r\n        jumpToAddSupplier(){\r\n            this.$router.push({path:'/addSupplier'})\r\n        },\r\n        //show adding new type input bar\r\n        showNewType(){\r\n            PurchaseService.getPurchasesWithDistinctTypes().then((response)=>{\r\n                this.distinctType = response.data\r\n            })\r\n            if(this.type == 'Add a new type'){\r\n                this.addNewType = true\r\n                $('showInput').show()\r\n            }else{\r\n                this.addNewType = false\r\n                $('showInput').hide()\r\n            }\r\n        },\r\n        //Check if the input quantity is valid\r\n        validateQuantity() {\r\n              const quantityRegex = /^[1-9]\\d*$/;\r\n              if (!quantityRegex.test(this.quantity)) {\r\n                this.quantityError = true;\r\n              } else {\r\n                this.quantityError = false;\r\n              }\r\n        },\r\n        //Check if the input price is valid\r\n        validatePrice() {\r\n              const priceRegex = /^[1-9]\\d*(\\.\\d{1,2})?$/;\r\n              if (!priceRegex.test(this.price)) {\r\n                this.priceError = true;\r\n              } else {\r\n                this.priceError = false;\r\n              }\r\n        }\r\n    },\r\n    computed:{\r\n        //Get required suppliers after searching\r\n        filteredSuppliers(){\r\n            return this.suppliers.filter(supplier => supplier.company.toLowerCase().includes(this.supplierSearch.toLowerCase()));\r\n        },\r\n        //Get required products after searching\r\n        filteredProducts(){\r\n            return this.products.filter(product => product.name.toLowerCase().includes(this.productSearch.toLowerCase()));\r\n        },\r\n    },\r\n    created(){\r\n        this.getAllSuppliers()\r\n        this.getAllProducts()\r\n    }\r\n};\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}