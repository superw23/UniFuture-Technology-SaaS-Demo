{"ast":null,"code":"import SaleService from '@/services/Sale/SaleService';\nimport CustomerService from '@/services/Customer/CustomerService';\nimport axios from 'axios';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport * as XLSX from 'xlsx';\nfunction s2ab(s) {\n  // Convert a string to an ArrayBuffer\n  const buf = new ArrayBuffer(s.length);\n  const view = new Uint8Array(buf);\n  for (let i = 0; i < s.length; i++) {\n    view[i] = s.charCodeAt(i) & 0xFF;\n  }\n  return buf;\n}\nexport default {\n  name: 'Sales',\n  data() {\n    return {\n      itemsPerPage: 5,\n      //the number of customer shown in one page\n      pageNum: 0,\n      //store current page number\n      sales: [],\n      fixedSales: [],\n      search: '',\n      //store search content\n      customers: [],\n      startDate: '',\n      endDate: '',\n      tempReturnNum: '',\n      editing: false,\n      isReturned: false,\n      isEdited: false,\n      hasQuantityError: false,\n      priceError: false,\n      invalidQuantity: false,\n      customerName: '',\n      pdfIconSize: '2em',\n      excelIconSize: '2em'\n    };\n  },\n  methods: {\n    //Get all sales records\n    async getSales() {\n      await SaleService.getSales().then(response => {\n        this.sales = response.data;\n        this.fixedSales = response.data;\n      });\n    },\n    //Get sales records within given dates\n    getSalesWithinGivenDates() {\n      SaleService.getSalesWithinGivenDates(this.startDate, this.endDate).then(response => {\n        this.sales = response.data;\n      });\n    },\n    //Get all customers\n    getCustomers() {\n      CustomerService.getCustomers().then(response => {\n        this.customers = response.data;\n      });\n    },\n    //Sort sales records of a given field\n    sort(field) {\n      SaleService.sort(this.pageNum, this.itemsPerPage, field).then(response => {\n        this.sales = response.data;\n      });\n    },\n    //Set the number of records shown in one page\n    pagination(pageNum) {\n      this.pageNum = pageNum;\n      if (this.pageNum == -1) {\n        this.pageNum = 0;\n        return;\n      }\n      SaleService.pagination(pageNum, this.itemsPerPage).then(response => {\n        this.sales = response.data;\n      });\n    },\n    //Set the number of records shown in one page\n    changeItemPerPage(num) {\n      this.itemsPerPage = num;\n      this.pagination(this.pageNum, this.itemsPerPage);\n    },\n    //Update or return a sales record\n    updateSale(updateType) {\n      if (this.hasQuantityError || this.priceError || this.invalidQuantity) {\n        alert('Please correct the errors before submitting.');\n        return;\n      } else {\n        axios.put(`updateSale`, {\n          id: this.$refs.id.value,\n          name: this.$refs.name.value,\n          num: this.$refs.num.value,\n          total: this.$refs.total.value,\n          price: this.$refs.price.value,\n          customerName: this.customerName,\n          productId: this.$refs.productId.value,\n          returnPrice: this.$refs.returnPrice.value,\n          returnNum: this.$refs.returnNum.value,\n          date: this.$refs.date.value\n        }, {\n          params: {\n            updateType: updateType\n          }\n        }).then(response => {\n          if (updateType == 'return') {\n            this.isReturned = true;\n            this.isEdited = false;\n            this.hasQuantityError = false;\n            this.invalidQuantity = false;\n            this.priceError = false;\n          } else {\n            this.isEdited = true;\n            this.isReturned = false;\n            this.hasQuantityError = false;\n            this.invalidQuantity = false;\n            this.priceError = false;\n          }\n          this.getSales();\n        });\n      }\n    },\n    //Pass the sales info to the edit form\n    passSale(sale) {\n      this.editing = true;\n      this.hasQuantityError = false;\n      this.priceError = false;\n      this.invalidQuantity = false;\n      this.$refs.id.value = sale.id;\n      this.$refs.name.value = sale.name;\n      this.$refs.num.value = sale.num;\n      this.$refs.returnNum.value = sale.num;\n      this.$refs.total.value = sale.total;\n      this.$refs.price.value = sale.price, this.$refs.returnPrice.value = sale.price, this.$refs.productId.value = sale.productId, this.customerName = sale.customerName, this.$refs.date.value = sale.date;\n      this.tempReturnNum = sale.num;\n    },\n    //Check if the input quantity is valid\n    validateQuantity(quantity) {\n      const quantityRegex = /^[1-9]\\d*$/;\n      if (!quantityRegex.test(quantity)) {\n        this.hasQuantityError = true;\n      } else if (quantity > this.tempReturnNum) {\n        this.invalidQuantity = true;\n      } else {\n        this.hasQuantityError = false;\n        this.invalidQuantity = false;\n      }\n    },\n    //Check if the input price is valid\n    validatePrice(price) {\n      const priceRegex = /^[1-9]\\d*(\\.\\d{1,2})?$/;\n      if (!priceRegex.test(price)) {\n        this.priceError = true;\n      } else {\n        this.priceError = false;\n      }\n    },\n    //Download the sales form in pdf format\n    downloadPDF() {\n      const columns = [{\n        header: 'Order No.',\n        dataKey: 'id'\n      }, {\n        header: 'Customer Name',\n        dataKey: 'customerName'\n      }, {\n        header: 'Product ID',\n        dataKey: 'productId'\n      }, {\n        header: 'Name',\n        dataKey: 'name'\n      }, {\n        header: 'Quantity',\n        dataKey: 'num'\n      }, {\n        header: 'Sale Price',\n        dataKey: 'price'\n      }, {\n        header: 'Total',\n        dataKey: 'total'\n      }];\n      const pdf = new jsPDF();\n      //text is placed using x, y coordinates\n      pdf.setFontSize(20).text(\"Sales History\", 80, 10);\n      //use autoTable plugin\n      autoTable(pdf, {\n        columns,\n        body: this.sales,\n        margin: {\n          top: 30\n        }\n      });\n      //show total stock\n      pdf.setFontSize(16).text('Total stock: ' + this.total, 90, 20);\n      //download pdf\n      pdf.save(\"Sales.pdf\");\n    },\n    //Download the sales form in excel format\n    downloadExcel() {\n      const filteredSalesWithoutReturn = this.filteredSales.map(sales => {\n        return {\n          OrderNo: sales.id,\n          Name: sales.name,\n          ProductID: sales.productId,\n          Quantity: sales.num,\n          Price: sales.price,\n          Total: sales.total,\n          Customer: sales.customerName,\n          Date: sales.date\n        };\n      });\n\n      // Create a new workbook\n      const wb = XLSX.utils.book_new();\n      // Add a new worksheet to the workbook\n      const ws = XLSX.utils.json_to_sheet(filteredSalesWithoutReturn);\n      // Add the worksheet to the workbook\n      XLSX.utils.book_append_sheet(wb, ws, 'Sales');\n      // Write the workbook to a binary string\n      const wbout = XLSX.write(wb, {\n        bookType: 'xlsx',\n        type: 'binary'\n      });\n      // Convert the binary string to a Blob object\n      const blob = new Blob([s2ab(wbout)], {\n        type: 'application/octet-stream'\n      });\n      // Create a temporary link to the file and trigger a download\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'Sales History.xlsx';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  },\n  async created() {\n    await this.getSales();\n    this.getCustomers();\n    this.itemsPerPage = this.sales.length;\n  },\n  computed: {\n    //Filter sales records according to the product name\n    filteredSales() {\n      return this.sales.filter(sale => sale.name.toLowerCase().includes(this.search.toLowerCase()));\n    },\n    //Filter customers according to user input\n    filteredCustomers() {\n      return this.customers.filter(customer => customer.name.toLowerCase().includes(this.customerName.toLowerCase()));\n    },\n    //Caculate total price of sales records\n    caculateTotal() {\n      return this.sales.map(sale => Number(sale.num) * Number(sale.sell_price));\n    },\n    //Caculate total number of sales records\n    total() {\n      return this.sales.reduce((total, curr) => total = total + curr.num, 0);\n    },\n    //Calculate total pages of sales records\n    totalPages() {\n      return Math.ceil(this.fixedSales.length / this.itemsPerPage);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["SaleService","CustomerService","axios","jsPDF","autoTable","XLSX","s2ab","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","name","data","itemsPerPage","pageNum","sales","fixedSales","search","customers","startDate","endDate","tempReturnNum","editing","isReturned","isEdited","hasQuantityError","priceError","invalidQuantity","customerName","pdfIconSize","excelIconSize","methods","getSales","then","response","getSalesWithinGivenDates","getCustomers","sort","field","pagination","changeItemPerPage","num","updateSale","updateType","alert","put","id","$refs","value","total","price","productId","returnPrice","returnNum","date","params","passSale","sale","validateQuantity","quantity","quantityRegex","test","validatePrice","priceRegex","downloadPDF","columns","header","dataKey","pdf","setFontSize","text","body","margin","top","save","downloadExcel","filteredSalesWithoutReturn","filteredSales","map","OrderNo","Name","ProductID","Quantity","Price","Total","Customer","Date","wb","utils","book_new","ws","json_to_sheet","book_append_sheet","wbout","write","bookType","type","blob","Blob","url","window","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","created","computed","filter","toLowerCase","includes","filteredCustomers","customer","caculateTotal","Number","sell_price","reduce","curr","totalPages","Math","ceil"],"sourceRoot":"","sources":["C:\\Users\\Ella\\Desktop\\vue-frontend\\src\\components\\Sales\\Sale\\Sale.vue"],"sourcesContent":["// Made by GRPTeam202205\r\n<template>\r\n    <!--Search bar-->\r\n    <nav class=\"navbar\">\r\n        <div class=\"container-fluid\">\r\n            <!--Drop-down menu to choose the number of Records Per Page-->\r\n            <div class=\"dropdown\">\r\n                <button class=\"btn dropdown-toggle\" type=\"button\" id=\"dropdownMenu2\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    {{$t('Records Per Page')}}\r\n                </button>\r\n                <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2\">\r\n                    <li><button class=\"dropdown-item\" type=\"button\" @click=\"changeItemPerPage(5)\">5</button></li>\r\n                    <li><button class=\"dropdown-item\" type=\"button\" @click=\"changeItemPerPage(10)\">10</button></li>\r\n                    <li><button class=\"dropdown-item\" type=\"button\" @click=\"changeItemPerPage(15)\">15</button></li>\r\n                </ul>\r\n            </div>\r\n            <a class=\"navbar-brand\"></a>\r\n            <form class=\"d-flex\" role=\"search\">\r\n            <input class=\"form-control me-2\" type=\"search\" :placeholder=\"$t('Search')\" aria-label=\"Search\" v-model=\"search\">\r\n            <button class=\"btn btn-outline-success\" type=\"submit\">{{$t('Search')}}</button>\r\n            </form>\r\n        </div>\r\n    </nav>\r\n\r\n    <!--Edit Sale-->\r\n    <div class=\"modal fade\" id=\"exampleModal\" ref=\"saleModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n    <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\" id=\"exampleModalLabel\">\r\n            <span v-if=\"editing\">{{$t('Sale.Edit Sale')}}</span>\r\n            <span v-else>{{$t('Add A New Sale')}}</span>\r\n            </h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n            <form>\r\n            <div class=\"mb-3\">\r\n                <label for=\"id\" class=\"col-form-label\">{{$t('Order No.')}}:</label>\r\n                <input type=\"text\" class=\"form-control\" id=\"id\" ref=\"id\" value=\"\" disabled=\"disabled\">\r\n            </div>\r\n            <div class=\"mb-3\">\r\n                <label for=\"name\" class=\"col-form-label\">{{$t('Name')}}:</label>\r\n                <input type=\"text\" class=\"form-control\" id=\"name\" ref=\"name\" value=\"\">\r\n            </div>\r\n            <div class=\"mb-3\">\r\n                <label for=\"total\" class=\"col-form-label\">{{$t('Total')}}:</label>\r\n                <input type=\"text\" class=\"form-control\" id=\"total\" ref=\"total\" value=\"\">\r\n            </div>\r\n            <div class=\"mb-3\">\r\n                <label for=\"num\" class=\"col-form-label\">{{$t('Number')}}:</label>\r\n                <input type=\"text\" class=\"form-control\" id=\"num\" ref=\"num\" value=\"\" disabled=\"disabled\">\r\n            </div>\r\n            <div class=\"mb-3\">\r\n                <label for=\"price\" class=\"col-form-label\">{{$t('Sale.Sale Price')}}:</label>\r\n                <input type=\"text\" class=\"form-control\" id=\"price\" ref=\"price\" value=\"\">\r\n            </div>\r\n            <div class=\"mb-3\">\r\n                <label for=\"productId\" class=\"col-form-label\">{{$t('Product ID')}}:</label>\r\n                <input type=\"text\" class=\"form-control\" id=\"productId\" ref=\"productId\" value=\"\" disabled=\"disabled\">\r\n            </div>\r\n            <div class=\"mb-3\">\r\n                <label for=\"customerName\" class=\"col-form-label\">{{$t('Customer Name')}}:</label>\r\n                <input type=\"text\" list=\"datalist\" class=\"form-control\" id=\"customerName\" v-model=\"this.customerName\">\r\n                <datalist id=\"datalist\">\r\n                    <option v-for = \"customer in filteredCustomers\" :key = \"customer.id\">{{customer.name}}</option>   \r\n                </datalist> \r\n            </div>\r\n            <div class=\"mb-3\">\r\n                <label for=\"date\" class=\"col-form-label\">{{$t('Date')}}:</label>\r\n                <input type=\"text\" class=\"form-control\" id=\"date\" ref=\"date\" value=\"\">\r\n            </div>\r\n            </form>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">{{$t('Close')}}</button>\r\n            <button type=\"button\" class=\"btn btn-primary\" data-bs-dismiss=\"modal\" @click=\"updateSale('update')\">{{$t('Send')}}</button>\r\n        </div>\r\n        </div>\r\n    </div>\r\n    </div>\r\n\r\n    <!-- Get Return Price -->\r\n    <div class=\"modal fade\" id=\"returnSale\" ref=\"saleModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n    <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\" id=\"returnSale\">\r\n            <span>{{$t('Sale.Return Sale')}}</span>\r\n            </h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n            <form>\r\n            <div class=\"mb-3\">\r\n                <label for=\"returnPrice\" class=\"col-form-label\">{{$t('Return Price')}}:</label>\r\n                <input type=\"text\" class=\"form-control\" id=\"returnPrice\" ref=\"returnPrice\" value=\"\" @input=\"validatePrice(this.$refs.returnPrice.value)\" required>\r\n                <div v-if=\"priceError\" class=\"text-danger\">{{$t('Please input a valid sale price')}}</div>\r\n            </div>\r\n            <div class=\"mb-3\">\r\n                <label for=\"returnNum\" class=\"col-form-label\">{{$t('Return Quantity')}}:</label>\r\n                <input type=\"text\" class=\"form-control\" id=\"returnNum\" ref=\"returnNum\" value=\"\" @input=\"validateQuantity(this.$refs.returnNum.value)\" required>\r\n                <div v-if=\"hasQuantityError\" class=\"text-danger\">{{$t('Please input a valid quantity')}}</div>\r\n                <div v-if=\"invalidQuantity\" class=\"text-danger\">{{$t('The quantity cannot be larger than the original input quantity')}}</div>\r\n            </div>\r\n            </form>\r\n            <div class=\"modal-footer\">\r\n                <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">{{$t('Close')}}</button>\r\n                <button type=\"button\" class=\"btn btn-primary\" data-bs-dismiss=\"modal\" @click=\"updateSale('return')\">{{$t('Send')}}</button>\r\n            </div>\r\n        </div> \r\n        </div>\r\n    </div>\r\n    </div>\r\n\r\n    <!--Sale List-->\r\n    <div class=\"container\">\r\n        <h1 class=\"test-center\">{{$t('Sale.Sales History')}}\r\n            <router-link :to=\"{name:'AddSale'}\"><i class=\"fa fa-cart-plus\" style=\"font-size:42px\"></i></router-link>\r\n        </h1>\r\n        <br>\r\n        <div class=\"alert alert-success\" v-if=\"isReturned\">\r\n            {{$t('Sale.The sale is returned successfully!')}}\r\n        </div>\r\n        <div class=\"alert alert-success\" v-if=\"isEdited\">\r\n            {{$t('Sale.The sale is updated successfully!')}}\r\n        </div>\r\n        <div class=\"row align-items-center\">\r\n            <div class=\"col\"></div>\r\n            <div class=\"col-2\">\r\n                {{$t('Start Date:')}} <input  type=\"date\" class=\"form-control me-2\" :placeholder=\"$t('Choose a start date')\" id= \"date\" v-model=\"startDate\">\r\n            </div>\r\n            <div class=\"col-2\">\r\n                {{$t('End Date:')}} <input type=\"date\" class=\"form-control\" :placeholder=\"$t('Choose an end date')\" id= \"date\" v-model=\"endDate\">\r\n            </div>\r\n            <div class=\"col-auto\">\r\n            <img src=\"/static/Others/check.png\" width=\"20\" height=\"20\" type=\"submit\" @click=\"getSalesWithinGivenDates\"/>\r\n            </div>\r\n            <div class=\"col\"></div>\r\n        </div>\r\n        <br>\r\n        <div class=\"table-responsive\">\r\n            <table class=\"table table-stripped\">\r\n                <thead>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-numeric-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('id')\"/>\r\n                        {{$t('Order No.')}}\r\n                    </th>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('name')\"/>\r\n                        {{$t('Name')}}\r\n                    </th>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('num')\"/>\r\n                        {{$t('Quantity')}}\r\n                    </th>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('price')\"/>\r\n                        {{$t('Sale.Sale Price')}}\r\n                    </th>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('total')\"/>\r\n                        {{$t('Total')}}\r\n                    </th>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('productId')\"/>\r\n                        {{$t('Product ID')}}\r\n                    </th>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('customerName')\"/>\r\n                        {{$t('Customer Name')}}\r\n                    </th>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('date')\"/>\r\n                        {{$t('Date')}}\r\n                    </th>\r\n                    <th>{{$t('Edit')}}</th>\r\n                </thead>\r\n                <tbody>\r\n                    <tr v-for = \"sale in filteredSales\" v-bind:key = \"sale.id\" class=\"table-bordered\">\r\n                        <td>{{sale.id}}</td>\r\n                        <td>{{sale.name}}</td>\r\n                        <td>{{sale.num}}</td>\r\n                        <td>{{sale.price}}</td>\r\n                        <td>{{sale.total}}</td>\r\n                        <td>{{sale.productId}}</td>\r\n                        <td>{{sale.customerName}}</td>\r\n                        <td>{{sale.date}}</td>\r\n                        <td>\r\n                            <fa icon=\"rotate-left\" type=\"button\" data-bs-toggle=\"modal\" data-bs-target=\"#returnSale\" @click=\"passSale(sale)\"/>&nbsp;\r\n                            <fa icon=\"edit\" type=\"button\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\" data-bs-whatever=\"@mdo\" @click=\"passSale(sale)\"/>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n        <h5>{{$t('Total stock')}}: {{total}}</h5>\r\n         <img src=\"/static/Others/pdf.png\" width=\"38\" height=\"35\" type=\"button\" @click=\"downloadPDF\"/>\r\n        &nbsp\r\n        <img src=\"/static/Others/xlsx.png\" width=\"35\" height=\"35\" type=\"button\" @click=\"downloadExcel\"/>\r\n    </div>\r\n    \r\n    <!--Page navigation bar-->\r\n    <nav class=\"navbar\">\r\n        <div class=\"container-fluid\">\r\n            <h5>Total Pages: {{this.totalPages}}</h5>\r\n            <a class=\"navbar-brand\"></a>\r\n            <nav aria-label=\"Page navigation example\">\r\n                <ul class=\"pagination\">\r\n                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\" @click=\"pagination(this.pageNum - 1)\">{{$t('Previous')}}</a></li>\r\n                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\" @click=\"pagination(0)\">{{this.pageNum+1}}</a></li>\r\n                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\" @click=\"pagination(pageNum+1)\">{{$t('Next')}}</a></li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    </nav>\r\n</template>\r\n\r\n<script>\r\nimport SaleService from '@/services/Sale/SaleService'\r\nimport CustomerService from '@/services/Customer/CustomerService'\r\nimport axios from 'axios';\r\nimport jsPDF from 'jspdf';\r\nimport autoTable from 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx'\r\n\r\nfunction s2ab(s) {\r\n  // Convert a string to an ArrayBuffer\r\n  const buf = new ArrayBuffer(s.length);\r\n  const view = new Uint8Array(buf);\r\n  for (let i = 0; i < s.length; i++) {\r\n    view[i] = s.charCodeAt(i) & 0xFF;\r\n  }\r\n  return buf;\r\n}\r\nexport default {\r\n    name: 'Sales',\r\n    data(){\r\n        return{\r\n            itemsPerPage: 5,//the number of customer shown in one page\r\n            pageNum: 0,//store current page number\r\n            sales: [],\r\n            fixedSales: [],\r\n            search:'',//store search content\r\n            customers: [],\r\n            startDate: '',\r\n            endDate: '',\r\n            tempReturnNum: '',\r\n            editing: false,\r\n            isReturned: false,\r\n            isEdited: false,\r\n            hasQuantityError: false,\r\n            priceError: false,\r\n            invalidQuantity: false,\r\n            customerName: '',\r\n            pdfIconSize: '2em',\r\n            excelIconSize: '2em',\r\n        }\r\n    },\r\n    methods:{\r\n        //Get all sales records\r\n        async getSales(){\r\n            await SaleService.getSales().then((response)=>{\r\n                this.sales = response.data;\r\n                this.fixedSales = response.data;\r\n            });\r\n        },\r\n        //Get sales records within given dates\r\n        getSalesWithinGivenDates(){\r\n            SaleService.getSalesWithinGivenDates(this.startDate,this.endDate).then((response)=>{\r\n                this.sales = response.data;\r\n            });\r\n        },\r\n        //Get all customers\r\n        getCustomers(){\r\n            CustomerService.getCustomers().then((response)=>{\r\n                this.customers = response.data;\r\n            })\r\n        },\r\n        //Sort sales records of a given field\r\n        sort(field){\r\n            SaleService.sort(this.pageNum, this.itemsPerPage, field).then((response)=>{\r\n                this.sales = response.data;\r\n            });\r\n        },\r\n        //Set the number of records shown in one page\r\n        pagination(pageNum){\r\n            this.pageNum = pageNum;\r\n            if(this.pageNum==-1) {\r\n                this.pageNum=0;\r\n                return;\r\n            }\r\n            SaleService.pagination(pageNum,this.itemsPerPage).then((response)=>{\r\n                this.sales = response.data;\r\n            });\r\n        },\r\n        //Set the number of records shown in one page\r\n        changeItemPerPage(num){\r\n            this.itemsPerPage = num;\r\n            this.pagination(this.pageNum,this.itemsPerPage);\r\n        },\r\n        //Update or return a sales record\r\n        updateSale(updateType){\r\n            if (this.hasQuantityError || this.priceError ||this.invalidQuantity) {\r\n                alert('Please correct the errors before submitting.');\r\n                return;\r\n            }\r\n            else{\r\n                 axios\r\n                .put(`updateSale`, {\r\n                    id: this.$refs.id.value,\r\n                    name: this.$refs.name.value,\r\n                    num: this.$refs.num.value,\r\n                    total: this.$refs.total.value,\r\n                    price: this.$refs.price.value,\r\n                    customerName: this.customerName,\r\n                    productId: this.$refs.productId.value,\r\n                    returnPrice: this.$refs.returnPrice.value,\r\n                    returnNum: this.$refs.returnNum.value,\r\n                    date: this.$refs.date.value\r\n                },{params:{updateType: updateType}})\r\n                .then((response) => {\r\n                    if(updateType == 'return'){\r\n                        this.isReturned = true\r\n                        this.isEdited = false\r\n                        this.hasQuantityError = false\r\n                        this.invalidQuantity = false\r\n                        this.priceError = false\r\n                    }\r\n                    else{\r\n                        this.isEdited = true\r\n                        this.isReturned = false\r\n                        this.hasQuantityError = false\r\n                        this.invalidQuantity = false\r\n                        this.priceError = false\r\n                    }\r\n                    this.getSales()\r\n                });\r\n            }\r\n        },\r\n        //Pass the sales info to the edit form\r\n        passSale(sale){\r\n            this.editing = true\r\n            this.hasQuantityError = false\r\n            this.priceError = false\r\n            this.invalidQuantity = false\r\n            this.$refs.id.value = sale.id;\r\n            this.$refs.name.value = sale.name;\r\n            this.$refs.num.value = sale.num;\r\n            this.$refs.returnNum.value = sale.num;\r\n            this.$refs.total.value = sale.total;\r\n            this.$refs.price.value = sale.price,\r\n            this.$refs.returnPrice.value = sale.price,\r\n            this.$refs.productId.value = sale.productId,\r\n            this.customerName = sale.customerName,\r\n            this.$refs.date.value = sale.date\r\n            this.tempReturnNum = sale.num;\r\n        },\r\n        //Check if the input quantity is valid\r\n        validateQuantity(quantity) {\r\n              const quantityRegex = /^[1-9]\\d*$/;\r\n              if (!quantityRegex.test(quantity)) {\r\n                this.hasQuantityError = true\r\n              } else if(quantity > this.tempReturnNum){\r\n                this.invalidQuantity = true\r\n              }else {\r\n                this.hasQuantityError = false\r\n                this.invalidQuantity = false\r\n              }\r\n        },\r\n        //Check if the input price is valid\r\n        validatePrice(price) {\r\n              const priceRegex = /^[1-9]\\d*(\\.\\d{1,2})?$/;\r\n              if (!priceRegex.test(price)) {\r\n                this.priceError = true;\r\n              } else {\r\n                this.priceError = false;\r\n              }\r\n        },\r\n        //Download the sales form in pdf format\r\n        downloadPDF(){\r\n            const columns = [\r\n                    { header: 'Order No.', dataKey: 'id' },\r\n                    { header: 'Customer Name', dataKey: 'customerName' },\r\n                    { header: 'Product ID', dataKey: 'productId' },\r\n                    { header: 'Name', dataKey: 'name' },\r\n                    { header: 'Quantity', dataKey: 'num' },\r\n                    { header: 'Sale Price', dataKey: 'price' },\r\n                    { header: 'Total', dataKey: 'total' }\r\n                ];\r\n            const pdf = new jsPDF();\r\n            //text is placed using x, y coordinates\r\n            pdf.setFontSize(20).text(\"Sales History\", 80, 10);\r\n            //use autoTable plugin\r\n            autoTable(pdf, {\r\n                columns,\r\n                body: this.sales,\r\n                margin:{top: 30}\r\n            });\r\n            //show total stock\r\n            pdf.setFontSize(16).text('Total stock: ' + this.total, 90, 20);\r\n            //download pdf\r\n            pdf.save(\"Sales.pdf\");\r\n        },\r\n        //Download the sales form in excel format\r\n        downloadExcel() {\r\n            const filteredSalesWithoutReturn = this.filteredSales.map(sales => {\r\n                return {\r\n                    OrderNo: sales.id,\r\n                    Name: sales.name,\r\n                    ProductID: sales.productId,\r\n                    Quantity: sales.num,\r\n                    Price: sales.price,\r\n                    Total: sales.total,\r\n                    Customer: sales.customerName,\r\n                    Date: sales.date,\r\n                    };\r\n            });\r\n\r\n           // Create a new workbook\r\n           const wb = XLSX.utils.book_new();\r\n           // Add a new worksheet to the workbook\r\n           const ws = XLSX.utils.json_to_sheet(filteredSalesWithoutReturn);\r\n           // Add the worksheet to the workbook\r\n           XLSX.utils.book_append_sheet(wb, ws, 'Sales');\r\n           // Write the workbook to a binary string\r\n           const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });\r\n           // Convert the binary string to a Blob object\r\n           const blob = new Blob([s2ab(wbout)], { type: 'application/octet-stream' });\r\n           // Create a temporary link to the file and trigger a download\r\n           const url = window.URL.createObjectURL(blob);\r\n           const link = document.createElement('a');\r\n           link.href = url;\r\n           link.download = 'Sales History.xlsx';\r\n           document.body.appendChild(link);\r\n           link.click();\r\n           document.body.removeChild(link);\r\n        }\r\n    },\r\n    async created(){\r\n        await this.getSales()\r\n        this.getCustomers()\r\n        this.itemsPerPage = this.sales.length\r\n    },\r\n    computed:{\r\n        //Filter sales records according to the product name\r\n        filteredSales(){\r\n            return this.sales.filter(sale => sale.name.toLowerCase().includes(this.search.toLowerCase()));\r\n        },\r\n        //Filter customers according to user input\r\n        filteredCustomers(){\r\n            return this.customers.filter(customer => customer.name.toLowerCase().includes(this.customerName.toLowerCase()));\r\n        },\r\n        //Caculate total price of sales records\r\n        caculateTotal(){\r\n            return this.sales.map(sale => Number(sale.num) * Number(sale.sell_price))\r\n        },\r\n        //Caculate total number of sales records\r\n        total(){\r\n            return this.sales.reduce((total,curr)=>(total=total+curr.num),0);\r\n        },\r\n        //Calculate total pages of sales records\r\n        totalPages(){\r\n            return (Math.ceil(this.fixedSales.length / this.itemsPerPage))\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}