{"ast":null,"code":"import PurchaseService from '@/services/Purchase/PurchaseService';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport * as XLSX from 'xlsx';\nfunction s2ab(s) {\n  // Convert a string to an ArrayBuffer\n  const buf = new ArrayBuffer(s.length);\n  const view = new Uint8Array(buf);\n  for (let i = 0; i < s.length; i++) {\n    view[i] = s.charCodeAt(i) & 0xFF;\n  }\n  return buf;\n}\nexport default {\n  name: 'Purchases',\n  data() {\n    return {\n      itemsPerPage: 5,\n      //the number of customer shown in one page\n      pageNum: 0,\n      //store current page number\n      purchases: [],\n      fixedPurchases: [],\n      search: '',\n      //store search content\n      startDate: '',\n      endDate: '',\n      isSuccess: false,\n      editing: false,\n      isEdited: false,\n      pdfIconSize: '2em',\n      excelIconSize: '2em'\n    };\n  },\n  methods: {\n    //Get all returned purchase records\n    async getReturnPurchases() {\n      await PurchaseService.getReturnPurchases().then(response => {\n        this.purchases = response.data;\n        this.fixedPurchases = response.data;\n      });\n    },\n    //Sort returned purchase records of a given field\n    sort(field) {\n      PurchaseService.sortReturnPurchases(this.pageNum, this.itemsPerPage, field).then(response => {\n        this.purchases = response.data;\n      });\n    },\n    //Get returned purchase records within given dates\n    getPurchasesWithinGivenDates() {\n      PurchaseService.getReturnPurchasesWithinGivenDates(this.startDate, this.endDate).then(response => {\n        this.purchases = response.data;\n      });\n    },\n    //Set the number of records shown in one page\n    pagination(pageNum) {\n      this.pageNum = pageNum;\n      if (this.pageNum == -1) {\n        this.pageNum = 0;\n        return;\n      }\n      console.log(this.pageNum);\n      PurchaseService.returnPagination(pageNum, this.itemsPerPage).then(response => {\n        this.purchases = response.data;\n      });\n    },\n    //Set the number of records shown in one page\n    changeItemPerPage(num) {\n      this.itemsPerPage = num;\n      this.pagination(this.pageNum, this.itemsPerPage);\n    },\n    //Download the returned purchase table in pdf format\n    downloadPDF() {\n      const columns = [{\n        header: 'Order No.',\n        dataKey: 'id'\n      }, {\n        header: 'Product ID',\n        dataKey: 'productId'\n      }, {\n        header: 'Name',\n        dataKey: 'name'\n      }, {\n        header: 'Type',\n        dataKey: 'type'\n      }, {\n        header: 'Quantity',\n        dataKey: 'num'\n      }, {\n        header: 'Return Price',\n        dataKey: 'returnPrice'\n      }, {\n        header: 'Total',\n        dataKey: 'total'\n      }, {\n        header: 'Description',\n        dataKey: 'remarks'\n      }];\n      const pdf = new jsPDF();\n      //text is placed using x, y coordinates\n      pdf.setFontSize(20).text(\"Returned Purchases\", 80, 10);\n      //use autoTable plugin\n      autoTable(pdf, {\n        columns,\n        body: this.purchases,\n        margin: {\n          top: 30\n        }\n      });\n      //show total stock\n      pdf.setFontSize(16).text('Total returned quantity: ' + this.total, 80, 20);\n      //download pdf\n      pdf.save(\"ReturnedPurchases.pdf\");\n    },\n    //Download the returned purchase table in excel format\n    downloadExcel() {\n      const filteredReturnedPurchases = this.filteredPurchases.map(purchases => {\n        return {\n          PurchaseID: purchases.id,\n          Name: purchases.name,\n          Type: purchases.type,\n          Quantity: purchases.num,\n          ReturnPrice: purchases.returnPrice,\n          Total: purchases.total,\n          ProductID: purchases.productId,\n          SupplierName: purchases.supplierName,\n          Description: purchases.remarks,\n          Date: purchases.date\n        };\n      });\n      // Create a new workbook\n      const wb = XLSX.utils.book_new();\n\n      // Add a new worksheet to the workbook\n      const ws = XLSX.utils.json_to_sheet(filteredReturnedPurchases);\n\n      // Add the worksheet to the workbook\n      XLSX.utils.book_append_sheet(wb, ws, 'Purchases');\n\n      // Write the workbook to a binary string\n      const wbout = XLSX.write(wb, {\n        bookType: 'xlsx',\n        type: 'binary'\n      });\n\n      // Convert the binary string to a Blob object\n      const blob = new Blob([s2ab(wbout)], {\n        type: 'application/octet-stream'\n      });\n\n      // Create a temporary link to the file and trigger a download\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'Returned Purchases.xlsx';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  },\n  async created() {\n    await this.getReturnPurchases();\n    this.itemsPerPage = this.purchases.length;\n  },\n  computed: {\n    //Filter returned purchase records accoring to the product name\n    filteredPurchases() {\n      return this.purchases.filter(purchase => purchase.name.toLowerCase().includes(this.search.toLowerCase()));\n    },\n    //Calculate total number of returned purchase records\n    total() {\n      return this.purchases.reduce((total, curr) => total = total + curr.returnNum, 0);\n    },\n    //Calculate total pages of returned purchase records\n    totalPages() {\n      return Math.ceil(this.fixedPurchases.length / this.itemsPerPage);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["PurchaseService","jsPDF","autoTable","XLSX","s2ab","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","name","data","itemsPerPage","pageNum","purchases","fixedPurchases","search","startDate","endDate","isSuccess","editing","isEdited","pdfIconSize","excelIconSize","methods","getReturnPurchases","then","response","sort","field","sortReturnPurchases","getPurchasesWithinGivenDates","getReturnPurchasesWithinGivenDates","pagination","console","log","returnPagination","changeItemPerPage","num","downloadPDF","columns","header","dataKey","pdf","setFontSize","text","body","margin","top","total","save","downloadExcel","filteredReturnedPurchases","filteredPurchases","map","PurchaseID","id","Name","Type","type","Quantity","ReturnPrice","returnPrice","Total","ProductID","productId","SupplierName","supplierName","Description","remarks","Date","date","wb","utils","book_new","ws","json_to_sheet","book_append_sheet","wbout","write","bookType","blob","Blob","url","window","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","created","computed","filter","purchase","toLowerCase","includes","reduce","curr","returnNum","totalPages","Math","ceil"],"sourceRoot":"","sources":["C:\\Users\\SuperW\\Desktop\\暑期实习\\vue-frontend\\src\\components\\Procurement\\Purchase\\ReturnPurchase.vue"],"sourcesContent":["// Made by GRPTeam202205\r\n<template>\r\n    <!--Search bar-->\r\n    <nav class=\"navbar\">\r\n        <div class=\"container-fluid\">\r\n            <!--Drop-down menu to choose the number of Records Per Page-->\r\n            <div class=\"dropdown\">\r\n                <button class=\"btn dropdown-toggle\" type=\"button\" id=\"dropdownMenu2\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    {{$t('Records Per Page')}}\r\n                </button>\r\n                <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2\">\r\n                    <li><button class=\"dropdown-item\" type=\"button\" @click=\"changeItemPerPage(5)\">5</button></li>\r\n                    <li><button class=\"dropdown-item\" type=\"button\" @click=\"changeItemPerPage(10)\">10</button></li>\r\n                    <li><button class=\"dropdown-item\" type=\"button\" @click=\"changeItemPerPage(15)\">15</button></li>\r\n                </ul>\r\n            </div>\r\n            <a class=\"navbar-brand\"></a>\r\n            <form class=\"d-flex\" role=\"search\">\r\n            <input class=\"form-control me-2\" type=\"search\" :placeholder=\"$t('Search')\" aria-label=\"Search\" v-model=\"search\">\r\n            <button class=\"btn btn-outline-success\" type=\"submit\">{{$t('Search')}}</button>\r\n            </form>\r\n        </div>\r\n    </nav>\r\n\r\n    <!--Purchase List-->\r\n    <div class=\"container\">\r\n        <h1 class=\"test-center\">{{$t('Purchase.Returned Purchases')}}</h1>\r\n        <div class=\"alert alert-success\" v-if=\"isSuccess\">\r\n            {{$t('Purchase.The purchase is returned successfully! Refresh the page to see the result.')}}\r\n        </div>\r\n        <br>\r\n        <div class=\"row align-items-center\">\r\n            <div class=\"col\"></div>\r\n            <div class=\"col-2\">\r\n                {{$t('Start Date:')}} <input  type=\"date\" class=\"form-control me-2\" :placeholder=\"$t('Choose a start date')\" id= \"date\" v-model=\"startDate\">\r\n            </div>\r\n            <div class=\"col-2\">\r\n                {{$t('End Date:')}} <input type=\"date\" class=\"form-control\" :placeholder=\"$t('Choose an end date')\" id= \"date\" v-model=\"endDate\">\r\n            </div>\r\n            <div class=\"col-auto\">\r\n            <img src=\"/static/check.png\" width=\"20\" height=\"20\" type=\"submit\" @click=\"getPurchasesWithinGivenDates\"/>\r\n            </div>\r\n            <div class=\"col\"></div>\r\n        </div>\r\n        <br>\r\n        <div class=\"table-responsive\">\r\n            <table class=\"table table-stripped\">\r\n                <thead>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-numeric-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('id')\"/>\r\n                        {{$t('Purchase.Purchase ID')}}\r\n                    </th>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('name')\"/>\r\n                        {{$t('Name')}}\r\n                    </th>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('type')\"/>\r\n                        {{$t('Type')}}\r\n                    </th>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('num')\"/>\r\n                        {{$t('Quantity')}}\r\n                    </th>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('returnPrice')\"/>\r\n                        {{$t('Return Price')}}\r\n                    </th>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('total')\"/>\r\n                        {{$t('Total')}}\r\n                    </th>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('productId')\"/>\r\n                        {{$t('Product ID')}}\r\n                    </th>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('supplierName')\"/>\r\n                        {{$t('Supplier Name')}}\r\n                    </th>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('remarks')\"/>\r\n                        {{$t('Description')}}\r\n                    </th>\r\n                </thead>\r\n                <tbody>\r\n                    <tr v-for = \"purchase in filteredPurchases\" v-bind:key = \"purchase.id\" class=\"table-bordered\">\r\n                        <td>{{purchase.id}}</td>\r\n                        <td>{{purchase.name}}</td>\r\n                        <td><span class=\"badge badge-success rounded-pill\">{{purchase.type}}</span></td>\r\n                        <td>{{purchase.returnNum}}</td>\r\n                        <td>{{purchase.returnPrice}}</td>\r\n                        <td>{{purchase.returnTotal}}</td>\r\n                        <td>{{purchase.productId}}</td>\r\n                        <td>{{purchase.supplierName}}</td>\r\n                        <td>{{purchase.remarks}}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n        <h5>{{$t('Purchase.Total return purchases')}}: {{total}}</h5>\r\n        <img src=\"/static/Others/pdf.png\" width=\"38\" height=\"35\" type=\"button\" @click=\"downloadPDF\"/>\r\n        &nbsp\r\n        <img src=\"/static/Others/xlsx.png\" width=\"35\" height=\"35\" type=\"button\" @click=\"downloadExcel\"/>\r\n    </div>\r\n    \r\n    <!--Page navigation bar-->\r\n    <nav class=\"navbar\">\r\n        <div class=\"container-fluid\">\r\n            <h5>Total Pages: {{this.totalPages}}</h5>\r\n            <a class=\"navbar-brand\"></a>\r\n            <nav aria-label=\"Page navigation example\">\r\n                <ul class=\"pagination\">\r\n                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\" @click=\"pagination(this.pageNum - 1)\">{{$t('Previous')}}</a></li>\r\n                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\" @click=\"pagination(0)\">{{this.pageNum+1}}</a></li>\r\n                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\" @click=\"pagination(pageNum+1)\">{{$t('Next')}}</a></li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    </nav>\r\n</template>\r\n\r\n<script>\r\nimport PurchaseService from '@/services/Purchase/PurchaseService';\r\nimport jsPDF from 'jspdf';\r\nimport autoTable from 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx'\r\n\r\nfunction s2ab(s) {\r\n  // Convert a string to an ArrayBuffer\r\n  const buf = new ArrayBuffer(s.length);\r\n  const view = new Uint8Array(buf);\r\n  for (let i = 0; i < s.length; i++) {\r\n    view[i] = s.charCodeAt(i) & 0xFF;\r\n  }\r\n  return buf;\r\n}\r\nexport default {\r\n    name: 'Purchases',\r\n    data(){\r\n        return{\r\n            itemsPerPage: 5,//the number of customer shown in one page\r\n            pageNum: 0,//store current page number\r\n            purchases: [],\r\n            fixedPurchases: [],\r\n            search:'',//store search content\r\n            startDate: '',\r\n            endDate: '',\r\n            isSuccess: false,\r\n            editing: false,\r\n            isEdited: false,\r\n            pdfIconSize: '2em',\r\n            excelIconSize: '2em',\r\n        }\r\n    },\r\n    methods:{\r\n        //Get all returned purchase records\r\n        async getReturnPurchases(){\r\n            await PurchaseService.getReturnPurchases().then((response)=>{\r\n                this.purchases = response.data;\r\n                this.fixedPurchases = response.data\r\n            });\r\n        },\r\n        //Sort returned purchase records of a given field\r\n        sort(field){\r\n            PurchaseService.sortReturnPurchases(this.pageNum, this.itemsPerPage, field).then((response)=>{\r\n                this.purchases = response.data;\r\n            });\r\n        },\r\n        //Get returned purchase records within given dates\r\n        getPurchasesWithinGivenDates(){\r\n            PurchaseService.getReturnPurchasesWithinGivenDates(this.startDate,this.endDate).then((response)=>{\r\n                this.purchases = response.data;\r\n            });\r\n        },\r\n        //Set the number of records shown in one page\r\n        pagination(pageNum){\r\n            this.pageNum = pageNum;\r\n            if(this.pageNum==-1) {\r\n                this.pageNum=0;\r\n                return;\r\n            }\r\n            console.log(this.pageNum) ;\r\n            PurchaseService.returnPagination(pageNum,this.itemsPerPage).then((response)=>{\r\n                this.purchases = response.data;\r\n            });\r\n        },\r\n        //Set the number of records shown in one page\r\n        changeItemPerPage(num){\r\n            this.itemsPerPage = num;\r\n            this.pagination(this.pageNum,this.itemsPerPage);\r\n        },\r\n        //Download the returned purchase table in pdf format\r\n        downloadPDF(){\r\n            const columns = [\r\n                    { header: 'Order No.', dataKey: 'id' },\r\n                    { header: 'Product ID', dataKey: 'productId' },\r\n                    { header: 'Name', dataKey: 'name' },\r\n                    { header: 'Type', dataKey: 'type' },\r\n                    { header: 'Quantity', dataKey: 'num' },\r\n                    { header: 'Return Price', dataKey: 'returnPrice' },\r\n                    { header: 'Total', dataKey: 'total' },\r\n                    { header: 'Description', dataKey: 'remarks' }\r\n                ];\r\n            const pdf = new jsPDF();\r\n            //text is placed using x, y coordinates\r\n            pdf.setFontSize(20).text(\"Returned Purchases\", 80, 10);\r\n            //use autoTable plugin\r\n            autoTable(pdf, {\r\n                columns,\r\n                body: this.purchases,\r\n                margin:{top: 30}\r\n            });\r\n            //show total stock\r\n            pdf.setFontSize(16).text('Total returned quantity: ' + this.total, 80, 20);\r\n            //download pdf\r\n            pdf.save(\"ReturnedPurchases.pdf\");\r\n        },\r\n        //Download the returned purchase table in excel format\r\n        downloadExcel() {\r\n             const filteredReturnedPurchases = this.filteredPurchases.map(purchases => {\r\n                return {\r\n                    PurchaseID: purchases.id,\r\n                    Name: purchases.name,\r\n                    Type: purchases.type,\r\n                    Quantity: purchases.num,\r\n                    ReturnPrice: purchases.returnPrice,\r\n                    Total: purchases.total,\r\n                    ProductID: purchases.productId,\r\n                    SupplierName: purchases.supplierName,\r\n                    Description: purchases.remarks,\r\n                    Date: purchases.date,\r\n                    };\r\n             });\r\n            // Create a new workbook\r\n            const wb = XLSX.utils.book_new();\r\n\r\n            // Add a new worksheet to the workbook\r\n            const ws = XLSX.utils.json_to_sheet(filteredReturnedPurchases);\r\n\r\n            // Add the worksheet to the workbook\r\n            XLSX.utils.book_append_sheet(wb, ws, 'Purchases');\r\n\r\n            // Write the workbook to a binary string\r\n            const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });\r\n\r\n            // Convert the binary string to a Blob object\r\n            const blob = new Blob([s2ab(wbout)], { type: 'application/octet-stream' });\r\n\r\n            // Create a temporary link to the file and trigger a download\r\n            const url = window.URL.createObjectURL(blob);\r\n            const link = document.createElement('a');\r\n            link.href = url;\r\n            link.download = 'Returned Purchases.xlsx';\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n        }\r\n    },\r\n    async created(){\r\n        await this.getReturnPurchases()\r\n        this.itemsPerPage = this.purchases.length\r\n    },\r\n    computed:{\r\n        //Filter returned purchase records accoring to the product name\r\n        filteredPurchases(){\r\n            return this.purchases.filter(purchase => purchase.name.toLowerCase().includes(this.search.toLowerCase()));\r\n        },\r\n        //Calculate total number of returned purchase records\r\n        total(){\r\n            return this.purchases.reduce((total,curr)=>(total=total+curr.returnNum),0);\r\n        },\r\n        //Calculate total pages of returned purchase records\r\n        totalPages(){\r\n            return (Math.ceil(this.fixedPurchases.length / this.itemsPerPage))\r\n        }\r\n    }\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}