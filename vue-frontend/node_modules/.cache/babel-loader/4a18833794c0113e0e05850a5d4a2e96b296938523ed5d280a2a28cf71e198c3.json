{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      userNameNotFound: false,\n      //true if the user is not found, else false\n      emailNotFound: false,\n      //true if the email is not found, else false\n      success: false,\n      //true if the email is sent to the user successfully, else false\n      userName: '',\n      //store the name of the user\n      email: '',\n      //store the email of the user\n      loginBg: 'url(' + require('@/assets/bg.jpg') + ')' //store the background image\n    };\n  },\n\n  methods: {\n    //send email to the user to inform him of his password\n    sendEmail() {\n      axios.get('sendEmail', {\n        params: {\n          userName: this.userName,\n          email: this.email\n        }\n      }).then(response => {\n        if (response.data == 'userNameNotFound') {\n          this.userNameNotFound = true;\n          this.emailNotFound = false;\n          this.success = false;\n        } else if (response.data == 'emailNotFound') {\n          this.userNameNotFound = false;\n          this.emailNotFound = true;\n          this.success = false;\n        } else {\n          this.success = true;\n          this.userNameNotFound = false;\n          this.emailNotFound = false;\n        }\n      });\n    },\n    //go to the login page\n    goToLoginPage() {\n      this.$router.push({\n        path: '/'\n      });\n    }\n  },\n  mounted() {\n    //add backgroun image\n    document.body.style.backgroundSize = '100%';\n    document.body.style.backgroundImage = this.loginBg;\n  },\n  beforeUnmount() {\n    // Clear the backgroun before going to another page\n    document.body.style.backgroundImage = '';\n  }\n};","map":{"version":3,"mappings":";AA4CA,OAAOA,KAAI,MAAO,OAAM;AACxB,eAAe;EACbC,IAAG,GAAK;IACN,OAAO;MACHC,gBAAgB,EAAE,KAAK;MAAC;MACxBC,aAAa,EAAE,KAAK;MAAC;MACrBC,OAAO,EAAE,KAAK;MAAC;MACfC,QAAQ,EAAE,EAAE;MAAC;MACbC,KAAK,EAAE,EAAE;MAAC;MACVC,OAAO,EAAE,MAAM,GAACC,OAAO,CAAC,iBAAiB,CAAC,GAAC,GAAG;IAClD;EACF,CAAC;;EACDC,OAAO,EAAE;IACP;IACAC,SAAS,GAAE;MACPV,KAAI,CACCW,GAAG,CAAC,WAAW,EAAE;QAACC,MAAM,EAAC;UAACP,QAAQ,EAAE,IAAI,CAACA,QAAQ;UAC1CC,KAAK,EAAE,IAAI,CAACA;QAAK;MACzB,CAAC,EACAO,IAAI,CAAEC,QAAQ,IAAK;QAChB,IAAGA,QAAQ,CAACb,IAAI,IAAE,kBAAkB,EAAC;UACjC,IAAI,CAACC,gBAAe,GAAI,IAAI;UAC5B,IAAI,CAACC,aAAY,GAAI,KAAK;UAC1B,IAAI,CAACC,OAAM,GAAI,KAAK;QACxB,OACK,IAAGU,QAAQ,CAACb,IAAI,IAAE,eAAe,EAAC;UACnC,IAAI,CAACC,gBAAe,GAAI,KAAK;UAC7B,IAAI,CAACC,aAAY,GAAI,IAAI;UACzB,IAAI,CAACC,OAAM,GAAI,KAAK;QACxB,OACI;UACA,IAAI,CAACA,OAAM,GAAI,IAAI;UACnB,IAAI,CAACF,gBAAe,GAAI,KAAK;UAC7B,IAAI,CAACC,aAAY,GAAI,KAAK;QAC9B;MACJ,CAAC,CAAC;IACV,CAAC;IACD;IACAY,aAAa,GAAE;MACX,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;QAACC,IAAI,EAAC;MAAG,CAAC;IAChC;EACF,CAAC;EACDC,OAAM,GAAK;IACT;IACAC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,cAAa,GAAI,MAAK;IAC1CH,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACE,eAAc,GAAI,IAAI,CAACjB,OAAM;EACnD,CAAC;EACDkB,aAAY,GAAK;IACf;IACAL,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACE,eAAc,GAAI,EAAC;EACzC;AACF","names":["axios","data","userNameNotFound","emailNotFound","success","userName","email","loginBg","require","methods","sendEmail","get","params","then","response","goToLoginPage","$router","push","path","mounted","document","body","style","backgroundSize","backgroundImage","beforeUnmount"],"sourceRoot":"","sources":["C:\\Users\\Ella\\Desktop\\vue-frontend\\src\\components\\Login\\ForgetPassword.vue"],"sourcesContent":["//Made by GRPTeam202205\r\n<template>\r\n    <div class=\"form\">\r\n        <!-- Title of the page -->\r\n        <h2>\r\n            <span>{{$t('Forget Password')}}</span>\r\n        </h2>\r\n        <!-- Show the following message if the user name is not found -->\r\n        <div class=\"alert alert-danger\" v-if=\"userNameNotFound\">\r\n                {{$t('User Name does not exist!')}}\r\n        </div>\r\n        <!-- Show the following message if the email is not found -->\r\n        <div class=\"alert alert-danger\" v-if=\"emailNotFound\">\r\n                {{$t('Email is not correct!')}}\r\n        </div>\r\n        <!-- Show the following message if the password has been sent to the user email successfully  -->\r\n        <div class=\"alert alert-success\" v-if=\"success\">\r\n            {{$t('Your password has been sent to your email!')}}\r\n        </div>\r\n        <!-- Forget password form -->\r\n        <div class=\"form-area\">\r\n            <!-- User Name -->\r\n            <div class=\"form-group\">\r\n                <label for=\"userName\">{{$t('User Name')}}</label>\r\n                <input type=\"text\" class=\"form-control\" :placeholder=\"$t('e.g. Ella')\" maxlength=\"14\" id= \"userName\" v-model=\"userName\" required>    \r\n            </div>\r\n            <!-- Password -->\r\n            <div class=\"form-group\">\r\n                <label for=\"email\">{{$t('Email')}}</label>\r\n                <input type=\"email\" class=\"form-control\" :placeholder=\"$t('e.g. Ella@gmail.com')\" maxlength=\"50\" id= \"email\" v-model=\"email\" required>    \r\n            </div>\r\n            <div class=\"form-item login\">\r\n                <!-- Confirm button -->\r\n                <button @click=\"sendEmail\">{{$t('Confirm')}}</button>\r\n                <!-- Login link -->\r\n                <div class=\"forget\">\r\n                <a href=\"#\" @click=\"goToLoginPage\">{{$t('Login')}}</a>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nexport default {\r\n  data () {\r\n    return {\r\n        userNameNotFound: false,//true if the user is not found, else false\r\n        emailNotFound: false,//true if the email is not found, else false\r\n        success: false,//true if the email is sent to the user successfully, else false\r\n        userName: '',//store the name of the user\r\n        email: '',//store the email of the user\r\n        loginBg: 'url('+require('@/assets/bg.jpg')+')'//store the background image\r\n    }\r\n  },\r\n  methods: {\r\n    //send email to the user to inform him of his password\r\n    sendEmail(){\r\n        axios\r\n            .get('sendEmail', {params:{userName: this.userName,\r\n                    email: this.email}  \r\n            })\r\n            .then((response) => {\r\n                if(response.data=='userNameNotFound'){\r\n                    this.userNameNotFound = true;\r\n                    this.emailNotFound = false;\r\n                    this.success = false;\r\n                }\r\n                else if(response.data=='emailNotFound'){\r\n                    this.userNameNotFound = false;\r\n                    this.emailNotFound = true;\r\n                    this.success = false;\r\n                }\r\n                else{\r\n                    this.success = true;\r\n                    this.userNameNotFound = false;\r\n                    this.emailNotFound = false;\r\n                }\r\n            });\r\n    },\r\n    //go to the login page\r\n    goToLoginPage(){\r\n        this.$router.push({path:'/'})\r\n    }\r\n  },\r\n  mounted () {\r\n    //add backgroun image\r\n    document.body.style.backgroundSize = '100%'\r\n    document.body.style.backgroundImage = this.loginBg\r\n  },\r\n  beforeUnmount () {\r\n    // Clear the backgroun before going to another page\r\n    document.body.style.backgroundImage = ''\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.form {\r\n    width: 500px;\r\n    height: 500px;\r\n    background: #fff;\r\n    margin: 80px auto;\r\n}\r\n\r\n.form-area {\r\n    width: 400px;\r\n    margin-top: 90px;\r\n    margin-left: 50px;\r\n}\r\n\r\n.form-item {\r\n    width: 400px;\r\n    height: 42px;\r\n    position: relative;\r\n}\r\n\r\n.form-item.login {\r\n    margin-top: 60px;\r\n    border-radius: 5px;\r\n}\r\n.form-item button {\r\n    width: 101%;\r\n    height: 101%;\r\n    font-size: 18px;\r\n    border: 0;\r\n    outline: none;\r\n    background-color: #3b97b7;\r\n    color: #fff;\r\n    border-radius: 5px;\r\n}\r\n.forget {\r\n    margin: 15px 0 20px 5px;\r\n    font-size: 15px;\r\n}\r\n.forget a {\r\n    color: #9e9e9e;\r\n}\r\n\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}