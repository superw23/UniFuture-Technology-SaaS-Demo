{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport CustomerService from '@/services/Customer/CustomerService';\nimport SupplierService from '@/services/Supplier/SupplierService';\nimport BilibiliService from '@/services/Bilibili/BilibiliService';\nimport SaleService from '@/services/Sale/SaleService';\nexport default {\n  data() {\n    return {\n      quantity: '',\n      //store the name of the sale\n      remainingQuantity: '',\n      //store the remaining quantity of a certain product\n      price: '',\n      //store the name of the sale\n      productName: '',\n      //store the name of the sale\n      supplierName: '',\n      //store the name of the sale\n      customerName: '',\n      //store the name of the sale\n      tempSupplierName: '',\n      //store the name of the supplier temporarily\n      tempProductName: '',\n      //store the name of the product temporarily\n      tempCustomerName: '',\n      //store the name of the customer temporarily\n      date: '',\n      //store the name of the sale\n      productSearch: '',\n      //store search content\n      supplierSearch: '',\n      //store search content\n      customerSearch: '',\n      //store search content\n      isSuccess: false,\n      //true if the sale is added successfully, else false\n      productNotFound: false,\n      //true if the product is not found, else false\n      supplierNotFound: false,\n      //true if the supplier is not found, else false\n      customerNotFound: false,\n      //true if the customer is not found, else false\n      customerExistence: true,\n      //true if the customer exists, else false\n      supplierExistence: true,\n      //true if the supplier exists, else false\n      productExistence: true,\n      //true if the product exists, else false\n      availability: true,\n      //true if the number of products is available, else false\n      show: false,\n      //true if the remaining product can be shown\n      noAvailability: '',\n      //true if the number of products is not available, else false\n      suppliersWithGivenProduct: '',\n      //store suppliers for a given product\n      allSuppliers: [],\n      //store all suppliers\n      allProducts: [],\n      //store all products\n      allCustomers: [],\n      //store all customers\n      hasQuantityError: false,\n      priceError: false\n    };\n  },\n  methods: {\n    // add a new sale\n    //check the validity of all inputs\n    async onCreatePost() {\n      if (this.hasQuantityError || this.priceError) {\n        alert('Please correct the errors before submitting.');\n        return;\n      }\n      await this.checkSupplierExistence();\n      await this.checkCustomerExistence();\n      await this.checkProductExistence();\n      await this.checkAvailability();\n      this.addSale();\n    },\n    // pass the sale information to the backend\n    addSale() {\n      if (this.supplierExistence && this.customerExistence && this.productExistence && this.availability) {\n        axios.post(`addSale`, {\n          name: this.productName,\n          num: this.quantity,\n          price: this.price,\n          total: this.price * this.quantity,\n          customerName: this.customerName,\n          name: this.productName,\n          supplierName: this.supplierName,\n          date: this.date\n        }).then(response => {\n          this.isSuccess = true;\n          this.productNotFound = false;\n          this.supplierNotFound = false;\n          this.customerNotFound = false;\n          this.noAvailability = false;\n          this.productName = '',\n          //clear the form\n          this.quantity = '', this.price = '', this.customerName = '', this.supplierName = '', this.date = '';\n          this.priceError = false;\n        });\n        this.show = false;\n        this.hasQuantityError = false;\n        $('showRemaining').hide();\n      }\n      ;\n    },\n    //check the existence of the supplier in the database\n    async checkSupplierExistence() {\n      await axios.get('checkSupplierExistence', {\n        params: {\n          supplierName: this.supplierName\n        }\n      }).then(response => {\n        if (response.data == false) {\n          this.supplierNotFound = true;\n          this.supplierExistence = false;\n          this.isSuccess = false;\n          this.productNotFound = false;\n          this.customerNotFound = false;\n          this.noAvailability = false;\n        } else {\n          this.supplierExistence = true;\n        }\n      });\n    },\n    //check the customer of the supplier in the database\n    async checkCustomerExistence() {\n      await axios.get('checkCustomerExistence', {\n        params: {\n          customerName: this.customerName\n        }\n      }).then(response => {\n        if (response.data == false) {\n          this.customerNotFound = true;\n          this.customerExistence = false;\n          this.isSuccess = false;\n          this.productNotFound = false;\n          this.supplierNotFound = false;\n          this.noAvailability = false;\n        } else {\n          this.customerExistence = true;\n        }\n      });\n    },\n    //check the existence of the product in the database\n    async checkProductExistence() {\n      await axios.get('checkProductExistence', {\n        params: {\n          productName: this.productName,\n          supplierName: this.supplierName\n        }\n      }).then(response => {\n        if (response.data == false) {\n          this.productNotFound = true;\n          this.productExistence = false;\n          this.isSuccess = false;\n          this.supplierNotFound = false;\n          this.customerNotFound = false;\n          this.noAvailability = false;\n        } else {\n          this.productExistence = true;\n        }\n      });\n    },\n    //check the availability of the products in the database\n    async checkAvailability() {\n      await axios.get('checkAvailability', {\n        params: {\n          productName: this.productName,\n          supplierName: this.supplierName,\n          saleNum: this.quantity\n        }\n      }).then(response => {\n        if (response.data == false) {\n          this.noAvailability = true;\n          this.isSuccess = false;\n          this.productNotFound = false;\n          this.supplierNotFound = false;\n          this.customerNotFound = false;\n          this.availability = false;\n        } else {\n          this.noAvailability = false;\n        }\n      });\n    },\n    //Get all suppliers from the database\n    async getSuppliersWithGivenProduct() {\n      await SupplierService.getSuppliersWithGivenProduct(this.productName).then(response => {\n        this.suppliersWithGivenProduct = response.data;\n      });\n    },\n    //automatically fill in the sale form \n    auto() {\n      SaleService.getSaleContent(this.productName).then(response => {\n        if (response.data != '') {\n          this.productName = response.data.name, this.quantity = response.data.num, this.customerName = response.data.customerName, this.price = response.data.price, this.supplierName = response.data.supplierName, this.date = response.data.date;\n        }\n      });\n    },\n    //go to the add supplier page\n    jumpToAddCustomer() {\n      this.$router.push({\n        path: '/addCustomer'\n      });\n    },\n    //get all suppliers\n    getAllSuppliers() {\n      SupplierService.getSuppliers().then(response => {\n        this.allSuppliers = response.data;\n      });\n    },\n    //get all products\n    getAllInfo() {\n      BilibiliService.getDistinctProducts().then(response => {\n        this.allProducts = response.data;\n      });\n    },\n    //get all customers\n    getAllCustomers() {\n      CustomerService.getCustomers().then(response => {\n        this.allCustomers = response.data;\n      });\n    },\n    setSupplier() {\n      this.supplierName = this.tempSupplierName;\n    },\n    setProduct() {\n      this.productName = this.tempProductName;\n    },\n    setCustomer() {\n      this.customerName = this.tempCustomerName;\n    },\n    setTempSupplier(company) {\n      this.tempSupplierName = company;\n    },\n    setTempProduct(name) {\n      this.tempProductName = name;\n    },\n    setTempCustomer(name) {\n      this.tempCustomerName = name;\n    },\n    //Check if the input quantity is valid\n    validateQuantity() {\n      const quantityRegex = /^[1-9]\\d*$/;\n      if (!quantityRegex.test(this.quantity)) {\n        this.hasQuantityError = true;\n      } else {\n        this.hasQuantityError = false;\n      }\n    },\n    //Check if the input price is valid\n    validatePrice() {\n      const priceRegex = /^[1-9]\\d*(\\.\\d{1,2})?$/;\n      if (!priceRegex.test(this.price)) {\n        this.priceError = true;\n      } else {\n        this.priceError = false;\n      }\n    },\n    //Show remaining quantity of a given product\n    showRemainingQuantity() {\n      if (this.supplier != '' && this.name != '') {\n        BilibiliService.getRemainingQuantity(this.productName, this.supplierName).then(response => {\n          this.remainingQuantity = response.data;\n        });\n        this.show = true;\n        $('showRemaining').show();\n      }\n    }\n  },\n  computed: {\n    //Get required suppliers after searching\n    filteredSuppliers() {\n      return this.allSuppliers.filter(supplier => supplier.company.toLowerCase().includes(this.supplierSearch.toLowerCase()));\n    },\n    //Get required products after searching\n    filteredProducts() {\n      return this.allProducts.filter(product => product.name.toLowerCase().includes(this.productSearch.toLowerCase()));\n    },\n    //Get required customers after searching\n    filteredCustomers() {\n      return this.allCustomers.filter(customer => customer.name.toLowerCase().includes(this.customerSearch.toLowerCase()));\n    }\n  },\n  created() {\n    this.getAllSuppliers();\n    this.getAllInfo();\n    this.getAllCustomers();\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","CustomerService","SupplierService","BilibiliService","SaleService","data","quantity","remainingQuantity","price","productName","supplierName","customerName","tempSupplierName","tempProductName","tempCustomerName","date","productSearch","supplierSearch","customerSearch","isSuccess","productNotFound","supplierNotFound","customerNotFound","customerExistence","supplierExistence","productExistence","availability","show","noAvailability","suppliersWithGivenProduct","allSuppliers","allProducts","allCustomers","hasQuantityError","priceError","methods","onCreatePost","alert","checkSupplierExistence","checkCustomerExistence","checkProductExistence","checkAvailability","addSale","post","name","num","total","then","response","$","hide","get","params","saleNum","getSuppliersWithGivenProduct","auto","getSaleContent","jumpToAddCustomer","$router","push","path","getAllSuppliers","getSuppliers","getAllInfo","getDistinctProducts","getAllCustomers","getCustomers","setSupplier","setProduct","setCustomer","setTempSupplier","company","setTempProduct","setTempCustomer","validateQuantity","quantityRegex","test","validatePrice","priceRegex","showRemainingQuantity","supplier","getRemainingQuantity","computed","filteredSuppliers","filter","toLowerCase","includes","filteredProducts","product","filteredCustomers","customer","created"],"sourceRoot":"","sources":["C:\\Users\\SuperW\\Desktop\\暑期实习\\vue-frontend\\src\\components\\Sales\\Sale\\AddSale.vue"],"sourcesContent":["// Made by GRPTeam202205\r\n<template>\r\n    <!-- Add sale page -->\r\n    <div>\r\n        <!-- Title of the page -->\r\n        <h2>{{$t('Sale.Create New Sale')}}</h2>\r\n        <hr />\r\n\r\n        <!-- Find a product -->\r\n        <div class=\"modal fade\" id=\"addProduct\" tabindex=\"-1\" aria-labelledby=\"addProductLabel\" aria-hidden=\"true\">\r\n            <div class=\"modal-dialog\">\r\n                <div class=\"modal-content\">\r\n                    <div class=\"modal-header\">\r\n                        <h5 class=\"modal-title\" id=\"addProductLabel\">{{$t('Find a Product')}}</h5>\r\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                    </div>\r\n                    <div class=\"modal-body\">\r\n                        <div class=\"input-group rounded\">\r\n                            <input type=\"search\" class=\"form-control rounded\" :placeholder=\"$t('Search')\" v-model=\"productSearch\"/>\r\n                        </div>\r\n                        <ul class=\"list-group\">\r\n                            <li class=\"list-group-item\" v-for=\"product in filteredProducts\" :key=\"product.id\">\r\n                                <input class=\"form-check-input \" type=\"radio\" name=\"productRadio\" id=\"productRadio\" @click=\"setTempProduct(product.name)\" aria-label=\"...\">\r\n                                <span>{{product.name}}</span>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                    <div class=\"modal-footer\">\r\n                        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">{{$t('No')}}</button>\r\n                        <button type=\"button\" class=\"btn btn-primary\" data-bs-dismiss=\"modal\" @click=\"setProduct\">{{$t('Yes')}}</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <!-- Find a supplier -->\r\n        <div class=\"modal fade\" id=\"addSupplier\" tabindex=\"-1\" aria-labelledby=\"addSupplierLabel\" aria-hidden=\"true\">\r\n            <div class=\"modal-dialog modal-dialog-scrollable\">\r\n                <div class=\"modal-content\">\r\n                    <div class=\"modal-header\">\r\n                        <h5 class=\"modal-title\" id=\"addSupplierLabel\">{{$t('Find a Supplier')}}</h5>\r\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                    </div>\r\n                    <div class=\"modal-body\">\r\n                        <div class=\"input-group rounded\">\r\n                            <input type=\"search\" class=\"form-control rounded\" :placeholder=\"$t('Search')\" v-model=\"supplierSearch\"/>\r\n                        </div>\r\n                        <ul class=\"list-group\" v-if=\"productName\">\r\n                            <li class=\"list-group-item\" v-for=\"supplier in suppliersWithGivenProduct\" :key=\"supplier.id\">\r\n                                <input class=\"form-check-input me-1\" type=\"radio\" name=\"certainSuppliers\" id=\"certainSuppliers\" @click=\"setTempSupplier(supplier.company)\" aria-label=\"...\">\r\n                                {{supplier.company}}\r\n                            </li>\r\n                        </ul>\r\n                        <ul class=\"list-group\" v-else>\r\n                            <li class=\"list-group-item\" v-for=\"supplier in filteredSuppliers\" :key=\"supplier.id\">\r\n                                <input class=\"form-check-input \" type=\"radio\" name=\"supplierRadio\" id=\"supplierRadio\" @click=\"setTempSupplier(supplier.company)\" aria-label=\"...\">\r\n                                <span>{{supplier.company}}</span>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                    <div class=\"modal-footer\">\r\n                        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">{{$t('Cancel')}}</button>\r\n                        <button type=\"button\" class=\"btn btn-primary\" data-bs-dismiss=\"modal\" @click=\"setSupplier\">{{$t('OK')}}</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <!-- Find a customer -->\r\n        <div class=\"modal fade\" id=\"addCustomer\" tabindex=\"-1\" aria-labelledby=\"addCustomerLabel\" aria-hidden=\"true\">\r\n            <div class=\"modal-dialog\">\r\n                <div class=\"modal-content\">\r\n                    <div class=\"modal-header\">\r\n                        <h5 class=\"modal-title\" id=\"addCustomerLabel\">{{$t('Find a Customer')}}</h5>\r\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                    </div>\r\n                    <div class=\"modal-body\">\r\n                        <div class=\"input-group rounded\">\r\n                            <input type=\"search\" class=\"form-control rounded\" :placeholder=\"$t('Search')\" v-model=\"customerSearch\"/>\r\n                        </div>\r\n                        <ul class=\"list-group\">\r\n                            <li class=\"list-group-item\" v-for=\"customer in filteredCustomers\" :key=\"customer.id\">\r\n                                <input class=\"form-check-input \" type=\"radio\" name=\"customerRadio\" id=\"customerRadio\" @click=\"setTempCustomer(customer.name)\" aria-label=\"...\">\r\n                                <span>{{customer.name}}</span>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                    <div class=\"modal-footer\">\r\n                        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">{{$t('No')}}</button>\r\n                        <button type=\"button\" class=\"btn btn-primary\" data-bs-dismiss=\"modal\" @click=\"setCustomer\">{{$t('Yes')}}</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row col-md-4 offset-md-4\">\r\n            <!-- Show the following message if the sale is to the database successfully-->\r\n            <div class=\"alert alert-success\" v-if=\"isSuccess\">\r\n                {{$t('Sale.The sale is added successfully!')}}\r\n            </div>\r\n            <!-- Show the following message if the product is not found-->\r\n            <div class=\"alert alert-danger\" v-if=\"productNotFound\">\r\n                {{$t('Product is not found!')}}\r\n            </div>\r\n            <!-- Show the following message if the supplier is not found-->\r\n            <div class=\"alert alert-danger\" v-if=\"supplierNotFound\">\r\n                {{$t('Supplier is not found!')}}\r\n            </div>\r\n            <!-- Show the following message if the customer is not found-->\r\n            <div class=\"alert alert-danger\" v-if=\"customerNotFound\">\r\n                {{$t('Customer is not found!')}}\r\n            </div>\r\n            <!-- Show the following message if the sale is to the database successfully-->\r\n            <div class=\"alert alert-danger\" v-if=\"noAvailability\">\r\n                {{$t('The sale number exceeds the total stock in the inventory!')}}\r\n            </div>\r\n            <!-- Sale form to collect info of the sale to be added -->\r\n            <div class=\"panel panel-primary\">\r\n                <div class=\"panel-body\">\r\n                    <form @submit.prevent=\"onCreatePost\">\r\n                        <!-- Input name of the sale -->\r\n                        <label for=\"productName\">{{$t('Product Name')}}</label>\r\n                        <div class=\"input-group mb-3\">\r\n                            <input type=\"text\" list=\"datalist\" class=\"form-control\" :placeholder=\"$t('e.g., Chips')\" id= \"productName\" v-model=\"productName\" @blur=\"auto\" required>\r\n                            <datalist id=\"datalist\">\r\n                                <option v-for = \"product in filteredProducts\" :key = \"product.id\">{{product.name}}</option>   \r\n                            </datalist> \r\n                            <div class=\"input-group-append\" data-bs-toggle=\"modal\" data-bs-target=\"#addProduct\">\r\n                                <button class=\"input-group-text\" type=\"button\">\r\n                                    <i class=\"fa fa-search\" style=\"font-size:24px\" ></i>\r\n                                </button>\r\n                            </div> \r\n                        </div>\r\n                        <!-- Input supplier name of the sale -->\r\n                        <label for=\"supplierName\">{{$t('Supplier Name')}}</label>\r\n                        <div class=\"input-group mb-3\">\r\n                            <input type=\"text\" list=\"datalistSupplier\" class=\"form-control\" :placeholder=\"$t('e.g. Ella')\" id= \"supplierName\" v-model=\"supplierName\" required> \r\n                            <datalist id=\"datalistSupplier\">\r\n                                <option v-for = \"supplier in filteredSuppliers\" :key = \"supplier.id\">{{supplier.company}}</option>   \r\n                            </datalist>\r\n                            <div class=\"input-group-append\" data-bs-toggle=\"modal\" data-bs-target=\"#addSupplier\" @click=\"getSuppliersWithGivenProduct\">\r\n                                <button class=\"input-group-text\" type=\"button\">\r\n                                    <i class=\"fa fa-search\" style=\"font-size:24px\"></i>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <!-- Input quantity of the sale -->\r\n                        <div class=\"form-group\">\r\n                            <label for=\"quantity\">{{$t('Quantity')}}</label>\r\n                            <input type=\"text\" class=\"form-control\" :placeholder=\"$t('e.g. 20')\" id= \"quantity\" v-model=\"quantity\" @input=\"validateQuantity\" @focus=\"showRemainingQuantity\">\r\n                            <div v-if=\"hasQuantityError\" class=\"text-danger\">{{$t('Please input a valid quantity')}}</div>\r\n                            <div v-if=\"show\" id=\"showRemaining\">{{$t('Remaining Quantity:')}} {{remainingQuantity}}</div>\r\n                        </div>\r\n                        <!-- Input sale price of the sale -->\r\n                        <div class=\"form-group\">\r\n                            <label for=\"price\">{{$t('Sale.Sale Price')}}</label>\r\n                            <input type=\"text\" class=\"form-control\" :placeholder=\"$t('e.g. 20')\" id= \"price\" v-model=\"price\" @input=\"validatePrice\" required>\r\n                            <div v-if=\"priceError\" class=\"text-danger\">{{$t('Please input a valid sale price')}}</div>\r\n                        </div>\r\n                        <!-- Input customer name of the sale -->\r\n                        <label for=\"customerName\">{{$t('Customer Name')}}</label>\r\n                        <div class=\"input-group mb-3\">\r\n                            <input type=\"text\" list=\"datalistCustomer\" class=\"form-control\" :placeholder=\"$t('e.g. Ella')\" id= \"customerName\" v-model=\"customerName\" required>\r\n                            <datalist id=\"datalistCustomer\">\r\n                                <option v-for=\"customer in filteredCustomers\" :key=\"customer.id\">{{customer.name}}</option>   \r\n                            </datalist>\r\n                            <div class=\"input-group-append\" data-bs-toggle=\"modal\" data-bs-target=\"#addCustomer\">\r\n                                <button class=\"input-group-text\" type=\"button\">\r\n                                    <i class=\"fa fa-search\" style=\"font-size:24px\"></i>\r\n                                </button>\r\n                            </div>\r\n                            <div class=\"input-group-append\"  @click=\"jumpToAddCustomer\">\r\n                                <button class=\"input-group-text\" type=\"button\">\r\n                                    <i class=\"fa fa-plus\" style=\"font-size:24px\"></i>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <!-- Input date of the sale -->\r\n                        <div class=\"form-group\">\r\n                            <label for=\"date\">{{$t('Date')}}</label>\r\n                            <input type=\"date\" class=\"form-control\" id= \"date\" v-model=\"date\" required >    \r\n                        </div>\r\n                        <!-- Click the button to submit the sale form to the backend -->\r\n                        <div class=\"row align-items-center\">\r\n                            <div class=\"empty-row2\"></div>\r\n                            <div class=\"col-6\">\r\n                                <button type=\"submit\" class=\"btn btn-primary\">\r\n                                    {{$t('Sale.Add Sale')}}\r\n                                </button>\r\n                            </div>\r\n                            <div class=\"col-6\">\r\n                                <router-link :to=\"{name:'Sale'}\"><button type=\"button\" class=\"btn btn-outline-primary\">{{$t('Sale.View Sales')}}</button></router-link>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nimport CustomerService from '@/services/Customer/CustomerService'\r\nimport SupplierService from '@/services/Supplier/SupplierService'\r\nimport BilibiliService from '@/services/Bilibili/BilibiliService'\r\nimport SaleService from '@/services/Sale/SaleService'\r\nexport default {\r\n    data() {\r\n        return {\r\n            quantity: '',//store the name of the sale\r\n            remainingQuantity: '',//store the remaining quantity of a certain product\r\n            price: '',//store the name of the sale\r\n            productName: '',//store the name of the sale\r\n            supplierName: '',//store the name of the sale\r\n            customerName: '',//store the name of the sale\r\n            tempSupplierName: '',//store the name of the supplier temporarily\r\n            tempProductName: '',//store the name of the product temporarily\r\n            tempCustomerName: '',//store the name of the customer temporarily\r\n            date: '',//store the name of the sale\r\n            productSearch: '',//store search content\r\n            supplierSearch: '',//store search content\r\n            customerSearch: '',//store search content\r\n            isSuccess: false,//true if the sale is added successfully, else false\r\n            productNotFound: false,//true if the product is not found, else false\r\n            supplierNotFound: false,//true if the supplier is not found, else false\r\n            customerNotFound: false,//true if the customer is not found, else false\r\n            customerExistence : true,//true if the customer exists, else false\r\n            supplierExistence : true,//true if the supplier exists, else false\r\n            productExistence : true,//true if the product exists, else false\r\n            availability : true,//true if the number of products is available, else false\r\n            show: false,//true if the remaining product can be shown\r\n            noAvailability: '',//true if the number of products is not available, else false\r\n            suppliersWithGivenProduct: '',//store suppliers for a given product\r\n            allSuppliers: [],//store all suppliers\r\n            allProducts: [],//store all products\r\n            allCustomers: [],//store all customers\r\n            hasQuantityError: false,\r\n            priceError: false,\r\n        };\r\n    },\r\n    methods: {\r\n        // add a new sale\r\n        //check the validity of all inputs\r\n        async onCreatePost() {\r\n            if (this.hasQuantityError || this.priceError) {\r\n                alert('Please correct the errors before submitting.');\r\n                return;\r\n            }\r\n            await this.checkSupplierExistence()\r\n            await this.checkCustomerExistence()\r\n            await this.checkProductExistence()\r\n            await this.checkAvailability()\r\n            this.addSale()  \r\n        },\r\n        // pass the sale information to the backend\r\n        addSale(){ \r\n            if(this.supplierExistence&&this.customerExistence&&this.productExistence&&this.availability){\r\n                axios\r\n                    .post(`addSale`, {\r\n                        name: this.productName,\r\n                        num: this.quantity,\r\n                        price: this.price,\r\n                        total: this.price * this.quantity,\r\n                        customerName: this.customerName,\r\n                        name: this.productName,\r\n                        supplierName: this.supplierName,\r\n                        date: this.date\r\n                    })\r\n                    .then((response) => {\r\n                        this.isSuccess = true;\r\n                        this.productNotFound = false;\r\n                        this.supplierNotFound = false;\r\n                        this.customerNotFound = false;\r\n                        this.noAvailability = false;\r\n                        this.productName = '',//clear the form\r\n                        this.quantity = '',\r\n                        this.price = '',\r\n                        this.customerName = '',\r\n                        this.supplierName = '',\r\n                        this.date = ''\r\n                        this.priceError = false;\r\n                    })\r\n                    this.show = false\r\n                    this.hasQuantityError = false\r\n                    $('showRemaining').hide()\r\n            };\r\n        },\r\n        //check the existence of the supplier in the database\r\n        async checkSupplierExistence(){\r\n            await axios\r\n                .get('checkSupplierExistence', {params:{supplierName:this.supplierName}  \r\n                })\r\n                .then((response) => {\r\n                    if(response.data == false){\r\n                        this.supplierNotFound = true;\r\n                        this.supplierExistence = false;\r\n                        this.isSuccess = false;\r\n                        this.productNotFound = false;\r\n                        this.customerNotFound = false;\r\n                        this.noAvailability = false;\r\n                    }\r\n                    else{\r\n                        this.supplierExistence = true;\r\n                    }\r\n                });\r\n        },\r\n        //check the customer of the supplier in the database\r\n        async checkCustomerExistence(){\r\n            await axios\r\n                .get('checkCustomerExistence', {params:{customerName:this.customerName}  \r\n                })\r\n                .then((response) => {\r\n                    if(response.data == false){\r\n                        this.customerNotFound = true;\r\n                        this.customerExistence = false;\r\n                        this.isSuccess = false;\r\n                        this.productNotFound = false;\r\n                        this.supplierNotFound = false;\r\n                        this.noAvailability = false;\r\n                    }\r\n                    else{\r\n                        this.customerExistence = true;\r\n                    }\r\n                });\r\n        },\r\n        //check the existence of the product in the database\r\n        async checkProductExistence(){\r\n            await axios\r\n                .get('checkProductExistence', {params:{\r\n                    productName:this.productName,\r\n                    supplierName: this.supplierName\r\n                }})\r\n                .then((response) => {\r\n                    if(response.data == false){\r\n                        this.productNotFound = true;\r\n                        this.productExistence = false;\r\n                        this.isSuccess = false;\r\n                        this.supplierNotFound = false;\r\n                        this.customerNotFound = false;\r\n                        this.noAvailability = false;\r\n                    }\r\n                    else{\r\n                        this.productExistence = true;\r\n                    }\r\n                });\r\n        },\r\n        //check the availability of the products in the database\r\n        async checkAvailability(){\r\n            await axios\r\n                .get('checkAvailability', {params:{\r\n                    productName:this.productName,\r\n                    supplierName: this.supplierName,\r\n                    saleNum: this.quantity,\r\n                }})\r\n                .then((response) => {\r\n                    if(response.data == false){\r\n                        this.noAvailability = true;\r\n                        this.isSuccess = false;\r\n                        this.productNotFound = false;\r\n                        this.supplierNotFound = false;\r\n                        this.customerNotFound = false;\r\n                        this.availability = false;\r\n                    }\r\n                    else{\r\n                         this.noAvailability = false;\r\n                    }\r\n                });\r\n        },\r\n        //Get all suppliers from the database\r\n        async getSuppliersWithGivenProduct(){\r\n            await SupplierService.getSuppliersWithGivenProduct(this.productName).then((response)=>{\r\n                this.suppliersWithGivenProduct = response.data;\r\n            });\r\n        },\r\n        //automatically fill in the sale form \r\n        auto(){\r\n            SaleService.getSaleContent(this.productName).then((response)=>{\r\n                if(response.data!=''){\r\n                    this.productName = response.data.name,\r\n                    this.quantity = response.data.num,\r\n                    this.customerName = response.data.customerName,\r\n                    this.price = response.data.price,\r\n                    this.supplierName = response.data.supplierName,\r\n                    this.date = response.data.date\r\n                }\r\n            })\r\n        },\r\n         //go to the add supplier page\r\n        jumpToAddCustomer(){\r\n            this.$router.push({path:'/addCustomer'})\r\n        },\r\n        //get all suppliers\r\n        getAllSuppliers(){\r\n            SupplierService.getSuppliers().then((response)=>{\r\n                this.allSuppliers = response.data\r\n            })\r\n        },\r\n        //get all products\r\n        getAllInfo(){\r\n            BilibiliService.getDistinctProducts().then((response)=>{\r\n                this.allProducts = response.data\r\n            })\r\n        },\r\n        //get all customers\r\n        getAllCustomers(){\r\n            CustomerService.getCustomers().then((response)=>{\r\n                this.allCustomers = response.data\r\n            })\r\n        },\r\n        setSupplier(){\r\n            this.supplierName = this.tempSupplierName\r\n        },\r\n        setProduct(){\r\n            this.productName = this.tempProductName\r\n        },\r\n        setCustomer(){\r\n            this.customerName = this.tempCustomerName\r\n        },\r\n        setTempSupplier(company){\r\n            this.tempSupplierName = company\r\n        },\r\n        setTempProduct(name){\r\n            this.tempProductName = name\r\n        },\r\n        setTempCustomer(name){\r\n            this.tempCustomerName = name\r\n        },\r\n        //Check if the input quantity is valid\r\n        validateQuantity() {\r\n              const quantityRegex = /^[1-9]\\d*$/;\r\n              if (!quantityRegex.test(this.quantity)) {\r\n                this.hasQuantityError = true\r\n              } else {\r\n                this.hasQuantityError = false\r\n              }\r\n        },\r\n        //Check if the input price is valid\r\n        validatePrice() {\r\n              const priceRegex = /^[1-9]\\d*(\\.\\d{1,2})?$/;\r\n              if (!priceRegex.test(this.price)) {\r\n                this.priceError = true;\r\n              } else {\r\n                this.priceError = false;\r\n              }\r\n        },\r\n        //Show remaining quantity of a given product\r\n        showRemainingQuantity(){\r\n            if(this.supplier!='' && this.name!=''){\r\n                BilibiliService.getRemainingQuantity(this.productName, this.supplierName).then((response)=>{\r\n                    this.remainingQuantity = response.data\r\n                })\r\n                this.show = true\r\n                $('showRemaining').show()\r\n            }\r\n        }\r\n    },\r\n    computed:{\r\n        //Get required suppliers after searching\r\n        filteredSuppliers(){\r\n            return this.allSuppliers.filter(supplier => supplier.company.toLowerCase().includes(this.supplierSearch.toLowerCase()));\r\n        },\r\n        //Get required products after searching\r\n        filteredProducts(){\r\n            return this.allProducts.filter(product => product.name.toLowerCase().includes(this.productSearch.toLowerCase()));\r\n        },\r\n        //Get required customers after searching\r\n        filteredCustomers(){\r\n            return this.allCustomers.filter(customer => customer.name.toLowerCase().includes(this.customerSearch.toLowerCase()));\r\n        },\r\n    },\r\n    created(){\r\n        this.getAllSuppliers()\r\n        this.getAllInfo()\r\n        this.getAllCustomers()\r\n    }\r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}