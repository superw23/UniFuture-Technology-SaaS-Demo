{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport BilibiliService from '../../services/Bilibili/BilibiliService';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport * as XLSX from 'xlsx';\nfunction s2ab(s) {\n  // Convert a string to an ArrayBuffer\n  const buf = new ArrayBuffer(s.length);\n  const view = new Uint8Array(buf);\n  for (let i = 0; i < s.length; i++) {\n    view[i] = s.charCodeAt(i) & 0xFF;\n  }\n  return buf;\n}\nexport default {\n  name: 'Products',\n  data() {\n    return {\n      itemsPerPage: '',\n      //the number of customer shown in one page\n      pageNum: 0,\n      //store current page number\n      productName: '',\n      products: [],\n      //store all products with pagination\n      distinctProducts: [],\n      //store products with distinct names\n      search: '',\n      //store search content\n      isSuccess: false,\n      //true if the product info needs editing, else false\n      pdfIconSize: '2em',\n      excelIconSize: '2em'\n    };\n  },\n  methods: {\n    //Get all products with distinct names from the database\n    async getDistinctProducts() {\n      await BilibiliService.getDistinctProducts().then(response => {\n        this.distinctProducts = response.data;\n        this.products = response.data;\n      });\n    },\n    //Delete a chosen product from the database\n    deleteProduct(productName) {\n      BilibiliService.deleteProduct(productName).then(response => {\n        this.isSuccess = true;\n        this.getDistinctProducts();\n      });\n    },\n    getProductName(name) {\n      this.productName = name;\n    },\n    //Sort products by a given field, such as id, name\n    sort(field) {\n      BilibiliService.sortAscending(this.pageNum, this.itemsPerPage, field).then(response => {\n        this.distinctProducts = response.data;\n      });\n    },\n    //Get products information as required after paging\n    pagination(pageNum) {\n      this.pageNum = pageNum;\n      if (this.pageNum == -1) {\n        this.pageNum = 0;\n        return;\n      }\n      BilibiliService.pagination(pageNum, this.itemsPerPage).then(response => {\n        this.distinctProducts = response.data;\n      });\n    },\n    //Change the number of products shown per page \n    changeItemPerPage(num) {\n      this.itemsPerPage = num;\n      this.pagination(this.pageNum, this.itemsPerPage);\n    },\n    //Jump to the product page for a given type\n    jumpToTypeDetailsPage() {\n      this.$router.push({\n        path: '/typeDetails'\n      });\n    },\n    //Download the pdf format of the product table\n    downloadPDF() {\n      const columns = [{\n        header: 'Product ID',\n        dataKey: 'id'\n      }, {\n        header: 'Name',\n        dataKey: 'name'\n      }, {\n        header: 'Quantity',\n        dataKey: 'quantity'\n      }, {\n        header: 'Purchase Price',\n        dataKey: 'purchasePrice'\n      }, {\n        header: 'Sale Price',\n        dataKey: 'sellPrice'\n      }, {\n        header: 'Supplier Name',\n        dataKey: 'supplierId'\n      }, {\n        header: 'Remarks',\n        dataKey: 'remarks'\n      }];\n      const pdf = new jsPDF();\n      //text is placed using x, y coordinates\n      pdf.setFontSize(20).text(\"Product List\", 80, 10);\n      //use autoTable plugin\n      autoTable(pdf, {\n        columns,\n        body: this.distinctProducts,\n        margin: {\n          top: 30\n        }\n      });\n      //show total stock\n      pdf.setFontSize(16).text('Total products: ' + this.total, 80, 20);\n      //download pdf\n      pdf.save(\"Products.pdf\");\n    },\n    //Download the excel format of the product table\n    downloadExcel() {\n      const filteredProductsWithoutUseless = this.filteredProducts.map(products => {\n        return {\n          ProductID: products.id,\n          Name: products.name,\n          Type: products.type,\n          Quantity: products.quantity,\n          PurchasePrice: products.purchasePrice,\n          SalePrice: products.sellPrice,\n          Description: products.remarks\n        };\n      });\n      // Create a new workbook\n      const wb = XLSX.utils.book_new();\n      // Add a new worksheet to the workbook\n      const ws = XLSX.utils.json_to_sheet(filteredProductsWithoutUseless);\n      // Add the worksheet to the workbook\n      XLSX.utils.book_append_sheet(wb, ws, 'Products');\n      // Write the workbook to a binary string\n      const wbout = XLSX.write(wb, {\n        bookType: 'xlsx',\n        type: 'binary'\n      });\n      // Convert the binary string to a Blob object\n      const blob = new Blob([s2ab(wbout)], {\n        type: 'application/octet-stream'\n      });\n      // Create a temporary link to the file and trigger a download\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'Products.xlsx';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  },\n  async created() {\n    //Get all customers data with distinct names when the page is being loaded\n    await this.getDistinctProducts();\n    this.itemsPerPage = this.distinctProducts.length;\n  },\n  computed: {\n    //Get required products after searching\n    filteredProducts() {\n      return this.distinctProducts.filter(product => product.name.toLowerCase().includes(this.search.toLowerCase()));\n    },\n    //Get total number of products\n    total() {\n      return this.distinctProducts.reduce((total, curr) => total = total + curr.quantity, 0);\n    },\n    totalPages() {\n      return Math.ceil(this.products.length / this.itemsPerPage);\n    }\n  }\n};","map":{"version":3,"mappings":";AAkIA,OAAOA,eAAc,MAAO,yCAAwC;AACpE,OAAOC,KAAI,MAAO,OAAO;AACzB,OAAOC,SAAQ,MAAO,iBAAiB;AACvC,OAAO,KAAKC,IAAG,MAAO,MAAK;AAE3B,SAASC,IAAI,CAACC,CAAC,EAAE;EACf;EACA,MAAMC,GAAE,GAAI,IAAIC,WAAW,CAACF,CAAC,CAACG,MAAM,CAAC;EACrC,MAAMC,IAAG,GAAI,IAAIC,UAAU,CAACJ,GAAG,CAAC;EAChC,KAAK,IAAIK,IAAI,CAAC,EAAEA,IAAIN,CAAC,CAACG,MAAM,EAAEG,CAAC,EAAE,EAAE;IACjCF,IAAI,CAACE,CAAC,IAAIN,CAAC,CAACO,UAAU,CAACD,CAAC,IAAI,IAAI;EAClC;EACA,OAAOL,GAAG;AACZ;AACA,eAAe;EACXO,IAAI,EAAE,UAAU;EAChBC,IAAI,GAAE;IACF,OAAM;MACFC,YAAY,EAAE,EAAE;MAAC;MACjBC,OAAO,EAAE,CAAC;MAAC;MACXC,WAAW,EAAE,EAAE;MACfC,QAAQ,EAAE,EAAE;MAAC;MACbC,gBAAgB,EAAE,EAAE;MAAC;MACrBC,MAAM,EAAC,EAAE;MAAC;MACVC,SAAS,EAAE,KAAK;MAAC;MACjBC,WAAW,EAAE,KAAK;MAClBC,aAAa,EAAE;IACnB;EACJ,CAAC;EACDC,OAAO,EAAC;IACJ;IACA,MAAMC,mBAAmB,GAAE;MACvB,MAAMzB,eAAe,CAACyB,mBAAmB,EAAE,CAACC,IAAI,CAAEC,QAAQ,IAAG;QACzD,IAAI,CAACR,gBAAe,GAAIQ,QAAQ,CAACb,IAAI;QACrC,IAAI,CAACI,QAAO,GAAIS,QAAQ,CAACb,IAAG;MAChC,CAAC,CAAC;IACN,CAAC;IACD;IACAc,aAAa,CAACX,WAAW,EAAE;MACvBjB,eAAe,CAAC4B,aAAa,CAACX,WAAW,CAAC,CAACS,IAAI,CAAEC,QAAQ,IAAG;QACxD,IAAI,CAACN,SAAQ,GAAI,IAAI;QACrB,IAAI,CAACI,mBAAmB,EAAC;MAC7B,CAAC,CAAC;IACN,CAAC;IACDI,cAAc,CAAChB,IAAI,EAAC;MAChB,IAAI,CAACI,WAAU,GAAIJ,IAAG;IAC1B,CAAC;IACD;IACAiB,IAAI,CAACC,KAAK,EAAC;MACP/B,eAAe,CAACgC,aAAa,CAAC,IAAI,CAAChB,OAAO,EAAE,IAAI,CAACD,YAAY,EAAEgB,KAAK,CAAC,CAACL,IAAI,CAAEC,QAAQ,IAAG;QACnF,IAAI,CAACR,gBAAe,GAAIQ,QAAQ,CAACb,IAAI;MACzC,CAAC,CAAC;IACN,CAAC;IACD;IACAmB,UAAU,CAACjB,OAAO,EAAC;MACf,IAAI,CAACA,OAAM,GAAIA,OAAO;MACtB,IAAG,IAAI,CAACA,OAAM,IAAK,CAAC,CAAC,EAAE;QACnB,IAAI,CAACA,OAAM,GAAI,CAAC;QAChB;MACJ;MACAhB,eAAe,CAACiC,UAAU,CAACjB,OAAO,EAAC,IAAI,CAACD,YAAY,CAAC,CAACW,IAAI,CAAEC,QAAQ,IAAG;QACnE,IAAI,CAACR,gBAAe,GAAIQ,QAAQ,CAACb,IAAI;MACzC,CAAC,CAAC;IACN,CAAC;IACD;IACAoB,iBAAiB,CAACC,GAAG,EAAC;MAClB,IAAI,CAACpB,YAAW,GAAIoB,GAAG;MACvB,IAAI,CAACF,UAAU,CAAC,IAAI,CAACjB,OAAO,EAAC,IAAI,CAACD,YAAY,CAAC;IACnD,CAAC;IACD;IACAqB,qBAAqB,GAAE;MACnB,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;QAACC,IAAI,EAAC;MAAc,CAAC;IAC3C,CAAC;IACD;IACAC,WAAW,GAAE;MACT,MAAMC,OAAM,GAAI,CACR;QAAEC,MAAM,EAAE,YAAY;QAAEC,OAAO,EAAE;MAAK,CAAC,EACvC;QAAED,MAAM,EAAE,MAAM;QAAEC,OAAO,EAAE;MAAO,CAAC,EACnC;QAAED,MAAM,EAAE,UAAU;QAAEC,OAAO,EAAE;MAAW,CAAC,EAC3C;QAAED,MAAM,EAAE,gBAAgB;QAAEC,OAAO,EAAE;MAAgB,CAAC,EACtD;QAAED,MAAM,EAAE,YAAY;QAAEC,OAAO,EAAE;MAAY,CAAC,EAC9C;QAAED,MAAM,EAAE,eAAe;QAAEC,OAAO,EAAE;MAAa,CAAC,EAClD;QAAED,MAAM,EAAE,SAAS;QAAEC,OAAO,EAAE;MAAU,EAC3C;MACL,MAAMC,GAAE,GAAI,IAAI3C,KAAK,EAAE;MACvB;MACA2C,GAAG,CAACC,WAAW,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,cAAc,EAAE,EAAE,EAAE,EAAE,CAAC;MAChD;MACA5C,SAAS,CAAC0C,GAAG,EAAE;QACXH,OAAO;QACPM,IAAI,EAAE,IAAI,CAAC5B,gBAAgB;QAC3B6B,MAAM,EAAC;UAACC,GAAG,EAAE;QAAE;MACnB,CAAC,CAAC;MACF;MACAL,GAAG,CAACC,WAAW,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,kBAAiB,GAAI,IAAI,CAACI,KAAK,EAAE,EAAE,EAAE,EAAE,CAAC;MACjE;MACAN,GAAG,CAACO,IAAI,CAAC,cAAc,CAAC;IAC5B,CAAC;IACD;IACAC,aAAa,GAAG;MACd,MAAMC,8BAA6B,GAAI,IAAI,CAACC,gBAAgB,CAACC,GAAG,CAACrC,QAAO,IAAK;QAC3E,OAAO;UACHsC,SAAS,EAAEtC,QAAQ,CAACuC,EAAE;UACtBC,IAAI,EAAExC,QAAQ,CAACL,IAAI;UACnB8C,IAAI,EAAEzC,QAAQ,CAAC0C,IAAI;UACnBC,QAAQ,EAAE3C,QAAQ,CAAC4C,QAAQ;UAC3BC,aAAa,EAAE7C,QAAQ,CAAC8C,aAAa;UACrCC,SAAS,EAAE/C,QAAQ,CAACgD,SAAS;UAC7BC,WAAW,EAAEjD,QAAQ,CAACkD;QAE1B,CAAC;MACH,CAAC,CAAC;MACF;MACA,MAAMC,EAAC,GAAIlE,IAAI,CAACmE,KAAK,CAACC,QAAQ,EAAE;MAChC;MACA,MAAMC,EAAC,GAAIrE,IAAI,CAACmE,KAAK,CAACG,aAAa,CAACpB,8BAA8B,CAAC;MACnE;MACAlD,IAAI,CAACmE,KAAK,CAACI,iBAAiB,CAACL,EAAE,EAAEG,EAAE,EAAE,UAAU,CAAC;MAChD;MACA,MAAMG,KAAI,GAAIxE,IAAI,CAACyE,KAAK,CAACP,EAAE,EAAE;QAAEQ,QAAQ,EAAE,MAAM;QAAEjB,IAAI,EAAE;MAAS,CAAC,CAAC;MAClE;MACA,MAAMkB,IAAG,GAAI,IAAIC,IAAI,CAAC,CAAC3E,IAAI,CAACuE,KAAK,CAAC,CAAC,EAAE;QAAEf,IAAI,EAAE;MAA2B,CAAC,CAAC;MAC1E;MACA,MAAMoB,GAAE,GAAIC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC;MAC5C,MAAMM,IAAG,GAAIC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACxCF,IAAI,CAACG,IAAG,GAAIP,GAAG;MACfI,IAAI,CAACI,QAAO,GAAI,eAAe;MAC/BH,QAAQ,CAACtC,IAAI,CAAC0C,WAAW,CAACL,IAAI,CAAC;MAC/BA,IAAI,CAACM,KAAK,EAAE;MACZL,QAAQ,CAACtC,IAAI,CAAC4C,WAAW,CAACP,IAAI,CAAC;IACjC;EACJ,CAAC;EACD,MAAMQ,OAAO,GAAE;IACX;IACA,MAAM,IAAI,CAACnE,mBAAmB,EAAC;IAC/B,IAAI,CAACV,YAAW,GAAI,IAAI,CAACI,gBAAgB,CAACX,MAAK;EACnD,CAAC;EACDqF,QAAQ,EAAC;IACL;IACAvC,gBAAgB,GAAE;MACd,OAAO,IAAI,CAACnC,gBAAgB,CAAC2E,MAAM,CAACC,OAAM,IAAKA,OAAO,CAAClF,IAAI,CAACmF,WAAW,EAAE,CAACC,QAAQ,CAAC,IAAI,CAAC7E,MAAM,CAAC4E,WAAW,EAAE,CAAC,CAAC;IAClH,CAAC;IACD;IACA9C,KAAK,GAAE;MACH,OAAO,IAAI,CAAC/B,gBAAgB,CAAC+E,MAAM,CAAC,CAAChD,KAAK,EAACiD,IAAI,KAAIjD,KAAK,GAACA,KAAK,GAACiD,IAAI,CAACrC,QAAS,EAAC,CAAC,CAAC;IACpF,CAAC;IACDsC,UAAU,GAAE;MACR,OAAQC,IAAI,CAACC,IAAI,CAAC,IAAI,CAACpF,QAAQ,CAACV,MAAK,GAAI,IAAI,CAACO,YAAY,CAAC;IAC/D;EACJ;AACJ","names":["BilibiliService","jsPDF","autoTable","XLSX","s2ab","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","name","data","itemsPerPage","pageNum","productName","products","distinctProducts","search","isSuccess","pdfIconSize","excelIconSize","methods","getDistinctProducts","then","response","deleteProduct","getProductName","sort","field","sortAscending","pagination","changeItemPerPage","num","jumpToTypeDetailsPage","$router","push","path","downloadPDF","columns","header","dataKey","pdf","setFontSize","text","body","margin","top","total","save","downloadExcel","filteredProductsWithoutUseless","filteredProducts","map","ProductID","id","Name","Type","type","Quantity","quantity","PurchasePrice","purchasePrice","SalePrice","sellPrice","Description","remarks","wb","utils","book_new","ws","json_to_sheet","book_append_sheet","wbout","write","bookType","blob","Blob","url","window","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","created","computed","filter","product","toLowerCase","includes","reduce","curr","totalPages","Math","ceil"],"sourceRoot":"","sources":["C:\\Users\\Ella\\Desktop\\vue-frontend\\src\\components\\Bilibili\\Bilibili.vue"],"sourcesContent":["// Made by GRPTeam202205\r\n<template>\r\n    <!--Search bar-->\r\n    <nav class=\"navbar\">\r\n        <div class=\"container-fluid\">\r\n            <!--Drop-down menu to choose the number of Records Per Page-->\r\n            <div class=\"dropdown\">\r\n                <button class=\"btn dropdown-toggle\" type=\"button\" id=\"dropdownMenu2\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    {{$t('Records Per Page')}}\r\n                </button>\r\n                <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2\">\r\n                    <li><button class=\"dropdown-item\" type=\"button\" @click=\"changeItemPerPage(5)\">5</button></li>\r\n                    <li><button class=\"dropdown-item\" type=\"button\" @click=\"changeItemPerPage(10)\">10</button></li>\r\n                    <li><button class=\"dropdown-item\" type=\"button\" @click=\"changeItemPerPage(15)\">15</button></li>\r\n                </ul>\r\n            </div>\r\n            <a class=\"navbar-brand\"></a>\r\n            <form class=\"d-flex\" role=\"search\">\r\n            <input class=\"form-control me-2\" type=\"search\" :placeholder=\"$t('Search')\" aria-label=\"Search\" v-model=\"search\">\r\n            <button class=\"btn btn-outline-success\" type=\"submit\">{{$t('Search')}}</button>\r\n            </form>\r\n        </div>\r\n    </nav>\r\n\r\n    <!--Product List-->\r\n    <div class=\"container\">\r\n        <h1 class=\"test-center\">{{$t('Product.Products List')}}\r\n            <router-link :to=\"{name:'AddProduct'}\"><i class=\"fa fa-cart-plus\" style=\"font-size:42px\"></i></router-link>\r\n        </h1>\r\n        <!-- Success Alert will be shown if the product is successfully deleted from the database. -->\r\n        <div class=\"alert alert-success\" v-if=\"isSuccess\">\r\n            {{$t('Product.The product is deleted successfully!')}}\r\n        </div>\r\n        <br>\r\n        <div class=\"table-responsive\">\r\n        <table class=\"table table-stripped\">\r\n            <thead>\r\n                <th>\r\n                    <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('name')\"/>\r\n                    {{$t('Name')}}\r\n                </th>\r\n                <th>\r\n                    <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('type')\"/>\r\n                    {{$t('Type')}}\r\n                </th>\r\n                <th>\r\n                    <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('quantity')\"/>\r\n                    {{$t('Quantity')}}\r\n                </th>\r\n                <th>\r\n                    <!-- <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('purchase_price')\"/> -->\r\n                    {{$t('Purchase.Purchase Price')}}\r\n                </th>\r\n                <th>\r\n                    <!-- <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('sell_price')\"/> -->\r\n                    {{$t('Sale Price')}}\r\n                </th>\r\n                <th>\r\n                    {{$t('Supplier Info')}}\r\n                </th>\r\n                <th>\r\n                    <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('remarks')\"/>\r\n                    {{$t('Description')}}\r\n                </th>\r\n                <th>{{$t('Delete')}}</th>\r\n            </thead>\r\n            <tbody>\r\n                <tr v-for = \"product in filteredProducts\" v-bind:key = \"product.id\" class=\"table-bordered\">\r\n                    <td>{{product.name}}</td>\r\n                    <td>\r\n                        <router-link :to=\"'/typeDetails/'+ product.type\">\r\n                            <span class=\"badge badge-success rounded-pill\" type=\"button\">{{product.type}}</span>\r\n                        </router-link>\r\n                    </td>\r\n                    <td>{{product.quantity}}</td>\r\n                    <td>{{product.purchasePrice}}</td>\r\n                    <td>{{product.sellPrice}}</td>\r\n                    <td>\r\n                        <router-link :to=\"'/supplierDetails/'+ product.name\">\r\n                            <fa icon=\"address-card\" type=\"button\" />\r\n                        </router-link>\r\n                    </td>  \r\n                    <td>{{product.remarks}}</td>\r\n                    <td>\r\n                        <!-- Modal -->\r\n                        <div class=\"modal fade\" id=\"onDelete\" tabindex=\"-1\" aria-labelledby=\"onDeleteLabel\" aria-hidden=\"true\">\r\n                            <div class=\"modal-dialog\">\r\n                                <div class=\"modal-content\">\r\n                                <div class=\"modal-header\">\r\n                                    <h5 class=\"modal-title\" id=\"onDeleteLabel\">{{$t('CONFIRM')}}</h5>\r\n                                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                                </div>\r\n                                <div class=\"modal-body\">{{$t('Are your sure to delete the product?')}}</div>\r\n                                <div class=\"modal-footer\">\r\n                                    <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">{{$t('No')}}</button>\r\n                                    <button type=\"button\" class=\"btn btn-primary\" data-bs-dismiss=\"modal\" @click=\"deleteProduct(this.productName)\">{{$t('Yes')}}</button>\r\n                                </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <fa icon=\"trash\" type=\"button\" data-bs-toggle=\"modal\" data-bs-target=\"#onDelete\"  @click=\"getProductName(product.name)\"/>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        </div>\r\n        <!-- Show the total product quantity -->\r\n        <h5>{{$t('Total stock')}}: {{total}}</h5>\r\n        <img src=\"/static/Others/pdf.png\" width=\"38\" height=\"35\" type=\"button\" @click=\"downloadPDF\"/>\r\n        &nbsp\r\n        <img src=\"/static/Others/xlsx.png\" width=\"35\" height=\"35\" type=\"button\" @click=\"downloadExcel\"/>\r\n    </div>\r\n    \r\n    <!--Page navigation bar-->\r\n    <nav class=\"navbar\">\r\n        <div class=\"container-fluid\">\r\n            <h5>Total Pages: {{this.totalPages}}</h5>\r\n            <a class=\"navbar-brand\"></a>\r\n            <nav aria-label=\"Page navigation example\">\r\n                <ul class=\"pagination\">\r\n                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\" @click=\"pagination(this.pageNum - 1)\">{{$t('Previous')}}</a></li>\r\n                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\" @click=\"pagination(0)\">{{this.pageNum+1}}</a></li>\r\n                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\" @click=\"pagination(pageNum+1)\">{{$t('Next')}}</a></li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    </nav>\r\n</template>\r\n\r\n<script>\r\nimport BilibiliService from '../../services/Bilibili/BilibiliService'\r\nimport jsPDF from 'jspdf';\r\nimport autoTable from 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx'\r\n\r\nfunction s2ab(s) {\r\n  // Convert a string to an ArrayBuffer\r\n  const buf = new ArrayBuffer(s.length);\r\n  const view = new Uint8Array(buf);\r\n  for (let i = 0; i < s.length; i++) {\r\n    view[i] = s.charCodeAt(i) & 0xFF;\r\n  }\r\n  return buf;\r\n}\r\nexport default {\r\n    name: 'Products',\r\n    data(){\r\n        return{\r\n            itemsPerPage: '',//the number of customer shown in one page\r\n            pageNum: 0,//store current page number\r\n            productName: '',\r\n            products: [],//store all products with pagination\r\n            distinctProducts: [],//store products with distinct names\r\n            search:'',//store search content\r\n            isSuccess: false,//true if the product info needs editing, else false\r\n            pdfIconSize: '2em',\r\n            excelIconSize: '2em',\r\n        }\r\n    },\r\n    methods:{\r\n        //Get all products with distinct names from the database\r\n        async getDistinctProducts(){\r\n            await BilibiliService.getDistinctProducts().then((response)=>{\r\n                this.distinctProducts = response.data;\r\n                this.products = response.data\r\n            });\r\n        },\r\n        //Delete a chosen product from the database\r\n        deleteProduct(productName) {\r\n            BilibiliService.deleteProduct(productName).then((response)=>{\r\n                this.isSuccess = true;\r\n                this.getDistinctProducts()\r\n            });\r\n        },\r\n        getProductName(name){\r\n            this.productName = name\r\n        },\r\n        //Sort products by a given field, such as id, name\r\n        sort(field){\r\n            BilibiliService.sortAscending(this.pageNum, this.itemsPerPage, field).then((response)=>{\r\n                this.distinctProducts = response.data;\r\n            });\r\n        },\r\n        //Get products information as required after paging\r\n        pagination(pageNum){\r\n            this.pageNum = pageNum;\r\n            if(this.pageNum == -1) {\r\n                this.pageNum = 0;\r\n                return;\r\n            }\r\n            BilibiliService.pagination(pageNum,this.itemsPerPage).then((response)=>{\r\n                this.distinctProducts = response.data;\r\n            });\r\n        },\r\n        //Change the number of products shown per page \r\n        changeItemPerPage(num){\r\n            this.itemsPerPage = num;\r\n            this.pagination(this.pageNum,this.itemsPerPage);\r\n        },\r\n        //Jump to the product page for a given type\r\n        jumpToTypeDetailsPage(){\r\n            this.$router.push({path:'/typeDetails'})\r\n        },\r\n        //Download the pdf format of the product table\r\n        downloadPDF(){\r\n            const columns = [\r\n                    { header: 'Product ID', dataKey: 'id' },\r\n                    { header: 'Name', dataKey: 'name' },\r\n                    { header: 'Quantity', dataKey: 'quantity' },\r\n                    { header: 'Purchase Price', dataKey: 'purchasePrice' },\r\n                    { header: 'Sale Price', dataKey: 'sellPrice' },\r\n                    { header: 'Supplier Name', dataKey: 'supplierId' },\r\n                    { header: 'Remarks', dataKey: 'remarks' }\r\n                ];\r\n            const pdf = new jsPDF();\r\n            //text is placed using x, y coordinates\r\n            pdf.setFontSize(20).text(\"Product List\", 80, 10);\r\n            //use autoTable plugin\r\n            autoTable(pdf, {\r\n                columns,\r\n                body: this.distinctProducts,\r\n                margin:{top: 30}\r\n            });\r\n            //show total stock\r\n            pdf.setFontSize(16).text('Total products: ' + this.total, 80, 20);\r\n            //download pdf\r\n            pdf.save(\"Products.pdf\");\r\n        },\r\n        //Download the excel format of the product table\r\n        downloadExcel() {\r\n          const filteredProductsWithoutUseless = this.filteredProducts.map(products => {\r\n            return {\r\n                ProductID: products.id,\r\n                Name: products.name,\r\n                Type: products.type,\r\n                Quantity: products.quantity,\r\n                PurchasePrice: products.purchasePrice,\r\n                SalePrice: products.sellPrice,\r\n                Description: products.remarks,\r\n\r\n            };\r\n          });\r\n          // Create a new workbook\r\n          const wb = XLSX.utils.book_new();\r\n          // Add a new worksheet to the workbook\r\n          const ws = XLSX.utils.json_to_sheet(filteredProductsWithoutUseless);\r\n          // Add the worksheet to the workbook\r\n          XLSX.utils.book_append_sheet(wb, ws, 'Products');\r\n          // Write the workbook to a binary string\r\n          const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });\r\n          // Convert the binary string to a Blob object\r\n          const blob = new Blob([s2ab(wbout)], { type: 'application/octet-stream' });\r\n          // Create a temporary link to the file and trigger a download\r\n          const url = window.URL.createObjectURL(blob);\r\n          const link = document.createElement('a');\r\n          link.href = url;\r\n          link.download = 'Products.xlsx';\r\n          document.body.appendChild(link);\r\n          link.click();\r\n          document.body.removeChild(link);\r\n        }\r\n    },\r\n    async created(){\r\n        //Get all customers data with distinct names when the page is being loaded\r\n        await this.getDistinctProducts()\r\n        this.itemsPerPage = this.distinctProducts.length\r\n    },\r\n    computed:{\r\n        //Get required products after searching\r\n        filteredProducts(){\r\n            return this.distinctProducts.filter(product => product.name.toLowerCase().includes(this.search.toLowerCase()));\r\n        },\r\n        //Get total number of products\r\n        total(){\r\n            return this.distinctProducts.reduce((total,curr)=>(total=total+curr.quantity),0);\r\n        },\r\n        totalPages(){\r\n            return (Math.ceil(this.products.length / this.itemsPerPage))\r\n        }\r\n    }\r\n}\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}