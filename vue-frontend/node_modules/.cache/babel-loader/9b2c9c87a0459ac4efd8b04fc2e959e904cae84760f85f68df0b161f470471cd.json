{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelText as _vModelText, withDirectives as _withDirectives, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, withModifiers as _withModifiers, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */);\nconst _hoisted_2 = {\n  class: \"row col-md-4 offset-md-4\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"alert alert-success\"\n};\nconst _hoisted_4 = {\n  key: 1,\n  class: \"alert alert-danger\"\n};\nconst _hoisted_5 = {\n  class: \"panel panel-primary\"\n};\nconst _hoisted_6 = {\n  class: \"panel-body\"\n};\nconst _hoisted_7 = {\n  class: \"form-group\"\n};\nconst _hoisted_8 = {\n  for: \"name\"\n};\nconst _hoisted_9 = [\"placeholder\"];\nconst _hoisted_10 = {\n  key: 0,\n  class: \"text-danger\"\n};\nconst _hoisted_11 = {\n  class: \"form-group\"\n};\nconst _hoisted_12 = {\n  for: \"address\"\n};\nconst _hoisted_13 = [\"placeholder\"];\nconst _hoisted_14 = {\n  class: \"form-group\"\n};\nconst _hoisted_15 = {\n  for: \"contact\"\n};\nconst _hoisted_16 = [\"placeholder\"];\nconst _hoisted_17 = {\n  key: 0,\n  class: \"text-danger\"\n};\nconst _hoisted_18 = {\n  class: \"form-group\"\n};\nconst _hoisted_19 = {\n  for: \"phoneNumber\"\n};\nconst _hoisted_20 = [\"placeholder\"];\nconst _hoisted_21 = {\n  key: 0,\n  class: \"text-danger\"\n};\nconst _hoisted_22 = {\n  class: \"form-group\"\n};\nconst _hoisted_23 = {\n  for: \"remarks\"\n};\nconst _hoisted_24 = [\"placeholder\"];\nconst _hoisted_25 = {\n  class: \"row align-items-center\"\n};\nconst _hoisted_26 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"empty-row2\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_27 = {\n  class: \"col-6\"\n};\nconst _hoisted_28 = {\n  type: \"submit\",\n  class: \"btn btn-primary\"\n};\nconst _hoisted_29 = {\n  class: \"col-6\"\n};\nconst _hoisted_30 = {\n  type: \"button\",\n  class: \"btn btn-outline-primary\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" Add customer page \"), _createElementVNode(\"div\", null, [_createCommentVNode(\" Title of the page \"), _createElementVNode(\"h2\", null, _toDisplayString(_ctx.$t('Customer.Add Customer')), 1 /* TEXT */), _hoisted_1, _createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" Show the following message if the customer is to the database successfully\"), $data.isSuccess ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _toDisplayString(_ctx.$t('Customer.The customer is added successfully!')), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Show the following message if the customer already exists\"), $data.customerExist ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, _toDisplayString(_ctx.$t('Customer.The customer already exists!')), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Customer form to collect info of the customer to be added \"), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"form\", {\n    onSubmit: _cache[8] || (_cache[8] = _withModifiers((...args) => $options.onCreatePost && $options.onCreatePost(...args), [\"prevent\"]))\n  }, [_createCommentVNode(\" Input name of the customer \"), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"label\", _hoisted_8, _toDisplayString(_ctx.$t('Name')), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    class: \"form-control\",\n    placeholder: _ctx.$t('e.g. Ella'),\n    id: \"name\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.name = $event),\n    onInput: _cache[1] || (_cache[1] = (...args) => $options.validateName && $options.validateName(...args)),\n    required: \"\"\n  }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_9), [[_vModelText, $data.name]]), $data.showError ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, _toDisplayString(_ctx.$t('Please input a valid name')), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" Input address of the customer \"), _createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"label\", _hoisted_12, _toDisplayString(_ctx.$t('Address')), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    class: \"form-control\",\n    placeholder: _ctx.$t('e.g. Tai Kang Road 199'),\n    id: \"address\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.address = $event),\n    required: \"\"\n  }, null, 8 /* PROPS */, _hoisted_13), [[_vModelText, $data.address]])]), _createCommentVNode(\" Input contact person of the customer \"), _createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"label\", _hoisted_15, _toDisplayString(_ctx.$t('Email')), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    class: \"form-control\",\n    placeholder: _ctx.$t('e.g. 123456@gmail.com'),\n    id: \"contact\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.contact = $event),\n    onInput: _cache[4] || (_cache[4] = (...args) => $options.validateEmail && $options.validateEmail(...args)),\n    required: \"\"\n  }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_16), [[_vModelText, $data.contact]]), $data.showErrorTwo ? (_openBlock(), _createElementBlock(\"div\", _hoisted_17, _toDisplayString(_ctx.$t('Please input a valid email address')), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" Input phone number of the customer \"), _createElementVNode(\"div\", _hoisted_18, [_createElementVNode(\"label\", _hoisted_19, _toDisplayString(_ctx.$t('Phone Number')), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    class: \"form-control\",\n    placeholder: _ctx.$t('e.g. 12345678900'),\n    id: \"phoneNumber\",\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $data.phoneNumber = $event),\n    onInput: _cache[6] || (_cache[6] = (...args) => $options.validatePhoneNumber && $options.validatePhoneNumber(...args)),\n    required: \"\"\n  }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_20), [[_vModelText, $data.phoneNumber]]), $data.showErrorThree ? (_openBlock(), _createElementBlock(\"div\", _hoisted_21, _toDisplayString(_ctx.$t('Please input a valid phone number')), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" Input additional information of the customer \"), _createElementVNode(\"div\", _hoisted_22, [_createElementVNode(\"label\", _hoisted_23, _toDisplayString(_ctx.$t('Description')), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    class: \"form-control\",\n    placeholder: _ctx.$t('e.g. Add remarks'),\n    id: \"remarks\",\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => $data.remarks = $event),\n    required: \"\"\n  }, null, 8 /* PROPS */, _hoisted_24), [[_vModelText, $data.remarks]])]), _createElementVNode(\"div\", _hoisted_25, [_hoisted_26, _createElementVNode(\"div\", _hoisted_27, [_createCommentVNode(\" Click the button to submit the customer form to the backend \"), _createElementVNode(\"button\", _hoisted_28, _toDisplayString(_ctx.$t('Customer.Add Customer')), 1 /* TEXT */)]), _createCommentVNode(\" Click the button to go to customer table page \"), _createElementVNode(\"div\", _hoisted_29, [_createVNode(_component_router_link, {\n    to: {\n      name: 'Customer'\n    }\n  }, {\n    default: _withCtx(() => [_createElementVNode(\"button\", _hoisted_30, _toDisplayString(_ctx.$t('Customer.View Customers')), 1 /* TEXT */)]),\n\n    _: 1 /* STABLE */\n  })])])], 32 /* HYDRATE_EVENTS */)])])])])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"mappings":";gCAMQA,oBAAM;;EAEDC,KAAK,EAAC;AAA0B;;;EAE5BA,KAAK,EAAC;;;;EAINA,KAAK,EAAC;;;EAINA,KAAK,EAAC;AAAqB;;EACvBA,KAAK,EAAC;AAAY;;EAGVA,KAAK,EAAC;AAAY;;EACZC,GAAG,EAAC;AAAM;;;;EAEKD,KAAK,EAAC;;;EAG3BA,KAAK,EAAC;AAAY;;EACZC,GAAG,EAAC;AAAS;;;EAInBD,KAAK,EAAC;AAAY;;EACZC,GAAG,EAAC;AAAS;;;;EAEKD,KAAK,EAAC;;;EAG9BA,KAAK,EAAC;AAAY;;EACZC,GAAG,EAAC;AAAa;;;;EAEGD,KAAK,EAAC;;;EAGhCA,KAAK,EAAC;AAAY;;EACZC,GAAG,EAAC;AAAS;;;EAGnBD,KAAK,EAAC;AAAwB;iCAC/BD,oBAA8B;EAAzBC,KAAK,EAAC;AAAY;;EAClBA,KAAK,EAAC;AAAO;;EAENE,IAAI,EAAC,QAAQ;EAACF,KAAK,EAAC;;;EAK3BA,KAAK,EAAC;AAAO;;EAC+BE,IAAI,EAAC,QAAQ;EAACF,KAAK,EAAC;;;;6DAzD7FG,0CAA0B,EAC1BJ,oBA+DM,cA9DFI,0CAA0B,EAC1BJ,oBAAwC,6BAAlCK,OAAE,2CACRC,UAAM,EAENN,oBAyDM,OAzDNO,UAyDM,GAxDFH,kGAAkF,EAC3CI,eAAS,kBAAhDC,oBAEM,OAFNC,UAEM,mBADAL,OAAE,uGAERD,iFAAiE,EAC3BI,mBAAa,kBAAnDC,oBAEM,OAFNE,UAEM,mBADAN,OAAE,gGAERD,kFAAkE,EAClEJ,oBA8CM,OA9CNY,UA8CM,GA7CFZ,oBA4CM,OA5CNa,UA4CM,GA3CFb,oBA0CO;IA1CAc,QAAM,wDAAUC,uDAAY;MAC/BX,mDAAmC,EACnCJ,oBAIM,OAJNgB,UAIM,GAHFhB,oBAAwC,SAAxCiB,UAAwC,mBAApBZ,OAAE,0CACtBL,oBAAiI;IAA1HG,IAAI,EAAC,MAAM;IAACF,KAAK,EAAC,cAAc;IAAEiB,WAAW,EAAEb,OAAE;IAAgBc,EAAE,EAAE,MAAM;+DAAUX,UAAI;IAAGY,OAAK,yCAAEL,uDAAY;IAAEM,QAAQ,EAAR;uEAA5Bb,UAAI,KACrFA,eAAS,kBAApBC,oBAAqF,OAArFa,WAAqF,mBAAxCjB,OAAE,sFAEnDD,sDAAsC,EACtCJ,oBAGM,OAHNuB,WAGM,GAFFvB,oBAA8C,SAA9CwB,WAA8C,mBAAvBnB,OAAE,6CACzBL,oBAA6H;IAAtHG,IAAI,EAAC,MAAM;IAACF,KAAK,EAAC,cAAc;IAAEiB,WAAW,EAAEb,OAAE;IAA4Bc,EAAE,EAAE,SAAS;+DAAUX,aAAO;IAAEa,QAAQ,EAAR;uDAATb,aAAO,OAEtHJ,6DAA6C,EAC7CJ,oBAIM,OAJNyB,WAIM,GAHFzB,oBAA4C,SAA5C0B,WAA4C,mBAArBrB,OAAE,2CACzBL,oBAAmJ;IAA5IG,IAAI,EAAC,MAAM;IAACF,KAAK,EAAC,cAAc;IAAEiB,WAAW,EAAEb,OAAE;IAA2Bc,EAAE,EAAE,SAAS;+DAAUX,aAAO;IAAGY,OAAK,yCAAEL,yDAAa;IAAEM,QAAQ,EAAR;wEAAhCb,aAAO,KACtGA,kBAAY,kBAAvBC,oBAAiG,OAAjGkB,WAAiG,mBAAjDtB,OAAE,+FAEtDD,2DAA2C,EAC3CJ,oBAIM,OAJN4B,WAIM,GAHF5B,oBAAuD,SAAvD6B,WAAuD,mBAA5BxB,OAAE,kDAC7BL,oBAA4J;IAArJG,IAAI,EAAC,MAAM;IAACF,KAAK,EAAC,cAAc;IAAEiB,WAAW,EAAEb,OAAE;IAAsBc,EAAE,EAAE,aAAa;+DAAUX,iBAAW;IAAGY,OAAK,yCAAEL,qEAAmB;IAAEM,QAAQ,EAAR;wEAA1Cb,iBAAW,KACzGA,oBAAc,kBAAzBC,oBAAkG,OAAlGqB,WAAkG,mBAAhDzB,OAAE,8FAExDD,qEAAqD,EACrDJ,oBAGM,OAHN+B,WAGM,GAFF/B,oBAAkD,SAAlDgC,WAAkD,mBAA3B3B,OAAE,iDACzBL,oBAAuH;IAAhHG,IAAI,EAAC,MAAM;IAACF,KAAK,EAAC,cAAc;IAAEiB,WAAW,EAAEb,OAAE;IAAsBc,EAAE,EAAE,SAAS;+DAAUX,aAAO;IAAEa,QAAQ,EAAR;uDAATb,aAAO,OAEhHR,oBAYM,OAZNiC,WAYM,GAXFC,WAA8B,EAC9BlC,oBAKM,OALNmC,WAKM,GAJF/B,oFAAoE,EACpEJ,oBAES,UAFToC,WAES,mBADH/B,OAAE,6CAGZD,sEAAsD,EACtDJ,oBAEM,OAFNqC,WAEM,GADFC,aAAmJC;IAArIC,EAAE,EAAE;MAAAC;IAAA;EAAiB;sBAAE,MAAgG,CAAhGzC,oBAAgG,UAAhG0C,WAAgG,mBAAxCrC,OAAE","names":["_createElementVNode","class","for","type","_createCommentVNode","_ctx","_hoisted_1","_hoisted_2","$data","_createElementBlock","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","onSubmit","$options","_hoisted_7","_hoisted_8","placeholder","id","onInput","required","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_14","_hoisted_15","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_createVNode","_component_router_link","to","name","_hoisted_30"],"sourceRoot":"","sources":["C:\\Users\\Ella\\Desktop\\vue-frontend\\src\\components\\Sales\\Customer\\AddCustomer.vue"],"sourcesContent":["// Made by GRPTeam202205\r\n<template>\r\n    <!-- Add customer page -->\r\n    <div>\r\n        <!-- Title of the page -->\r\n        <h2>{{$t('Customer.Add Customer')}}</h2>\r\n        <hr />\r\n\r\n        <div class=\"row col-md-4 offset-md-4\">\r\n            <!-- Show the following message if the customer is to the database successfully-->\r\n            <div class=\"alert alert-success\" v-if=\"isSuccess\">\r\n                {{$t('Customer.The customer is added successfully!')}}\r\n            </div>\r\n            <!-- Show the following message if the customer already exists-->\r\n            <div class=\"alert alert-danger\" v-if=\"customerExist\">\r\n                {{$t('Customer.The customer already exists!')}}\r\n            </div>\r\n            <!-- Customer form to collect info of the customer to be added -->\r\n            <div class=\"panel panel-primary\">\r\n                <div class=\"panel-body\">\r\n                    <form @submit.prevent=\"onCreatePost\">\r\n                        <!-- Input name of the customer -->\r\n                        <div class=\"form-group\">\r\n                            <label for=\"name\">{{$t('Name')}}</label>\r\n                            <input type=\"text\" class=\"form-control\" :placeholder=\"$t('e.g. Ella')\"  id= \"name\" v-model=\"name\" @input=\"validateName\" required>\r\n                            <div v-if=\"showError\" class=\"text-danger\">{{ $t('Please input a valid name') }}</div>\r\n                        </div>\r\n                        <!-- Input address of the customer -->\r\n                        <div class=\"form-group\">\r\n                            <label for=\"address\">{{$t('Address')}}</label>\r\n                            <input type=\"text\" class=\"form-control\" :placeholder=\"$t('e.g. Tai Kang Road 199')\" id= \"address\" v-model=\"address\" required>\r\n                        </div>\r\n                        <!-- Input contact person of the customer -->\r\n                        <div class=\"form-group\">\r\n                            <label for=\"contact\">{{$t('Email')}}</label>\r\n                            <input type=\"text\" class=\"form-control\" :placeholder=\"$t('e.g. 123456@gmail.com')\" id= \"contact\" v-model=\"contact\" @input=\"validateEmail\" required>\r\n                            <div v-if=\"showErrorTwo\" class=\"text-danger\">{{ $t('Please input a valid email address') }}</div>\r\n                        </div>\r\n                        <!-- Input phone number of the customer -->\r\n                        <div class=\"form-group\">\r\n                            <label for=\"phoneNumber\">{{$t('Phone Number')}}</label>\r\n                            <input type=\"text\" class=\"form-control\" :placeholder=\"$t('e.g. 12345678900')\" id= \"phoneNumber\" v-model=\"phoneNumber\" @input=\"validatePhoneNumber\" required>\r\n                            <div v-if=\"showErrorThree\" class=\"text-danger\">{{ $t('Please input a valid phone number') }}</div>\r\n                        </div>\r\n                        <!-- Input additional information of the customer -->\r\n                        <div class=\"form-group\">\r\n                            <label for=\"remarks\">{{$t('Description')}}</label>\r\n                            <input type=\"text\" class=\"form-control\" :placeholder=\"$t('e.g. Add remarks')\" id= \"remarks\" v-model=\"remarks\" required>\r\n                        </div>\r\n                        <div class=\"row align-items-center\">\r\n                            <div class=\"empty-row2\"></div>\r\n                            <div class=\"col-6\">\r\n                                <!-- Click the button to submit the customer form to the backend -->\r\n                                <button type=\"submit\" class=\"btn btn-primary\">\r\n                                    {{$t('Customer.Add Customer')}}\r\n                                </button>\r\n                            </div>\r\n                            <!-- Click the button to go to customer table page -->\r\n                            <div class=\"col-6\">\r\n                                <router-link :to=\"{name:'Customer'}\"><button type=\"button\" class=\"btn btn-outline-primary\">{{$t('Customer.View Customers')}}</button></router-link>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nexport default {\r\n    data() {\r\n        return {\r\n            name: '',//store the name of the customer\r\n            address: '',//store the adress of the customer\r\n            remarks: '',//store the additional information of the customer\r\n            contact: '',//store the contact person of the customer\r\n            phoneNumber: '',//store the phone number of the customer\r\n            isSuccess: false,//true if the customer is added successfully, else false\r\n            customerExist: false,//true if the customer with the same name has already exists, else false\r\n            showError: false,\r\n            showErrorTwo: false,\r\n            showErrorThree: false,\r\n        };\r\n    },\r\n    methods: {\r\n        // add a new customer\r\n        // pass the customer information to the backend\r\n        onCreatePost() {\r\n            if (this.showError || this.showErrorTwo || this.showErrorThree) {\r\n                alert('Please correct the errors before submitting.');\r\n                return;\r\n            }\r\n\r\n            axios\r\n                .post(`addCustomer`, {\r\n                    name: this.name,\r\n                    address: this.address,\r\n                    phoneNumber: this.phoneNumber,\r\n                    contact: this.contact,\r\n                    remarks: this.remarks\r\n                })\r\n                .then((response) => {\r\n                    if(response.data==''){\r\n                        this.customerExist = true\r\n                        this.isSuccess = false\r\n                    }\r\n                    else{\r\n                        this.isSuccess = true,\r\n                        this.customerExist = false,\r\n                        this.name = '',\r\n                        this.address = '',\r\n                        this.phoneNumber = '',\r\n                        this.contact = '',\r\n                        this.remarks = ''\r\n                    }\r\n                });\r\n        },\r\n        validateName() {\r\n            // Regular expression for letters only validation\r\n            const lettersRegex = /^[A-Za-z\\s]+$/;\r\n\r\n            // Check if the input is a valid name\r\n            if (!lettersRegex.test(this.name)) {\r\n               // Show the error message\r\n               this.showError = true;\r\n            } else {\r\n               // Hide the error message\r\n               this.showError = false;\r\n            }\r\n        },\r\n        //Check if the email is valid\r\n        validateEmail() {\r\n            // Regular expression for email validation\r\n            const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\r\n            // Check if the input is a valid email address\r\n            if (!emailRegex.test(this.contact)) {\r\n                // Show the error message\r\n                this.showErrorTwo = true;\r\n            } else {\r\n                // Hide the error message\r\n                this.showErrorTwo = false;\r\n            }\r\n        },\r\n        //Check if the phone number is valid, i.e., it only contains numbers\r\n        validatePhoneNumber() {\r\n            const numberRegex = /^[0-9]*$/;\r\n\r\n            // Check if the input is a valid phone number\r\n            if (!numberRegex.test(this.phoneNumber)) {\r\n               // Show the error message\r\n               this.showErrorThree = true;\r\n            } else {\r\n               // Hide the error message\r\n               this.showErrorThree = false;\r\n            }\r\n        },\r\n    },\r\n};\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}