{"ast":null,"code":"import PurchaseService from '@/services/Purchase/PurchaseService';\nimport axios from 'axios';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport * as XLSX from 'xlsx';\nfunction s2ab(s) {\n  // Convert a string to an ArrayBuffer\n  const buf = new ArrayBuffer(s.length);\n  const view = new Uint8Array(buf);\n  for (let i = 0; i < s.length; i++) {\n    view[i] = s.charCodeAt(i) & 0xFF;\n  }\n  return buf;\n}\nexport default {\n  name: 'Purchases',\n  data() {\n    return {\n      itemsPerPage: 5,\n      //the number of customer shown in one page\n      pageNum: 0,\n      //store current page number\n      purchases: [],\n      fixedPurchases: [],\n      search: '',\n      //store search content\n      startDate: '',\n      endDate: '',\n      tempReturnNum: '',\n      invalidQuantity: '',\n      isSuccess: false,\n      editing: false,\n      returnSuccess: false,\n      hasQuantityError: false,\n      priceError: false,\n      pdfIconSize: '2em',\n      excelIconSize: '2em'\n    };\n  },\n  methods: {\n    //Get all purchase records\n    async getPurchases() {\n      await PurchaseService.getPurchases().then(response => {\n        this.purchases = response.data;\n        this.fixedPurchases = response.data;\n      });\n    },\n    //Sort purchase records of a given field\n    sort(field) {\n      PurchaseService.sort(this.pageNum, this.itemsPerPage, field).then(response => {\n        this.purchases = response.data;\n      });\n    },\n    //Get purchase records within given dates\n    getPurchasesWithinGivenDates() {\n      PurchaseService.getPurchasesWithinGivenDates(this.startDate, this.endDate).then(response => {\n        this.purchases = response.data;\n      });\n    },\n    //Set the number of records shown in one page\n    pagination(pageNum) {\n      this.pageNum = pageNum;\n      if (this.pageNum == -1) {\n        this.pageNum = 0;\n        return;\n      }\n      PurchaseService.pagination(pageNum, this.itemsPerPage).then(response => {\n        this.purchases = response.data;\n      });\n    },\n    //Set the number of records shown in one page\n    changeItemPerPage(num) {\n      this.itemsPerPage = num;\n      this.pagination(this.pageNum, this.itemsPerPage);\n    },\n    //Update or return a purchase record\n    updatePurchase(i) {\n      if (this.hasQuantityError || this.priceError || this.invalidQuantity) {\n        alert('Please correct the errors before submitting.');\n        return;\n      } else {\n        axios.put(`updatePurchase`, {\n          id: this.$refs.id.value,\n          name: this.$refs.name.value,\n          type: this.$refs.type.value,\n          num: this.$refs.num.value,\n          total: this.$refs.total.value,\n          price: this.$refs.price.value,\n          productId: this.$refs.productId.value,\n          supplierName: this.$refs.supplierName.value,\n          remarks: this.$refs.remarks.value,\n          returnPrice: this.$refs.returnPrice.value,\n          returnNum: this.$refs.returnNum.value,\n          date: this.$refs.date.value\n        }, {\n          params: {\n            updateType: i\n          }\n        }).then(response => {\n          if (i == 1) {\n            this.isSuccess = true;\n            this.returnSuccess = false;\n            this.hasQuantityError = false;\n            this.priceError = false;\n          } else {\n            this.isSuccess = false;\n            this.returnSuccess = true;\n            this.hasQuantityError = false;\n            this.priceError = false;\n          }\n          this.getPurchases();\n        });\n      }\n    },\n    //Pass the purchase info to the edit form\n    passPurchase(purchase) {\n      this.editing = true;\n      this.hasQuantityError = false;\n      this.priceError = false;\n      this.invalidQuantity = false;\n      this.$refs.id.value = purchase.id;\n      this.$refs.name.value = purchase.name;\n      this.$refs.num.value = purchase.num;\n      this.$refs.returnNum.value = purchase.num;\n      this.$refs.type.value = purchase.type;\n      this.$refs.total.value = purchase.total;\n      this.$refs.price.value = purchase.price, this.$refs.returnPrice.value = purchase.returnPrice, this.$refs.productId.value = purchase.productId, this.$refs.supplierName.value = purchase.supplierName, this.$refs.remarks.value = purchase.remarks, this.$refs.date.value = purchase.date, this.tempReturnNum = purchase.num;\n    },\n    //Check if the input quantity is valid\n    validateQuantity(quantity) {\n      const quantityRegex = /^[1-9]\\d*$/;\n      if (!quantityRegex.test(quantity)) {\n        this.hasQuantityError = true;\n      } else if (quantity > this.tempReturnNum) {\n        this.invalidQuantity = true;\n      } else {\n        this.hasQuantityError = false;\n        this.invalidQuantity = false;\n      }\n    },\n    //Check if the input price is valid\n    validatePrice(price) {\n      const priceRegex = /^[1-9]\\d*(\\.\\d{1,2})?$/;\n      if (!priceRegex.test(price)) {\n        this.priceError = true;\n      } else {\n        this.priceError = false;\n      }\n    },\n    //Download the purchase form in pdf format\n    downloadPDF() {\n      const columns = [{\n        header: 'Order No.',\n        dataKey: 'id'\n      }, {\n        header: 'Product ID',\n        dataKey: 'productId'\n      }, {\n        header: 'Name',\n        dataKey: 'name'\n      }, {\n        header: 'Type',\n        dataKey: 'type'\n      }, {\n        header: 'Quantity',\n        dataKey: 'num'\n      }, {\n        header: 'Purchase Price',\n        dataKey: 'price'\n      }, {\n        header: 'Total',\n        dataKey: 'total'\n      }, {\n        header: 'Description',\n        dataKey: 'remarks'\n      }];\n      const pdf = new jsPDF();\n      //text is placed using x, y coordinates\n      pdf.setFontSize(20).text(\"Purchases History\", 80, 10);\n      //use autoTable plugin\n      autoTable(pdf, {\n        columns,\n        body: this.purchases,\n        margin: {\n          top: 30\n        }\n      });\n      //show total stock\n      pdf.setFontSize(16).text('Total stock: ' + this.total, 90, 20);\n      //download pdf\n      pdf.save(\"Purchases.pdf\");\n    },\n    //Download the purchase form in excel format\n    downloadExcel() {\n      const filteredPurchasesWithoutUseless = this.filteredPurchases.map(purchases => {\n        return {\n          PurchaseID: purchases.id,\n          Name: purchases.name,\n          Type: purchases.type,\n          Quantity: purchases.num,\n          Price: purchases.price,\n          Total: purchases.total,\n          ProductID: purchases.productId,\n          SupplierName: purchases.supplierName,\n          Description: purchases.remarks,\n          Date: purchases.date\n        };\n      });\n\n      // Create a new workbook\n      const wb = XLSX.utils.book_new();\n\n      // Add a new worksheet to the workbook\n      const ws = XLSX.utils.json_to_sheet(filteredPurchasesWithoutUseless);\n\n      // Add the worksheet to the workbook\n      XLSX.utils.book_append_sheet(wb, ws, 'Purchases');\n\n      // Write the workbook to a binary string\n      const wbout = XLSX.write(wb, {\n        bookType: 'xlsx',\n        type: 'binary'\n      });\n\n      // Convert the binary string to a Blob object\n      const blob = new Blob([s2ab(wbout)], {\n        type: 'application/octet-stream'\n      });\n\n      // Create a temporary link to the file and trigger a download\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'Purchases History.xlsx';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    },\n    Quantity() {\n      const quantityRegex = /^[1-9]\\d*$/;\n      if (!quantityRegex.test(this.quantity)) {\n        this.quantityError = true;\n      } else {\n        this.quantityError = false;\n      }\n    }\n  },\n  async created() {\n    await this.getPurchases();\n    this.itemsPerPage = this.purchases.length;\n  },\n  computed: {\n    //Filter purchase records according to the product name\n    filteredPurchases() {\n      return this.purchases.filter(purchase => purchase.name.toLowerCase().includes(this.search.toLowerCase()));\n    },\n    //Caculate total price of purchase records\n    caculateTotal() {\n      return this.purchases.map(purchase => Number(purchase.num) * Number(purchase.sell_price));\n    },\n    //Caculate total number of purchase records\n    total() {\n      return this.purchases.reduce((total, curr) => total = total + curr.num, 0);\n    },\n    //Calculate total pages of purchase records\n    totalPages() {\n      return Math.ceil(this.fixedPurchases.length / this.itemsPerPage);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["PurchaseService","axios","jsPDF","autoTable","XLSX","s2ab","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","name","data","itemsPerPage","pageNum","purchases","fixedPurchases","search","startDate","endDate","tempReturnNum","invalidQuantity","isSuccess","editing","returnSuccess","hasQuantityError","priceError","pdfIconSize","excelIconSize","methods","getPurchases","then","response","sort","field","getPurchasesWithinGivenDates","pagination","changeItemPerPage","num","updatePurchase","alert","put","id","$refs","value","type","total","price","productId","supplierName","remarks","returnPrice","returnNum","date","params","updateType","passPurchase","purchase","validateQuantity","quantity","quantityRegex","test","validatePrice","priceRegex","downloadPDF","columns","header","dataKey","pdf","setFontSize","text","body","margin","top","save","downloadExcel","filteredPurchasesWithoutUseless","filteredPurchases","map","PurchaseID","Name","Type","Quantity","Price","Total","ProductID","SupplierName","Description","Date","wb","utils","book_new","ws","json_to_sheet","book_append_sheet","wbout","write","bookType","blob","Blob","url","window","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","quantityError","created","computed","filter","toLowerCase","includes","caculateTotal","Number","sell_price","reduce","curr","totalPages","Math","ceil"],"sourceRoot":"","sources":["C:\\Users\\SuperW\\Desktop\\暑期实习\\vue-frontend\\src\\components\\Procurement\\Purchase\\Purchase.vue"],"sourcesContent":["// Made by GRPTeam202205\r\n<template>\r\n    <!--Search bar-->\r\n    <nav class=\"navbar\">\r\n        <div class=\"container-fluid\">\r\n            <!--Drop-down menu to choose the number of Records Per Page-->\r\n            <div class=\"dropdown\">\r\n                <button class=\"btn dropdown-toggle\" type=\"button\" id=\"dropdownMenu2\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    {{$t('Records Per Page')}}\r\n                </button>\r\n                <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2\">\r\n                    <li><button class=\"dropdown-item\" type=\"button\" @click=\"changeItemPerPage(5)\">5</button></li>\r\n                    <li><button class=\"dropdown-item\" type=\"button\" @click=\"changeItemPerPage(10)\">10</button></li>\r\n                    <li><button class=\"dropdown-item\" type=\"button\" @click=\"changeItemPerPage(15)\">15</button></li>\r\n                </ul>\r\n            </div>\r\n            <a class=\"navbar-brand\"></a>\r\n            <form class=\"d-flex\" role=\"search\">\r\n            <input class=\"form-control me-2\" type=\"search\" :placeholder=\"$t('Search')\" aria-label=\"Search\" v-model=\"search\">\r\n            <button class=\"btn btn-outline-success\" type=\"submit\">{{$t('Search')}}</button>\r\n            </form>\r\n        </div>\r\n    </nav>\r\n\r\n    <!--Edit Purchase-->\r\n    <div class=\"modal fade\" id=\"exampleModal\" ref=\"purchaseModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n    <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\" id=\"exampleModalLabel\">\r\n            <span v-if=\"editing\">{{$t('Purchase.Edit Purchase')}}</span>\r\n            <span v-else>{{$t('Purchase.Add A New Purchase')}}</span>\r\n            </h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n            <form>\r\n            <div class=\"mb-3\">\r\n                <label for=\"id\" class=\"col-form-label\">{{$t('ID')}}:</label>\r\n                <input type=\"text\" class=\"form-control\" id=\"id\" ref=\"id\" value=\"\" disabled=\"disabled\">\r\n            </div>\r\n            <div class=\"mb-3\">\r\n                <label for=\"name\" class=\"col-form-label\">{{$t('Name')}}:</label>\r\n                <input type=\"text\" class=\"form-control\" id=\"name\" ref=\"name\" value=\"\">\r\n            </div>\r\n            <div class=\"mb-3\">\r\n                <label for=\"type\" class=\"col-form-label\">{{$t('Type')}}:</label>\r\n                <input type=\"text\" class=\"form-control\" id=\"type\" ref=\"type\" value=\"\">\r\n            </div>\r\n            <div class=\"mb-3\">\r\n                <label for=\"total\" class=\"col-form-label\">{{$t('Total')}}:</label>\r\n                <input type=\"text\" class=\"form-control\" id=\"total\" ref=\"total\" value=\"\">\r\n            </div>\r\n            <div class=\"mb-3\">\r\n                <label for=\"num\" class=\"col-form-label\">{{$t('Number')}}:</label>\r\n                <input type=\"text\" class=\"form-control\" id=\"num\" ref=\"num\" value=\"\" disabled=\"disabled\">\r\n            </div>\r\n            <div class=\"mb-3\">\r\n                <label for=\"price\" class=\"col-form-label\">{{$t('Price')}}:</label>\r\n                <input type=\"text\" class=\"form-control\" id=\"price\" ref=\"price\" value=\"\">\r\n            </div>\r\n            <div class=\"mb-3\">\r\n                <label for=\"supplierName\" class=\"col-form-label\">{{$t('Supplier Name')}}:</label>\r\n                <input type=\"text\" class=\"form-control\" id=\"supplierName\" ref=\"supplierName\" value=\"\">\r\n            </div>\r\n            <div class=\"mb-3\">\r\n                <label for=\"productId\" class=\"col-form-label\">{{$t('Product ID')}}:</label>\r\n                <input type=\"text\" class=\"form-control\" id=\"productId\" ref=\"productId\" value=\"\">\r\n            </div>\r\n            <div class=\"mb-3\">\r\n                <label for=\"remarks\" class=\"col-form-label\">{{$t('Remarks')}}:</label>\r\n                <input type=\"text\" class=\"form-control\" id=\"remarks\" ref=\"remarks\" value=\"\">\r\n            </div>\r\n            <div class=\"mb-3\">\r\n                <label for=\"date\" class=\"col-form-label\">{{$t('Date')}}:</label>\r\n                <input type=\"text\" class=\"form-control\" id=\"date\" ref=\"date\" value=\"\">\r\n            </div>\r\n            </form>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">{{$t('Close')}}</button>\r\n            <button type=\"button\" class=\"btn btn-primary\" data-bs-dismiss=\"modal\" @click=\"updatePurchase(1)\">{{$t('Send')}}</button>\r\n        </div>\r\n        </div>\r\n    </div>\r\n    </div>\r\n\r\n    <!-- Get return price and quantity -->\r\n    <div class=\"modal fade\" id=\"returnPurchase\" ref=\"purchaseModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n    <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\" id=\"returnPurchase\">\r\n            <span>{{$t('Purchase.Return Purchase')}}</span>\r\n            </h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n            <form>\r\n            <div class=\"mb-3\">\r\n                <label for=\"returnPrice\" class=\"col-form-label\">{{$t('Return Price')}}:</label>\r\n                <input type=\"text\" class=\"form-control\" id=\"returnPrice\" ref=\"returnPrice\" value=\"\" @input=\"validatePrice(this.$refs.returnPrice.value)\" required>\r\n                <div v-show=\"priceError\" class=\"text-danger\">{{$t('Please input a valid purchase price')}}</div>\r\n            </div>\r\n            <div class=\"mb-3\">\r\n                <label for=\"returnNum\" class=\"col-form-label\">{{$t('Return Quantity')}}:</label>\r\n                <input type=\"text\" class=\"form-control\" id=\"returnNum\" ref=\"returnNum\" value=\"\" @input=\"validateQuantity(this.$refs.returnNum.value)\" required>\r\n                <div v-show=\"hasQuantityError\" class=\"text-danger\">{{$t('Please input a valid quantity')}}</div>\r\n                <div v-if=\"invalidQuantity\" class=\"text-danger\">{{$t('The quantity cannot be larger than the original input quantity')}}</div>\r\n            </div>\r\n            </form>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">{{$t('Close')}}</button>\r\n            <button type=\"button\" class=\"btn btn-primary\" data-bs-dismiss=\"modal\" @click=\"updatePurchase(2)\">{{$t('Send')}}</button>\r\n        </div>\r\n        </div>\r\n    </div>\r\n    </div>\r\n\r\n    <!--Purchase List-->\r\n    <div class=\"container\">\r\n        <h1 class=\"test-center\">{{$t('Purchase.Purchases History')}}\r\n            <router-link :to=\"{name:'AddPurchase'}\"><i class=\"fa fa-cart-plus\" style=\"font-size:42px\"></i></router-link>\r\n        </h1>\r\n        <br>\r\n        <div class=\"alert alert-success\" v-if=\"isSuccess\">\r\n            {{$t('Purchase.The purchase is edited successfully!')}}\r\n        </div>\r\n        <div class=\"alert alert-success\" v-if=\"returnSuccess\">\r\n            {{$t('Purchase.The purchase is returned successfully!')}}\r\n        </div>\r\n        <div class=\"row align-items-center\">\r\n            <div class=\"col\"></div>\r\n            <div class=\"col-2\">\r\n                {{$t('Start Date:')}} <input  type=\"date\" class=\"form-control me-2\" :placeholder=\"$t('Choose a start date')\" id= \"date\" v-model=\"startDate\">\r\n            </div>\r\n            <div class=\"col-2\">\r\n                {{$t('End Date:')}} <input type=\"date\" class=\"form-control\" :placeholder=\"$t('Choose an end date')\" id= \"date\" v-model=\"endDate\">\r\n            </div>\r\n            <div class=\"col-auto\">\r\n            <img src=\"/static/Others/check.png\" width=\"20\" height=\"20\" type=\"submit\" @click=\"getPurchasesWithinGivenDates\"/>\r\n            </div>\r\n            <div class=\"col\"></div>\r\n        </div>\r\n        <br>\r\n        <div class=\"table-responsive\">\r\n            <table class=\"table table-stripped\">\r\n                <!-- class=\"table-responsive\" -->\r\n                <thead>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-numeric-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('id')\"/>\r\n                        {{$t('Purchase.Purchase ID')}} \r\n                    </th>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('name')\"/>\r\n                        {{$t('Name')}}\r\n                    </th>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('type')\"/>\r\n                        {{$t('Type')}}\r\n                    </th>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('num')\"/>\r\n                        {{$t('Quantity')}}\r\n                    </th>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('price')\"/>\r\n                        {{$t('Price')}}\r\n                    </th>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('total')\"/>\r\n                        {{$t('Total')}}\r\n                    </th>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('productId')\"/>\r\n                        {{$t('Product ID')}}\r\n                    </th>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('supplierName')\"/>\r\n                        {{$t('Supplier Name')}}\r\n                    </th>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('remarks')\"/>\r\n                        {{$t('Description')}}\r\n                    </th>\r\n                    <th>\r\n                        <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('date')\"/>\r\n                        {{$t('Date')}}\r\n                    </th>\r\n                    <th>{{$t('Edit')}}</th>\r\n                </thead>\r\n                <tbody>\r\n                    <tr v-for = \"purchase in filteredPurchases\" v-bind:key = \"purchase.id\" class=\"table-bordered\">\r\n                        <td>{{purchase.id}}</td>\r\n                        <td>{{purchase.name}}</td>\r\n                        <td><span class=\"badge badge-success rounded-pill\">{{purchase.type}}</span></td>\r\n                        <td>{{purchase.num}}</td>\r\n                        <td>{{purchase.price}}</td>\r\n                        <td>{{purchase.total}}</td>\r\n                        <td>{{purchase.productId}}</td>\r\n                        <td>{{purchase.supplierName}}</td>\r\n                        <td>{{purchase.remarks}}</td>\r\n                        <td>{{purchase.date}}</td>\r\n                        <td>\r\n                            <fa icon=\"rotate-left\" type=\"button\" data-bs-toggle=\"modal\" data-bs-target=\"#returnPurchase\" @click=\"passPurchase(purchase)\"/>&nbsp;\r\n                            <fa icon=\"edit\" type=\"button\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\" data-bs-whatever=\"@mdo\" @click=\"passPurchase(purchase)\"/>\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n        <h5>{{$t('Total stock')}}:{{total}}</h5>\r\n        <img src=\"/static/Others/pdf.png\" width=\"38\" height=\"35\" type=\"button\" @click=\"downloadPDF\"/>\r\n        &nbsp\r\n        <img src=\"/static/Others/xlsx.png\" width=\"35\" height=\"35\" type=\"button\" @click=\"downloadExcel\"/>\r\n    </div>\r\n    \r\n    <!--Page navigation bar-->\r\n    <nav class=\"navbar\">\r\n        <div class=\"container-fluid\">\r\n            <h5>Total Pages: {{this.totalPages}}</h5>\r\n            <a class=\"navbar-brand\"></a>\r\n            <nav aria-label=\"Page navigation example\">\r\n                <ul class=\"pagination\">\r\n                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\" @click=\"pagination(this.pageNum - 1)\">{{$t('Previous')}}</a></li>\r\n                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\" @click=\"pagination(0)\">{{this.pageNum+1}}</a></li>\r\n                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\" @click=\"pagination(pageNum+1)\">{{$t('Next')}}</a></li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    </nav>\r\n</template>\r\n\r\n<script>\r\nimport PurchaseService from '@/services/Purchase/PurchaseService'\r\nimport axios from 'axios'\r\nimport jsPDF from 'jspdf'\r\nimport autoTable from 'jspdf-autotable'\r\nimport * as XLSX from 'xlsx'\r\n\r\nfunction s2ab(s) {\r\n  // Convert a string to an ArrayBuffer\r\n  const buf = new ArrayBuffer(s.length);\r\n  const view = new Uint8Array(buf);\r\n  for (let i = 0; i < s.length; i++) {\r\n    view[i] = s.charCodeAt(i) & 0xFF;\r\n  }\r\n  return buf;\r\n}\r\nexport default {\r\n    name: 'Purchases',\r\n    data(){\r\n        return{\r\n            itemsPerPage: 5,//the number of customer shown in one page\r\n            pageNum: 0,//store current page number\r\n            purchases: [],\r\n            fixedPurchases: [],\r\n            search:'',//store search content\r\n            startDate: '',\r\n            endDate: '',\r\n            tempReturnNum: '',\r\n            invalidQuantity: '',\r\n            isSuccess: false,\r\n            editing: false,\r\n            returnSuccess: false,\r\n            hasQuantityError: false,\r\n            priceError: false,\r\n            pdfIconSize: '2em',\r\n            excelIconSize: '2em',\r\n        }\r\n    },\r\n    methods:{\r\n        //Get all purchase records\r\n        async getPurchases(){\r\n            await PurchaseService.getPurchases().then((response)=>{\r\n                this.purchases = response.data;\r\n                this.fixedPurchases = response.data;\r\n            });\r\n        },\r\n        //Sort purchase records of a given field\r\n        sort(field){\r\n            PurchaseService.sort(this.pageNum, this.itemsPerPage, field).then((response)=>{\r\n                this.purchases = response.data;\r\n            });\r\n        },\r\n        //Get purchase records within given dates\r\n        getPurchasesWithinGivenDates(){\r\n            PurchaseService.getPurchasesWithinGivenDates(this.startDate,this.endDate).then((response)=>{\r\n                this.purchases = response.data;\r\n            });\r\n        },\r\n        //Set the number of records shown in one page\r\n        pagination(pageNum){\r\n            this.pageNum = pageNum;\r\n            if(this.pageNum==-1) {\r\n                this.pageNum=0;\r\n                return;\r\n            }\r\n            PurchaseService.pagination(pageNum,this.itemsPerPage).then((response)=>{\r\n                this.purchases = response.data;\r\n            });\r\n        },\r\n        //Set the number of records shown in one page\r\n        changeItemPerPage(num){\r\n            this.itemsPerPage = num;\r\n            this.pagination(this.pageNum,this.itemsPerPage);\r\n        },\r\n        //Update or return a purchase record\r\n        updatePurchase(i){\r\n            if (this.hasQuantityError || this.priceError ||this.invalidQuantity) {\r\n                alert('Please correct the errors before submitting.');\r\n                return;\r\n            }\r\n            else{\r\n                axios\r\n                .put(`updatePurchase`, {\r\n                    id: this.$refs.id.value,\r\n                    name: this.$refs.name.value,\r\n                    type: this.$refs.type.value,\r\n                    num: this.$refs.num.value,\r\n                    total: this.$refs.total.value,\r\n                    price: this.$refs.price.value,\r\n                    productId: this.$refs.productId.value,\r\n                    supplierName: this.$refs.supplierName.value,\r\n                    remarks: this.$refs.remarks.value,\r\n                    returnPrice: this.$refs.returnPrice.value,\r\n                    returnNum: this.$refs.returnNum.value,\r\n                    date: this.$refs.date.value,\r\n                },{params:{updateType: i}})\r\n                .then((response) => {\r\n                    if(i==1){\r\n                        this.isSuccess = true\r\n                        this.returnSuccess = false\r\n                        this.hasQuantityError = false\r\n                        this.priceError = false\r\n                    }   \r\n                    else{\r\n                        this.isSuccess = false\r\n                        this.returnSuccess = true\r\n                        this.hasQuantityError = false\r\n                        this.priceError = false\r\n                    }\r\n                    this.getPurchases()\r\n                });\r\n            }\r\n        },\r\n        //Pass the purchase info to the edit form\r\n        passPurchase(purchase){\r\n          this.editing = true;\r\n          this.hasQuantityError = false\r\n          this.priceError = false\r\n          this.invalidQuantity = false\r\n          this.$refs.id.value = purchase.id;\r\n          this.$refs.name.value = purchase.name;\r\n          this.$refs.num.value = purchase.num;\r\n          this.$refs.returnNum.value = purchase.num;\r\n          this.$refs.type.value = purchase.type;\r\n          this.$refs.total.value = purchase.total;\r\n          this.$refs.price.value = purchase.price,\r\n          this.$refs.returnPrice.value = purchase.returnPrice,\r\n          this.$refs.productId.value = purchase.productId,\r\n          this.$refs.supplierName.value = purchase.supplierName,\r\n          this.$refs.remarks.value = purchase.remarks,\r\n          this.$refs.date.value = purchase.date,\r\n          this.tempReturnNum = purchase.num;\r\n        },\r\n        //Check if the input quantity is valid\r\n        validateQuantity(quantity) {\r\n              const quantityRegex = /^[1-9]\\d*$/;\r\n              if (!quantityRegex.test(quantity)) {\r\n                this.hasQuantityError = true\r\n              } else if(quantity > this.tempReturnNum){\r\n                this.invalidQuantity = true\r\n              }else {\r\n                this.hasQuantityError = false\r\n                this.invalidQuantity = false\r\n              }\r\n        },\r\n        //Check if the input price is valid\r\n        validatePrice(price) {\r\n              const priceRegex = /^[1-9]\\d*(\\.\\d{1,2})?$/;\r\n              if (!priceRegex.test(price)) {\r\n                this.priceError = true;\r\n              } else {\r\n                this.priceError = false;\r\n              }\r\n        },\r\n        //Download the purchase form in pdf format\r\n        downloadPDF(){\r\n            const columns = [\r\n                    { header: 'Order No.', dataKey: 'id' },\r\n                    { header: 'Product ID', dataKey: 'productId' },\r\n                    { header: 'Name', dataKey: 'name' },\r\n                    { header: 'Type', dataKey: 'type' },\r\n                    { header: 'Quantity', dataKey: 'num' },\r\n                    { header: 'Purchase Price', dataKey: 'price' },\r\n                    { header: 'Total', dataKey: 'total' },\r\n                    { header: 'Description', dataKey: 'remarks' }\r\n                ];\r\n            const pdf = new jsPDF();\r\n            //text is placed using x, y coordinates\r\n            pdf.setFontSize(20).text(\"Purchases History\", 80, 10);\r\n            //use autoTable plugin\r\n            autoTable(pdf, {\r\n                columns,\r\n                body: this.purchases,\r\n                margin:{top: 30}\r\n            });\r\n            //show total stock\r\n            pdf.setFontSize(16).text('Total stock: ' + this.total, 90, 20);\r\n            //download pdf\r\n            pdf.save(\"Purchases.pdf\");\r\n        },\r\n        //Download the purchase form in excel format\r\n        downloadExcel() {\r\n            const filteredPurchasesWithoutUseless = this.filteredPurchases.map(purchases => {\r\n                return {\r\n                    PurchaseID: purchases.id,\r\n                    Name: purchases.name,\r\n                    Type: purchases.type,\r\n                    Quantity: purchases.num,\r\n                    Price: purchases.price,\r\n                    Total: purchases.total,\r\n                    ProductID: purchases.productId,\r\n                    SupplierName: purchases.supplierName,\r\n                    Description: purchases.remarks,\r\n                    Date: purchases.date,\r\n                    };\r\n            });\r\n\r\n            // Create a new workbook\r\n            const wb = XLSX.utils.book_new();\r\n\r\n            // Add a new worksheet to the workbook\r\n            const ws = XLSX.utils.json_to_sheet(filteredPurchasesWithoutUseless);\r\n\r\n            // Add the worksheet to the workbook\r\n            XLSX.utils.book_append_sheet(wb, ws, 'Purchases');\r\n\r\n            // Write the workbook to a binary string\r\n            const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });\r\n\r\n            // Convert the binary string to a Blob object\r\n            const blob = new Blob([s2ab(wbout)], { type: 'application/octet-stream' });\r\n\r\n            // Create a temporary link to the file and trigger a download\r\n            const url = window.URL.createObjectURL(blob);\r\n            const link = document.createElement('a');\r\n            link.href = url;\r\n            link.download = 'Purchases History.xlsx';\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n        },\r\n        Quantity() {\r\n              const quantityRegex = /^[1-9]\\d*$/;\r\n              if (!quantityRegex.test(this.quantity)) {\r\n                this.quantityError = true;\r\n              } else {\r\n                this.quantityError = false;\r\n              }\r\n        }\r\n    },\r\n    async created(){\r\n        await this.getPurchases()\r\n        this.itemsPerPage = this.purchases.length\r\n    },\r\n    computed:{\r\n        //Filter purchase records according to the product name\r\n        filteredPurchases(){\r\n            return this.purchases.filter(purchase => purchase.name.toLowerCase().includes(this.search.toLowerCase()));\r\n        },\r\n        //Caculate total price of purchase records\r\n        caculateTotal(){\r\n            return this.purchases.map(purchase => Number(purchase.num) * Number(purchase.sell_price))\r\n        },\r\n        //Caculate total number of purchase records\r\n        total(){\r\n            return this.purchases.reduce((total,curr)=>(total=total+curr.num),0);\r\n        },\r\n        //Calculate total pages of purchase records\r\n        totalPages(){\r\n            return (Math.ceil(this.fixedPurchases.length / this.itemsPerPage))\r\n        }\r\n    }\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}