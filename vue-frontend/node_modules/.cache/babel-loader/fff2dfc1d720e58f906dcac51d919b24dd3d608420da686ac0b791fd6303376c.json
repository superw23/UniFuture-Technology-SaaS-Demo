{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport BilibiliService from '../../services/Bilibili/BilibiliService';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport * as XLSX from 'xlsx';\nfunction s2ab(s) {\n  // Convert a string to an ArrayBuffer\n  const buf = new ArrayBuffer(s.length);\n  const view = new Uint8Array(buf);\n  for (let i = 0; i < s.length; i++) {\n    view[i] = s.charCodeAt(i) & 0xFF;\n  }\n  return buf;\n}\nexport default {\n  name: 'Bilibili',\n  data() {\n    return {\n      itemsPerPage: '',\n      //the number of customer shown in one page\n      pageNum: 0,\n      //store current page number\n      bilibiliName: '',\n      records: [],\n      //store all deleteRecord with pagination\n      distinctRecords: [],\n      //store deleteRecord with distinct names\n      search: '',\n      //store search content\n      isSuccess: false,\n      //true if the product info needs editing, else false\n      pdfIconSize: '2em',\n      excelIconSize: '2em'\n    };\n  },\n  methods: {\n    //Get all products with distinct names from the database\n    // async getDistinctRecords(){\n    //     await BilibiliService.getDistinctRecords().then((response)=>{\n    //         this.distinctRecords = response.data;\n    //         this.products = response.data\n    //     });\n    // },\n    async getAllRecords() {\n      await BilibiliService.getAllRecords().then(response => {\n        this.distinctRecords = response.data;\n        this.records = response.data;\n      });\n    },\n    //Delete a chosen product from the database\n    deleteRecord(bilibiliName) {\n      BilibiliService.deleteRecord(bilibiliName).then(response => {\n        this.isSuccess = true;\n        this.getDistinctRecords();\n      });\n    },\n    getBilibiliName(name) {\n      this.bilibiliName = name;\n    },\n    //按转入时间/转入单号/转入贝壳/来源/状态排序\n    sort(field) {\n      BilibiliService.sortAscending(this.pageNum, this.itemsPerPage, field).then(response => {\n        this.distinctRecords = response.data;\n      });\n    },\n    //Get records as required after paging\n    pagination(pageNum) {\n      this.pageNum = pageNum;\n      if (this.pageNum == -1) {\n        this.pageNum = 0;\n        return;\n      }\n      BilibiliService.pagination(pageNum, this.itemsPerPage).then(response => {\n        this.distinctRecords = response.data;\n      });\n    },\n    //调整每页显示记录的数量\n    changeItemPerPage(num) {\n      this.itemsPerPage = num;\n      this.pagination(this.pageNum, this.itemsPerPage);\n    },\n    //Jump to the product page for a given type\n    jumpToTypeDetailsPage() {\n      this.$router.push({\n        path: '/typeDetails'\n      });\n    },\n    //Download the pdf format of the product table\n    downloadPDF() {\n      const columns = [{\n        header: 'Product ID',\n        dataKey: 'id'\n      }, {\n        header: 'Name',\n        dataKey: 'name'\n      }, {\n        header: 'Quantity',\n        dataKey: 'quantity'\n      }, {\n        header: 'Purchase Price',\n        dataKey: 'purchasePrice'\n      }, {\n        header: 'Sale Price',\n        dataKey: 'sellPrice'\n      }, {\n        header: 'Supplier Name',\n        dataKey: 'supplierId'\n      }, {\n        header: 'Remarks',\n        dataKey: 'remarks'\n      }];\n      const pdf = new jsPDF();\n      //text is placed using x, y coordinates\n      pdf.setFontSize(20).text(\"Product List\", 80, 10);\n      //use autoTable plugin\n      autoTable(pdf, {\n        columns,\n        body: this.distinctRecords,\n        margin: {\n          top: 30\n        }\n      });\n      //show total stock\n      pdf.setFontSize(16).text('Total records: ' + this.total, 80, 20);\n      //download pdf\n      pdf.save(\"Bilibili_Records.pdf\");\n    },\n    //Download the excel format of the product table\n    downloadExcel() {\n      const filteredRecordsWithoutUseless = this.filteredRecords.map(records => {\n        return {\n          转入时间: records.转入时间,\n          转入单号: records.转入单号,\n          转入贝壳: records.转入贝壳,\n          来源: records.来源,\n          状态: records.状态\n        };\n      });\n      // Create a new workbook\n      const wb = XLSX.utils.book_new();\n      // Add a new worksheet to the workbook\n      const ws = XLSX.utils.json_to_sheet(filteredRecordsWithoutUseless);\n      // Add the worksheet to the workbook\n      XLSX.utils.book_append_sheet(wb, ws, 'Records');\n      // Write the workbook to a binary string\n      const wbout = XLSX.write(wb, {\n        bookType: 'xlsx',\n        type: 'binary'\n      });\n      // Convert the binary string to a Blob object\n      const blob = new Blob([s2ab(wbout)], {\n        type: 'application/octet-stream'\n      });\n      // Create a temporary link to the file and trigger a download\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'Records.xlsx';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  },\n  async created() {\n    //Get all customers data with distinct names when the page is being loaded\n    // await this.getDistinctRecords()\n    await this.getAllRecords();\n    this.itemsPerPage = this.distinctRecords.length;\n  },\n  computed: {\n    //Get required records after searching\n    filteredRecords() {\n      return this.distinctRecords.filter(record => record.来源.toLowerCase().includes(this.search.toLowerCase()));\n    },\n    //Get total number of records\n    total() {\n      return this.distinctRecords.reduce((total, curr) => total += 1, 0);\n    },\n    totalPages() {\n      return Math.ceil(this.records.length / this.itemsPerPage);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["BilibiliService","jsPDF","autoTable","XLSX","s2ab","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","name","data","itemsPerPage","pageNum","bilibiliName","records","distinctRecords","search","isSuccess","pdfIconSize","excelIconSize","methods","getAllRecords","then","response","deleteRecord","getDistinctRecords","getBilibiliName","sort","field","sortAscending","pagination","changeItemPerPage","num","jumpToTypeDetailsPage","$router","push","path","downloadPDF","columns","header","dataKey","pdf","setFontSize","text","body","margin","top","total","save","downloadExcel","filteredRecordsWithoutUseless","filteredRecords","map","转入时间","转入单号","转入贝壳","来源","状态","wb","utils","book_new","ws","json_to_sheet","book_append_sheet","wbout","write","bookType","type","blob","Blob","url","window","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","created","computed","filter","record","toLowerCase","includes","reduce","curr","totalPages","Math","ceil"],"sourceRoot":"","sources":["C:\\Users\\Ella\\Desktop\\vue-frontend\\src\\components\\Bilibili\\Bilibili.vue"],"sourcesContent":["// Made by GRPTeam202205\r\n<template>\r\n    <!--Search bar-->\r\n    <nav class=\"navbar\">\r\n        <div class=\"container-fluid\">\r\n            <!--Drop-down menu to choose the number of Records Per Page-->\r\n            <div class=\"dropdown\">\r\n                <button class=\"btn dropdown-toggle\" type=\"button\" id=\"dropdownMenu2\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    {{$t('Records Per Page')}}\r\n                </button>\r\n                <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2\">\r\n                    <li><button class=\"dropdown-item\" type=\"button\" @click=\"changeItemPerPage(5)\">5</button></li>\r\n                    <li><button class=\"dropdown-item\" type=\"button\" @click=\"changeItemPerPage(10)\">10</button></li>\r\n                    <li><button class=\"dropdown-item\" type=\"button\" @click=\"changeItemPerPage(15)\">15</button></li>\r\n                </ul>\r\n            </div>\r\n            <a class=\"navbar-brand\"></a>\r\n            <form class=\"d-flex\" role=\"search\">\r\n            <input class=\"form-control me-2\" type=\"search\" :placeholder=\"$t('Search')\" aria-label=\"Search\" v-model=\"search\">\r\n            <button class=\"btn btn-outline-success\" type=\"submit\">{{$t('Search')}}</button>\r\n            </form>\r\n        </div>\r\n    </nav>\r\n\r\n    <!--Income List-->\r\n    <div class=\"container\">\r\n        <h1 class=\"test-center\">{{$t('Income List')}}\r\n            <router-link :to=\"{name:'AddProduct'}\"><i class=\"fa fa-cart-plus\" style=\"font-size:42px\"></i></router-link>\r\n        </h1>\r\n        <!-- Success Alert will be shown if the product is successfully deleted from the database. -->\r\n        <div class=\"alert alert-success\" v-if=\"isSuccess\">\r\n            {{$t('Product.The product is deleted successfully!')}}\r\n        </div>\r\n        <br>\r\n        <div class=\"table-responsive\">\r\n        <table class=\"table table-stripped\">\r\n            <thead>\r\n                <th>\r\n                    <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('转入单号')\"/>\r\n                    {{$t('Reference No.')}}\r\n                </th>\r\n                <th>\r\n                    <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('来源')\"/>\r\n                    {{$t('Source')}}\r\n                </th>\r\n                <th>\r\n                    <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('贝壳')\"/>\r\n                    {{$t('Shells')}}\r\n                </th>\r\n                <th>\r\n                    <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('状态')\"/>\r\n                    {{$t('Status')}}\r\n                </th>\r\n                <th>\r\n                    <i class=\"fa fa-sort-alpha-asc\" type=\"button\" aria-hidden=\"true\" @click=\"sort('转入时间')\"/>\r\n                    {{$t('Time')}}\r\n                </th>\r\n                <th>\r\n                    {{$t('Delete')}}\r\n                </th>\r\n            </thead>\r\n            <tbody>\r\n                <tr v-for = \"record in filteredRecords\" v-bind:key = \"record.id\" class=\"table-bordered\">\r\n                    <td>{{record.转入单号}}</td>\r\n                    <!-- <td>\r\n                        <router-link :to=\"'/typeDetails/'+ product.type\">\r\n                            <span class=\"badge badge-success rounded-pill\" type=\"button\">{{product.type}}</span>\r\n                        </router-link>\r\n                    </td> -->\r\n                    <td>{{record.来源}}</td>\r\n                    <td>{{record.贝壳}}</td>\r\n                    <td>{{record.状态}}</td>\r\n                    <!-- <td>\r\n                        <router-link :to=\"'/supplierDetails/'+ product.name\">\r\n                            <fa icon=\"address-card\" type=\"button\" />\r\n                        </router-link>\r\n                    </td>   -->\r\n                    <td>{{record.转入时间}}</td>\r\n                    <td>\r\n                        <!-- Modal -->\r\n                        <div class=\"modal fade\" id=\"onDelete\" tabindex=\"-1\" aria-labelledby=\"onDeleteLabel\" aria-hidden=\"true\">\r\n                            <div class=\"modal-dialog\">\r\n                                <div class=\"modal-content\">\r\n                                <div class=\"modal-header\">\r\n                                    <h5 class=\"modal-title\" id=\"onDeleteLabel\">{{$t('CONFIRM')}}</h5>\r\n                                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                                </div>\r\n                                <div class=\"modal-body\">{{$t('Are your sure to delete the record?')}}</div>\r\n                                <div class=\"modal-footer\">\r\n                                    <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">{{$t('No')}}</button>\r\n                                    <button type=\"button\" class=\"btn btn-primary\" data-bs-dismiss=\"modal\" @click=\"deleteRecord(this.bilibiliName)\">{{$t('Yes')}}</button>\r\n                                </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <fa icon=\"trash\" type=\"button\" data-bs-toggle=\"modal\" data-bs-target=\"#onDelete\"  @click=\"getBilibiliName(record.name)\"/>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        </div>\r\n        <!-- Show the total records quantity -->\r\n        <h5>{{$t('Total records')}}: {{total}}</h5>\r\n        <img src=\"/static/Others/pdf.png\" width=\"38\" height=\"35\" type=\"button\" @click=\"downloadPDF\"/>\r\n        &nbsp\r\n        <img src=\"/static/Others/xlsx.png\" width=\"35\" height=\"35\" type=\"button\" @click=\"downloadExcel\"/>\r\n    </div>\r\n    \r\n    <!--Page navigation bar-->\r\n    <nav class=\"navbar\">\r\n        <div class=\"container-fluid\">\r\n            <h5>{{$t('Total Pages: ')}}{{this.totalPages}}</h5>\r\n            <a class=\"navbar-brand\"></a>\r\n            <nav aria-label=\"Page navigation example\">\r\n                <ul class=\"pagination\">\r\n                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\" @click=\"pagination(this.pageNum - 1)\">{{$t('Previous')}}</a></li>\r\n                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\" @click=\"pagination(0)\">{{this.pageNum+1}}</a></li>\r\n                    <li class=\"page-item\"><a class=\"page-link\" href=\"#\" @click=\"pagination(pageNum+1)\">{{$t('Next')}}</a></li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    </nav>\r\n</template>\r\n\r\n<script>\r\nimport BilibiliService from '../../services/Bilibili/BilibiliService'\r\nimport jsPDF from 'jspdf';\r\nimport autoTable from 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx'\r\n\r\nfunction s2ab(s) {\r\n  // Convert a string to an ArrayBuffer\r\n  const buf = new ArrayBuffer(s.length);\r\n  const view = new Uint8Array(buf);\r\n  for (let i = 0; i < s.length; i++) {\r\n    view[i] = s.charCodeAt(i) & 0xFF;\r\n  }\r\n  return buf;\r\n}\r\nexport default {\r\n    name: 'Bilibili',\r\n    data(){\r\n        return{\r\n            itemsPerPage: '',//the number of customer shown in one page\r\n            pageNum: 0,//store current page number\r\n            bilibiliName: '',\r\n            records: [],//store all deleteRecord with pagination\r\n            distinctRecords: [],//store deleteRecord with distinct names\r\n            search:'',//store search content\r\n            isSuccess: false,//true if the product info needs editing, else false\r\n            pdfIconSize: '2em',\r\n            excelIconSize: '2em',\r\n        }\r\n    },\r\n    methods:{\r\n        //Get all products with distinct names from the database\r\n        // async getDistinctRecords(){\r\n        //     await BilibiliService.getDistinctRecords().then((response)=>{\r\n        //         this.distinctRecords = response.data;\r\n        //         this.products = response.data\r\n        //     });\r\n        // },\r\n        async getAllRecords(){\r\n            await BilibiliService.getAllRecords().then((response)=>{\r\n                this.distinctRecords = response.data;\r\n                this.records = response.data\r\n            });\r\n        },\r\n        //Delete a chosen product from the database\r\n        deleteRecord(bilibiliName) {\r\n            BilibiliService.deleteRecord(bilibiliName).then((response)=>{\r\n                this.isSuccess = true;\r\n                this.getDistinctRecords()\r\n            });\r\n        },\r\n        getBilibiliName(name){\r\n            this.bilibiliName = name\r\n        },\r\n        //按转入时间/转入单号/转入贝壳/来源/状态排序\r\n        sort(field){\r\n            BilibiliService.sortAscending(this.pageNum, this.itemsPerPage, field).then((response)=>{\r\n                this.distinctRecords = response.data;\r\n            });\r\n        },\r\n        //Get records as required after paging\r\n        pagination(pageNum){\r\n            this.pageNum = pageNum;\r\n            if(this.pageNum == -1) {\r\n                this.pageNum = 0;\r\n                return;\r\n            }\r\n            BilibiliService.pagination(pageNum,this.itemsPerPage).then((response)=>{\r\n                this.distinctRecords = response.data;\r\n            });\r\n        },\r\n        //调整每页显示记录的数量\r\n        changeItemPerPage(num){\r\n            this.itemsPerPage = num;\r\n            this.pagination(this.pageNum,this.itemsPerPage);\r\n        },\r\n        //Jump to the product page for a given type\r\n        jumpToTypeDetailsPage(){\r\n            this.$router.push({path:'/typeDetails'})\r\n        },\r\n        //Download the pdf format of the product table\r\n        downloadPDF(){\r\n            const columns = [\r\n                    { header: 'Product ID', dataKey: 'id' },\r\n                    { header: 'Name', dataKey: 'name' },\r\n                    { header: 'Quantity', dataKey: 'quantity' },\r\n                    { header: 'Purchase Price', dataKey: 'purchasePrice' },\r\n                    { header: 'Sale Price', dataKey: 'sellPrice' },\r\n                    { header: 'Supplier Name', dataKey: 'supplierId' },\r\n                    { header: 'Remarks', dataKey: 'remarks' }\r\n                ];\r\n            const pdf = new jsPDF();\r\n            //text is placed using x, y coordinates\r\n            pdf.setFontSize(20).text(\"Product List\", 80, 10);\r\n            //use autoTable plugin\r\n            autoTable(pdf, {\r\n                columns,\r\n                body: this.distinctRecords,\r\n                margin:{top: 30}\r\n            });\r\n            //show total stock\r\n            pdf.setFontSize(16).text('Total records: ' + this.total, 80, 20);\r\n            //download pdf\r\n            pdf.save(\"Bilibili_Records.pdf\");\r\n        },\r\n        //Download the excel format of the product table\r\n        downloadExcel() {\r\n          const filteredRecordsWithoutUseless = this.filteredRecords.map(records => {\r\n            return {\r\n                转入时间: records.转入时间,\r\n                转入单号: records.转入单号,\r\n                转入贝壳: records.转入贝壳,\r\n                来源: records.来源,\r\n                状态: records.状态\r\n            };\r\n          });\r\n          // Create a new workbook\r\n          const wb = XLSX.utils.book_new();\r\n          // Add a new worksheet to the workbook\r\n          const ws = XLSX.utils.json_to_sheet(filteredRecordsWithoutUseless);\r\n          // Add the worksheet to the workbook\r\n          XLSX.utils.book_append_sheet(wb, ws, 'Records');\r\n          // Write the workbook to a binary string\r\n          const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });\r\n          // Convert the binary string to a Blob object\r\n          const blob = new Blob([s2ab(wbout)], { type: 'application/octet-stream' });\r\n          // Create a temporary link to the file and trigger a download\r\n          const url = window.URL.createObjectURL(blob);\r\n          const link = document.createElement('a');\r\n          link.href = url;\r\n          link.download = 'Records.xlsx';\r\n          document.body.appendChild(link);\r\n          link.click();\r\n          document.body.removeChild(link);\r\n        }\r\n    },\r\n    async created(){\r\n        //Get all customers data with distinct names when the page is being loaded\r\n        // await this.getDistinctRecords()\r\n        await this.getAllRecords()\r\n        this.itemsPerPage = this.distinctRecords.length\r\n    },\r\n    computed:{\r\n        //Get required records after searching\r\n        filteredRecords(){\r\n            return this.distinctRecords.filter(record => record.来源.toLowerCase().includes(this.search.toLowerCase()));\r\n        },\r\n        //Get total number of records\r\n        total(){\r\n            return this.distinctRecords.reduce((total,curr)=>(total+=1),0);\r\n        },\r\n        totalPages(){\r\n            return (Math.ceil(this.records.length / this.itemsPerPage))\r\n        }\r\n    }\r\n}\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}